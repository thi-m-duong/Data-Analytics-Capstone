*------------------------------------------------------------*
User:                Intern Three
Date:                March 18, 2016
Time:                19:38:21
Site:                70085778
Platform:            X64_7HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                March 18, 2016
Time:                19:38:11
*------------------------------------------------------------*
14716  proc freq data=EMWS1.Tree3_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.Tree3META;
14718  run;
 
NOTE: There were 14 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.TREE3META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14719  proc print data=WORK.Tree3META label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 7 observations read from the data set WORK.TREE3META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14755  data WORK.Tree3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14756  length ORDER $20;
14757  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14758     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14759  set EMWS1.IDS2_TARGETBUY_DM( where=(_TYPE_="TARGET"));
14760  NumLevels=2;
14761  select(upcase(ORDER));
14762  when('DESC') ORDER = 'Descending';
14763  when('ASC') ORDER = 'Ascending';
14764  when('FMTDESC') ORDER = 'Formatted Descending';
14765  when('FMTASC') ORDER = 'Formatted Ascending';
14766  otherwise ORDER = 'Descending';
14767  end;
14768  output;
14769  run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14770  title9 ' ';
14771  proc print data=WORK.Tree3_EVENT noobs label;
14772  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14773  title9 ' ';
14774  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14775  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE3_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14776  title10;
 
"No decisions defined for target "TargetBuy"."
14777  proc print data = EMWS1.Ids2_TargetBuy_DM noobs label;
14778  var _type_ variable label;
14779  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14780  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14781  title9 ' ';
14782  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14783  run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14784  title10;
 
14785  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15292  *------------------------------------------------------------*;
15293  * Tree3: Generation of macros and macro variables;
15294  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15295  *------------------------------------------------------------*;
 
15296  %let EMEXCEPTIONSTRING=;
15297  *------------------------------------------------------------*;
15298  * TRAIN: Tree3;
15299  *------------------------------------------------------------*;
15300  %let EM_ACTION = TRAIN;
15301  %let syscc = 0;
15302  %macro main;
15303
15304    %if %upcase(&EM_ACTION) = CREATE %then %do;
15305      filename temp catalog 'sashelp.emmodl.tree_create.source';
15306      %include temp;
15307      filename temp;
15308
15309      %em_tree_create;
15310    %end;
15311
15312     %else
15313     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15314
15315         filename temp catalog 'sashelp.emmodl.tree_train.source';
15316         %include temp;
15317         filename temp;
15318         %em_tree_train;
15319     %end;
15320
15321    %else
15322    %if %upcase(&EM_ACTION) = SCORE %then %do;
15323      filename temp catalog 'sashelp.emmodl.tree_score.source';
15324      %include temp;
15325      filename temp;
15326
15327      %em_tree_score;
15328
15329    %end;
15330
15331    %else
15332    %if %upcase(&EM_ACTION) = REPORT %then %do;
15333
15334         filename temp catalog 'sashelp.emmodl.tree_report.source';
15335         %include temp;
15336         filename temp;
15337
15338         %em_tree_report;
15339     %end;
15340
15341    %else
15342    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15343
15344         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15345         %include temp;
15346         filename temp;
15347         %EM_TREE_OPENTREEVIEWER;
15348
15349     %end;
15350
15351    %else
15352    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15353
15354         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15355         %include temp;
15356         filename temp;
15357         %EM_TREE_CLOSETREEVIEWER;
15358
15359     %end;
15360
15361
15362     %doendm:
15363  %mend main;
15364
15365  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15367 +%macro em_tree_train;
15369 +   %if &EM_IMPORT_DATA eq %then %do;
15370 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15371 +       %put &em_codebar;
15372 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15373 +       %put &errormsg;
15374 +       %put &em_codebar;
15375 +       %goto doendm;
15376 +   %end;
15377 +   %else
15378 +       %let EMEXCEPTIONSTRING =;
15380 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15381 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15382 +        %put &em_codebar;
15383 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15384 +        %put &errormsg;
15385 +        %put &em_codebar;
15386 +        %goto doendm;
15387 +   %end;
15389 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15390 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15391 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15392 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15393 +        %put &em_codebar;
15394 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15395 +        %put &errormsg;
15396 +        %put &em_codebar;
15397 +        %goto doendm;
15398 +   %end;
15400 +   /* Initialize property macro variables */
15401 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15402 +   %include temp;
15403 +   filename temp;
15405 +   %EM_SetProperties;
15407 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15408 +   %EM_GETNAME(key=EMTREE, type=DATA);
15409 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15410 +     /* if import eq Y and no importtable defined, throw an exception */
15411 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15412 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15413 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15414 +         %put &em_codebar;
15415 +         %put &errmsg;
15416 +         %put &em_codebar;
15417 +         %goto doendm;
15418 +      %end;
15419 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15420 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15421 +         %put &em_codebar;
15422 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15423 +         %put &errormsg;
15424 +         %put &em_codebar;
15425 +         %goto doendm;
15426 +      %end;
15427 +      %else %do;
15428 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15429 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15430 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15431 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15432 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15433 +         %let dsid = %sysfunc(close(&dsid));
15434 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15435 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15436 +            %put &em_codebar;
15437 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15438 +            %put &errormsg;
15439 +            %put &em_codebar;
15440 +            %goto doendm;
15441 +         %end;
15442 +      %end;
15443 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15444 +         proc delete data=&EM_USER_EMTREE;
15445 +         run;
15446 +      %end;
15447 +   %end;
15448 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15449 +      proc delete data=&EM_USER_EMTREE;
15450 +      run;
15451 +   %end;
15453 +   /* load tree macros */
15454 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15455 +   %include temp;
15456 +   filename temp;
15458 +   /* data sets */
15459 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15460 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15461 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15463 +   /* files */
15464 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15466 +   /* check actual num of target levels */
15467 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15468 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15469 +                              nLevel=_nTargetLevel );
15470 +      %if &_nTargetLevel  > 2 %then %do;
15471 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15472 +        %put &em_codebar;
15473 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15474 +        %put &errormsg;
15475 +        %put &em_codebar;
15476 +        %goto doendm;
15477 +      %end;
15478 +   %end;
15480 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15481 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15482 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15483 +        %let costflag=0;
15484 +        data _null_;
15485 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15486 +          if eof then call symput("costflag", _N_);
15487 +        run;
15488 +        %if &costflag gt 0 %then %do;
15489 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15490 +          %put &em_codebar;
15491 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15492 +          %put &errormsg;
15493 +          %put &em_codebar;
15494 +          %goto doendm;
15495 +       %end;
15496 +     %end;
15497 +   %end;
15499 +   /* determine if multiple targets will be processed */
15500 +   %let em_tree_multipleTargets=N;
15501 +   %let em_tree_numTarget = 1;
15502 +   %let em_tree_targetVars=;
15504 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15505 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15506 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15507 +         %let em_tree_multipleTargets=N;
15508 +      %end;
15509 +      %else %do;
15510 +         /* create macro array of targets  */
15511 +         data _null_;
15512 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15513 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15514 +           if eof then
15515 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15516 +        run;
15518 +        %if &em_tree_numTarget gt 1 %then %do;
15519 +           %let em_tree_multipleTargets=Y;
15520 +        %end;
15521 +      %end;
15522 +   %end;
15524 +   /* create view of only necessary variable for performance reasons */
15525 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15526 +   data &tempData / view=&tempData;
15527 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15528 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15529 +       %EM_TARGET
15530 +     %end;
15531 +     %else %do;
15532 +       %if &em_tree_numTarget ne 0 %then %do;
15533 +         %do i=1 %to &em_tree_numTarget;
15534 +            &&em_tree_targetVars&i
15535 +         %end;
15536 +       %end;
15537 +     %end;
15538 +     );
15539 +   run;
15541 +   /* run Tree procedure */
15542 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15544 +   /* Check return code and throw exception if error is detected */
15545 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15546 +   %if &syserr %then %do;
15547 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15548 +     %goto doendm;
15549 +   %end;
15551 +   /* add decision score code if multiple targets are processed */
15552 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15553 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15554 +   %end;
15556 +   /* create outfit dataset if multiple score statements have been executed */
15557 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15559 +   /* create English Rules */
15560 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15561 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15562 +       %em_tree_makeEnglishRules;
15564 +       /* English Rules */
15565 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15567 +     %end;
15568 +   filename x;
15570 +   %doendm:
15571 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15572 +%macro EM_SetProperties;
15574 +   /* train properties */
15575 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15576 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15577 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15578 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15579 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15580 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15581 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15582 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15583 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15584 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15585 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15587 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15588 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15589 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15617 +   /* properties for interactive sample */
15618 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15623 +   /* report properties */
15624 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15638 +   /* score properties */
15639 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15642 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15644 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15645 +  %global &nLevel;
15646 +  proc dmdb batch data=&indata
15647 +    classout=_tmp_dmdbout;
15648 +    class &target;
15649 +  run;
15650 +  data _tmp_dmdbout;
15651 +    set _tmp_dmdbout;
15652 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15653 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15654 +  run;
15655 +  data _null_;
15656 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15657 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15658 +    %let dsid = %sysfunc(close(&dsid));
15659 +     call symput("&nLevel", put(&_obs, Best12.));
15660 +  run;
15662 +  proc datasets lib=work nolist;
15663 +     delete _tmp_dmdbout;
15664 +  run;
15665 +  quit;
15666 +%Mend EM_CheckBinaryTargetLevel;
15669 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15671 +  /* determine the number of obs in training data */
15672 +  proc sql;
15673 +    reset noprint;
15674 +    select count(*) into :em_nobs from &indata;
15675 +  quit;
15677 +  /* determine the number of input variables */
15678 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15679 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15681 +  /* retrieve targetEvent from decmeta */
15682 +  %let targetEvent=;
15683 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15684 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15685 +      data _null_;
15686 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15687 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15688 +      run;
15689 +    %end;
15690 +  %end;
15692 +  /* create targetTable if multipleTar eq Y */
15693 +  data temptarget;
15694 +    set &EM_DATA_VARIABLESET;
15695 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15696 +  run;
15698 + /* data sets */
15699 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15700 + %EM_GETNAME(key=EMTREE,        type=DATA);
15701 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15702 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15703 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15704 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15705 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15706 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15707 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15708 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15710 + /* files */
15711 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15712 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15714 + /* turn on pmml if requested */
15715 + %let nnpmml=0;
15716 + %if %symexist(EM_PMML) %then %do;
15717 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15718 +       %let nnpmml=1;
15720 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15721 +%end;
15723 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15725 + %if &nnpmml or &numClassTarget %then %do;
15727 +       /* create dmdb needed for pmml generation */
15728 +       %let tree_maxlevel = 512;
15729 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15730 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15731 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15732 +         %end;
15733 +       %end;
15734 +       %if &tree_maxlevel gt 0 %then %do;
15735 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15736 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15737 +       %end;
15739 +       %let targetOrderString =;
15740 +       %let targetString = ;
15741 +       data _null_;
15742 +          length orderString nameString $10000;
15743 +          retain orderString nameString;
15744 +          set &em_data_variableset end=eof;
15745 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15746 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15747 +          %end;
15748 +          %else %do;
15749 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15750 +          %end;          select(order);
15751 +            when('')        order ='DESC';
15752 +            when('FMTASC')  order='ASCFMT';
15753 +            when('FMTDESC') order='DESFMT';
15754 +            otherwise;
15755 +          end;
15756 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15757 +          nameString = trim(nameString)!!' '!!trim(NAME);
15759 +          if eof then do;
15760 +             call symput('targetOrderString', trim(orderString));
15761 +             call symput('targetString', trim(nameString));
15762 +          end;
15763 +       run;
15765 +       %let arborkluge= "work._treeDMDB";
15767 +       proc dmdb batch data=&indata
15768 +       %if &nnpmml %then %do;
15769 +           PMML
15770 +       %end;
15771 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15774 +   %if &nnpmml %then %do;
15775 +        %if "%EM_ID" ne "" %then %do;
15776 +          id %EM_ID;
15777 +        %end;
15778 +        %if &EM_NUM_CLASS gt 0 %then %do;
15779 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15780 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15781 +               &targetOrderString;
15782 +        %end;
15783 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15784 +          var %EM_INTERVAL;
15785 +        %end;
15786 +        target &targetString %EM_INTERVAL_TARGET;
15787 +        %if "%EM_FREQ" ne "" %then %do;
15788 +          freq %EM_FREQ;
15789 +        %end;
15790 +  %end;
15791 +  %else %do;
15792 +      class  &targetOrderString;
15793 +      target &targetString %EM_INTERVAL_TARGET;
15794 +  %end;
15795 +       run;
15796 +       quit;
15798 +       proc datasets lib=work nolist;
15799 +          delete classout varout;
15800 +       run;
15801 +       quit;
15803 +    %end;
15804 + %end;
15806 + /* run Arbor procedure */
15807 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15808 +  proc arbor data=&INDATA
15810 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15811 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15812 +  %end;
15814 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15815 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15816 +  %end;
15818 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15819 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15820 +  %end;
15822 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15823 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15824 +  %end;
15826 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15827 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15828 +  %end;
15830 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15831 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15832 +  %end;
15833 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15834 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15835 +  %end;
15836 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15837 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15838 +  %end;
15840 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15841 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15842 +      alpha = &EM_PROPERTY_SIGLEVEL
15843 +    %end;
15844 +  %end;
15846 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15847 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15848 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15849 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15850 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15852 +        padjust =
15853 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15854 +          &chaid
15855 +        %end;
15856 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15857 +          DEPTH
15858 +        %end;
15859 +      %end;
15860 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15861 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15862 +         pvars = &num_inputs
15863 +      %end;
15864 +    %end;
15865 +  %end;
15866 +  %else %do;
15867 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15868 +         padjust = NONE
15869 +      %end;
15870 +  %end;
15872 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15873 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15874 +    Maxrules = &num_nrules
15875 +  %end;
15877 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15878 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15879 +    Maxsurrs = &num_nsurrs
15880 +  %end;
15882 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15883 +     Missing=&EM_PROPERTY_MISSINGVALUE
15884 +  %end;
15886 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15887 +     USEVARONCE
15888 +  %end;
15890 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15891 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15892 +  %end;
15895 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15896 +    event = "&targetEvent"
15897 +  %end;
15899 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15900 +     DECSEARCH
15901 +  %end;
15903 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15904 +     PRIORSSEARCH
15905 +  %end;
15907 +  %if &arbor_1 ne %then %do;
15908 +    &arbor_1
15909 +  %end;
15911 +  %if &em_arbor ne %then %do;
15912 +     &em_arbor
15913 +  %end;
15914 +  ;
15915 + %end;
15916 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15917 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15918 +       interact;
15919 + %end;
15920 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15921 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15922 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15923 +    %put &em_codebar;
15924 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15925 +    %put &errormsg;
15926 +    %put &em_codebar;
15927 +    %goto doendm;
15928 +   %end;
15929 +   %else %do;
15930 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15931 +       interact;
15932 +   %end;
15933 + %end;
15935 + %else %do;
15936 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15937 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15938 +    %put &em_codebar;
15939 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15940 +    %put &errormsg;
15941 +    %put &em_codebar;
15942 +    %goto doendm;
15943 +   %end;
15944 +   %else %do;
15945 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15946 +        interact;
15947 +   %end;
15948 + %end;
15950 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15951 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15952 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15953 +    %end;
15955 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15956 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15957 +    %end;
15959 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15960 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15961 +    %end;
15963 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15964 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15965 +    %end;
15967 +    %if "%EM_FREQ" ne "" %then %do;
15968 +       freq %EM_FREQ;
15969 +    %end;
15971 +    %if "&multipleTar" eq "Y" %then %do;
15972 +       /* cycle through all target vars in variableset */
15973 +       %let tdsid = %sysfunc(open(temptarget));
15974 +       %if &tdsid %then %do;
15975 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15976 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15977 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15978 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15979 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15980 +             target &var / level = &lvl
15981 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15982 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15983 +             %end;
15984 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15985 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15986 +             %end;
15987 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15988 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15989 +             %end;
15990 +          %end;
15991 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
15992 +       %end;
15993 +       useTarget variable = %EM_TARGET;
15994 +    %end;
15995 +    %else %do;
15996 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
15997 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
15998 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
15999 +      %end;
16000 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16001 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16002 +      %end;
16003 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16004 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16005 +      %end;
16006 +    %end;
16008 +    %if "&multipleTar" eq "N" %then %do;
16009 +      &EM_DEC_STATEMENT;
16010 +    %end;
16012 +    Performance &EM_PROPERTY_PERFORMANCE
16013 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16014 +      nodesize=&EM_PROPERTY_NODESAMPLE
16015 +    %end;
16016 +    ;
16018 +    %if "&intFlag" eq "Y" %then %do;
16019 +       INTERACT Largest;
16020 +       Train maxnewdepth=0;
16021 +    %end;
16023 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16024 +         Assess
16025 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16026 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16027 +              %put &em_codebar;
16028 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16029 +              %put &errormsg;
16030 +              %put &em_codebar;
16031 +            %end;
16032 +            %else %do;
16033 +               Validata=&EM_IMPORT_VALIDATE
16034 +            %end;
16035 +         %end;
16036 +         %else %do;
16037 +           NoValidata
16038 +         %end;
16039 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16040 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16041 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16042 +               %if &dsid %then %do;
16043 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16044 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16045 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16046 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16047 +                   %else %do;
16048 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16049 +                      %else %let measure= MISC;
16050 +                   %end;
16051 +                 %end;
16052 +               %end;
16053 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16054 +            %end;
16055 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16056 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16057 +                 %let measure=ASE;
16058 +              %end;
16059 +              %else %do;
16060 +                 %let measure=MISC;
16061 +              %end;
16062 +            %end;
16063 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16064 +              %let measure=ASE;
16065 +            %end;
16066 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16067 +               %let measure = LIFT;
16068 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16069 +               %if &dsid %then %do;
16070 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16071 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16072 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16073 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16074 +                 %end;
16075 +               %end;
16076 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16077 +            %end;
16078 +            measure=&measure
16079 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16080 +               event = "&targetEvent"
16081 +            %end;
16082 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16083 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16084 +            %end;
16085 +         %end;
16086 +         %if "&multipleTar" eq "N" %then %do;
16087 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16088 +               CV
16089 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16090 +                 CVNITer = &EM_PROPERTY_CVNITER
16091 +               %end;
16092 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16093 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16094 +               %end;
16095 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16096 +                 CVSeed = &EM_PROPERTY_CVSEED
16097 +               %end;
16098 +            %end;
16099 +         %end;
16100 +       %end;
16101 +      ;
16103 +      %if "&intFlag" ne "Y" %then %do;
16104 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16105 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16106 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16107 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16109 +          SUBTREE &subtree
16110 +          %if "&subtree" eq "NLEAVES" %then %do;
16111 +            =&EM_PROPERTY_NSUBTREE
16112 +          %end;
16113 +          ;
16114 +        %end;
16116 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16117 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16118 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16119 +          %end;
16120 +       %end;
16121 +      %end;
16122 + %end;
16125 + MakeMacro nleaves = nleaves;
16126 + save
16127 + %if "&EM_USER_EMTREE" ne "" %then %do;
16128 +   MODEL=&EM_USER_EMTREE
16129 + %end;
16130 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16131 +   SEQUENCE=&EM_USER_OUTSEQ
16132 + %end;
16133 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16134 +   IMPORTANCE=&EM_USER_OUTIMPORT
16135 + %end;
16136 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16137 +   NODESTAT=&EM_USER_OUTNODES
16138 + %end;
16139 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16140 +   SUMMARY=&EM_USER_OUTSUMMARY
16141 + %end;
16142 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16143 +   STATSBYNODE=&EM_USER_OUTSTATS
16144 + %end;
16145 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16146 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16147 + %end;
16148 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16149 +   Pathlistnonmissing=&EM_USER_OUTPATH
16150 + %end;
16151 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16152 +   RULES = &EM_USER_OUTRULES
16153 + %end;
16154 + ;
16156 + %if "&intFlag" ne "Y" %then %do;
16158 +   %let lookupString = ;
16159 +   %if ^%symexist(EM_OPTION) %then
16160 +      %let EM_OPTION=;
16162 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16163 +      %let lookupString = LOOKUP=SELECT;
16164 +   %end;
16166 +   %let codetext=;
16167 +   %let norescodetxt=;
16169 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16170 +     %let codetext=&codetext DUMMY;
16171 +     %let norescodetxt=&norescodetxt DUMMY;
16172 +   %end;
16173 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16174 +     %let codetext=&codetext NOLEAFID;
16175 +     %let norescodetxt=&norescodetxt NOLEAFID;
16176 +   %end;
16177 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16178 +     %let norescodetxt=&norescodetxt NOPRED;
16179 +   %end;
16181 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16182 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16184 +   %if &nnpmml %then %do;
16185 +     code pmml;
16186 +   %end;
16188 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16189 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16190 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16191 +   %end;
16192 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16193 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16194 +   %end;
16195 + %end;
16197 + run;
16198 + quit;
16200 + /*%em_checkerror(); */
16201 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16202 +   /* Delete DMDB catalog */
16203 +   proc datasets lib=work nolist;
16204 +       delete _treeDMDB / mt=cat;
16205 +  run;
16206 +  %end;
16208 + %if &nnpmml %then %do;
16209 +    ods pmml close;
16210 + %end;
16212 +  %doendm:
16214 +%mend em_tree_runTreeProcedure;
16216 +%macro em_tree_createFitStats( multipleTar= );
16219 +  /* create targetTable is multipleTar eq Y */
16220 +  data temptarget;
16221 +    set &EM_DATA_VARIABLESET;
16222 +    where ROLE="TARGET";
16223 +  run;
16225 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16226 +   data &EM_USER_EMOUTFIT;
16227 +     length target $32;
16228 +     merge work.fit_train
16229 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16230 +       work.fit_valid
16231 +     %end;
16232 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16233 +       work.fit_test
16234 +     %end;
16235 +     ;
16236 +     %if "&multipleTar" eq "N" %then %do;
16237 +       target="%EM_TARGET";
16238 +     %end;
16239 +     %else %do;
16240 +       target = _TARGET_;
16241 +     %end;
16242 +     drop _NW_ _SUMW_
16243 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16244 +        _VSUMW_
16245 +     %end;
16246 +     ;
16247 +   run;
16249 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16250 +     proc datasets library=work nolist;
16251 +       delete fit_valid;
16252 +     run;
16253 +   %end;
16254 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16255 +     proc datasets library=work nolist;
16256 +       delete fit_test;
16257 +     run;
16258 +   %end;
16260 +%mend em_tree_createFitStats;
16263 +%macro em_tree_makeEnglishRules;
16265 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16266 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16268 +  /* verify that necessary tables exist and if not, skip processing */
16269 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16270 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16271 +    %goto doendm;
16272 +  %end;
16273 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16274 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16275 +    %goto doendm;
16276 +  %end;
16278 +  /* determine length of variable in outpath dataset */
16279 +  %let vlength= ;
16280 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16281 +  %if &dsid ne %then %do;
16282 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16283 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16284 +  %end;
16285 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16287 +  data tempoutpath;
16288 +    length varname $&vlength;
16289 +    retain varname;
16290 +    set &EM_USER_OUTPATH;
16292 +    if ^missing(variable) then varname=variable;
16293 +    else if ^missing(var_name) then varname=var_name;
16294 +    output;
16295 +  run;
16297 +  /* create an array of generated predicted variable names */
16298 +  %let tree_pred_vars = ;
16299 +  %let tree_pred_label = ;
16300 +  %let numpred= 0;
16301 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16303 +    data _null_;
16304 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16305 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16306 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16307 +     if eof then
16308 +       call symput('numpred', strip(put(_N_, BEST.)));
16309 +    run;
16310 +  %end;
16312 +  /* determine if NPRIORS exists in outnodes  */
16313 +  %local nprior_flag;
16314 +  data _null_;
16315 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16316 +    if eof then do;
16317 +      call symput('nprior_flag', strip(put(npriors, best.)));
16318 +    end;
16319 +  run;
16321 +  proc sort data=tempoutpath; by node; run;
16322 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16324 +  data tempoutpath;
16325 +    merge tempoutpath(in=_a) outnodes(keep= node
16326 +    %if "&nprior_flag" ne "." %then %do;
16327 +      NPRIORS
16328 +    %end;
16329 +    %else %do;
16330 +      N
16331 +    %end;
16332 +    %if &numpred gt 0 %then %do;
16333 +      %do i=1 %to &numpred;
16334 +        &&tree_pred_vars&i
16335 +      %end;
16336 +    %end;
16337 +    );
16338 +    by node;
16339 +    if _a;
16340 +  run;
16342 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16344 +  data _null_;
16345 +    file x;
16346 +    set tempoutpath;
16347 +    by node descending varname;
16348 +    retain origvar oldnode string;
16349 +    length origvar $32 oldnode 8 string $200;
16351 +    if _N_ = 1 then do;
16352 +      origvar = varname;
16353 +      oldnode = node;
16354 +    end;
16356 +    if first.node then do;
16357 +       put "&EM_CODEBAR";
16358 +       put " Node = " node;
16359 +       put "&EM_CODEBAR";
16360 +    end;
16362 +      if first.varname then do;
16363 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16364 +            if MISSING(CHARACTER_VALUE) then do;
16365 +             if NUMERIC_VALUE ne .  then do;
16366 +              if ^first.node then do;
16367 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16368 +              end;
16369 +              else do;
16370 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16371 +              end;
16372 +             end;
16373 +            end;
16374 +            else do;
16375 +              if ^first.node then do;
16376 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16377 +              end;
16378 +              else do;
16379 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16380 +              end;
16381 +             end;
16382 +         end;
16383 +         else if RELATION in ("=") then do;
16384 +            if ^first.node then do;
16385 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16386 +            end;
16387 +            else do;
16388 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16389 +            end;
16390 +         end;
16391 +         else if RELATION in ("ISMISSING") then do;
16392 +            if ^first.node then do;
16393 +              string = " AND "|| strip(varname) || " equals Missing";
16394 +            end;
16395 +            else do;
16396 +              string = "if "|| strip(varname) ||" equals Missing";
16397 +            end;
16398 +         end;
16399 +         else if RELATION in ("ISNOTMISSING") then do;
16400 +            if ^first.node then do;
16401 +              string = " AND "|| strip(varname) || " equals All Values";
16402 +            end;
16403 +            else do;
16404 +              string = "if "|| strip(varname) ||" equals All Values";
16405 +            end;
16406 +         end;
16407 +         if ^missing(varname) then origvar = varname;
16408 +         oldnode=node;
16410 +      end;
16411 +      else do;
16412 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16413 +          if MISSING(CHARACTER_VALUE) then do;
16414 +           if  NUMERIC_VALUE ne .  then do;
16415 +            if ^MISSING(string) then
16416 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16417 +            else
16418 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16419 +           end;
16420 +          end;
16421 +          else do;
16422 +            if ^MISSING(string) then
16423 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16424 +            else
16425 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16426 +          end;
16428 +         end;
16429 +         else if RELATION in ("=") then do;
16430 +           string = strip(string)||", "||strip(character_value);
16431 +         end;
16432 +         else if RELATION in ("ISMISSING") then do;
16434 +         end;
16435 +         if ^missing(varname) then origvar = varname;
16436 +         oldnode=node;
16437 +      end;
16438 +      if last.varname then do;
16439 +         if RELATION in ("ISMISSING") then do;
16440 +           if ^first.varname then do;
16441 +             string = strip(string) || " or MISSING";
16442 +           end;
16443 +         end;
16444 +         put string;
16445 +         if ^missing(varname) then origvar = varname;
16446 +         oldnode=node;
16447 +      end;
16449 +      if last.node then do;
16450 +         put "then ";
16451 +         put " Tree Node Identifier   = " node;
16453 +         %if "&nprior_flag" ne "." %then %do;
16454 +           put " Number of Observations = " NPRIORS;
16455 +         %end;
16456 +         %else %do;
16457 +           put " Number of Observations = " N;
16458 +         %end;
16460 +         %if &numpred gt 0 %then %do;
16461 +           %do i=1 %to &numpred;
16462 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16463 +           %end;
16464 +         %end;
16466 +         put " ";
16467 +         if ^missing(varname) then origvar = varname;
16468 +         oldnode=node;
16469 +      end;
16471 +  run;
16473 +  proc datasets lib=work nolist;
16474 +    delete tempoutpath outnodes;
16475 +  run;
16477 +  %doendm:
16478 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 8889   Memory used = 511K.
NOTE: There were 8889 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE3.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 8889 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 8889   Memory used = 511K.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
NOTE: There were 8889 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 8889 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596892 kilobytes of physical memory.
NOTE: Will use 8889 out of 8889 training cases.
NOTE: Using memory pool with 159328256 bytes.
NOTE: Passed training data 9 times.
NOTE: Training used 2285560 bytes of work memory.
NOTE: The subtree sequence contains 32 subtrees. The largest has 53 nodes and 35 leaves.
NOTE: Using subtree with 28 nodes and 20 leaves.
NOTE: Using subtree with 28 nodes and 20 leaves.
NOTE: Created macro variable NLEAVES equal to 20.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_EMTREE has 1121 observations and 4 variables.
NOTE: The data set EMWS1.TREE3_OUTNODES has 28 observations and 24 variables.
NOTE: The data set EMWS1.TREE3_OUTPATH has 102 observations and 7 variables.
NOTE: The data set EMWS1.TREE3_OUTRULES has 225 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 32 observations and 20 variables.
NOTE: The data set EMWS1.TREE3_OUTSTATS has 196 observations and 5 variables.
NOTE: The data set EMWS1.TREE3_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTTOPOLOGY has 28 observations and 5 variables.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\TREEFLOW.sas opened.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 8889 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
 
 
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.49 seconds
      cpu time            0.46 seconds
 
NOTE: There were 8889 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 8889 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.49 seconds
      cpu time            0.46 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 102 observations read from the data set EMWS1.TREE3_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 102 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 102 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 102 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.OUTNODES has 28 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 102 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 28 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 102 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 102 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 102 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=18Mar2016:19:38:14,
      Create Time=18Mar2016:19:38:14
 
NOTE: 228 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 102 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16480
16481  *------------------------------------------------------------*;
16482  * End TRAIN: Tree3;
16483  *------------------------------------------------------------*;
 
16484  *------------------------------------------------------------*;
16485  * Close any missing semi colons;
16486  *------------------------------------------------------------*;
16487  ;
16488  ;
16489  ;
16490  ;
16491  quit;
16492  *------------------------------------------------------------*;
16493  * Close any unbalanced quotes;
16494  *------------------------------------------------------------*;
16495  /*; *"; *'; */
16496  ;
16497  run;
16498  quit;
16499  /* Reset EM Options */
16500  options formchar="|----|+|---+=|-/\<>*";
16501  options nocenter ls=256 ps=10000;
16502  goptions reset=all device=GIF NODISPLAY;
 
16503  proc sort data=WORK.EM_USER_REPORT;
16504  by ID VIEW;
16505  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                March 18, 2016
Time:                19:38:15
*------------------------------------------------------------*
16607  %let EMEXCEPTIONSTRING=;
16608  *------------------------------------------------------------*;
16609  * SCORE: Tree3;
16610  *------------------------------------------------------------*;
16611  %let EM_ACTION = SCORE;
16612  %let syscc = 0;
16613  %macro main;
16614
16615    %if %upcase(&EM_ACTION) = CREATE %then %do;
16616      filename temp catalog 'sashelp.emmodl.tree_create.source';
16617      %include temp;
16618      filename temp;
16619
16620      %em_tree_create;
16621    %end;
16622
16623     %else
16624     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16625
16626         filename temp catalog 'sashelp.emmodl.tree_train.source';
16627         %include temp;
16628         filename temp;
16629         %em_tree_train;
16630     %end;
16631
16632    %else
16633    %if %upcase(&EM_ACTION) = SCORE %then %do;
16634      filename temp catalog 'sashelp.emmodl.tree_score.source';
16635      %include temp;
16636      filename temp;
16637
16638      %em_tree_score;
16639
16640    %end;
16641
16642    %else
16643    %if %upcase(&EM_ACTION) = REPORT %then %do;
16644
16645         filename temp catalog 'sashelp.emmodl.tree_report.source';
16646         %include temp;
16647         filename temp;
16648
16649         %em_tree_report;
16650     %end;
16651
16652    %else
16653    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16654
16655         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16656         %include temp;
16657         filename temp;
16658         %EM_TREE_OPENTREEVIEWER;
16659
16660     %end;
16661
16662    %else
16663    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16664
16665         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16666         %include temp;
16667         filename temp;
16668         %EM_TREE_CLOSETREEVIEWER;
16669
16670     %end;
16671
16672
16673     %doendm:
16674  %mend main;
16675
16676  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16678 +%macro em_tree_score;
16680 +   /* determine if multiple targets will be processed */
16681 +   %let em_tree_multipleTargets=N;
16682 +   %let em_tree_numTarget=1;
16683 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16684 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16685 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16686 +         %let em_tree_multipleTargets=N;
16687 +      %end;
16688 +      %else %do;
16689 +         /* create macro array of targets  */
16690 +         data _null_;
16691 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16692 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16693 +           if eof then
16694 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16695 +        run;
16697 +        %if &em_tree_numTarget gt 1 %then %do;
16698 +           %let em_tree_multipleTargets=Y;
16699 +        %end;
16700 +      %end;
16701 +   %end;
16703 +   /* build flow and publish scoring code */
16704 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16705 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16707 +   filename treeflow "&EM_USER_TREEFLOW";
16708 +   filename treepub "&EM_USER_TREEPUBLISH";
16710 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16711 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16713 +   %em_copyfile(infref=treeflow, outfref=flowref);
16714 +   %em_copyfile(infref=treepub, outfref=pubref);
16716 +   filename treeflow;
16717 +   filename treepub;
16719 +   /* if priors are used, add code to generate unadjusted residuals in export */
16720 +   %let useAdjPriors = N;
16721 +   data _null_;
16722 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16723 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16724 +   run;
16725 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16726 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16727 +      %include temp;
16728 +      filename temp;
16730 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16731 +      filename adjref "&EM_USER_adjResidualCode";
16732 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16734 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16736 +      filename adjref;
16737 +   %end;
16739 +   /* LEAF */
16740 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16741 +      data _null_;
16742 +        file flowref mod;
16743 +        put 'drop _LEAF_;';
16744 +      run;
16746 +      data _null_;
16747 +        file pubref mod;
16748 +        put 'drop _LEAF_;';
16749 +      run;
16751 +   %end;
16753 +   filename flowref;
16754 +   filename pubref;
16756 +   /* em_metachange code */
16757 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16758 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16759 +   %end;
16761 +   /* variable selection based on importance stat    */
16762 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16763 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16764 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16765 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16766 +     %let obs = %sysfunc(fetch(&dsid));
16767 +     %do %while(&obs=0);
16768 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16769 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16770 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16771 +       %let obs = %sysfunc(fetch(&dsid));
16772 +     %end;
16773 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16774 +   %end;
16776 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16777 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16778 +    %let tree_pred_vars = ;
16779 +    %let tree_pred_lvl =;
16780 +    %let numpred= 0;
16782 +    data _null_;
16783 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16784 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16785 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16786 +     if eof then
16787 +       call symput('numpred', strip(put(_N_, BEST.)));
16788 +    run;
16789 +   %end;
16791 +   %if &numpred ne 0 %then %do;
16792 +    %do i=1 %to &numpred;
16793 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16794 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16795 +    %end;
16796 +   %end;
16798 +   /* determine if multiple targets will be processed */
16799 +   %let em_tree_multipleTargets=N;
16800 +   %let em_tree_numTarget=1;
16801 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16802 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16803 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16804 +         %let em_tree_multipleTargets=N;
16805 +      %end;
16806 +      %else %do;
16807 +        data _null_;
16808 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16809 +          if eof then
16810 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16811 +        run;
16813 +        %if &em_tree_numTarget gt 1 %then %do;
16814 +           %let em_tree_multipleTargets=Y;
16815 +        %end;
16816 +     %end;
16817 +   %end;
16819 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16820 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16822 +      /* variable importance */
16823 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16824 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16826 +         %let validexist=0;
16827 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16828 +           %let validexist=1;
16829 +         %end;
16831 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16832 +         /* and the columns may not be generated                                                                                 */
16833 +         %let em_tree_cvexists=;
16834 +         %let em_tree_surrexists=.;
16835 +         data _null_;
16836 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16837 +            if eof then do ;
16838 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16839 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16840 +            end;
16841 +         run;
16843 +         data &EM_USER_OUTIMPORT;
16844 +            set &EM_USER_OUTIMPORT;
16846 +            /* format columns based on Precison value specified */
16847 +            format importance 15.&EM_PROPERTY_PRECISION
16848 +                 %if &validexist %then %do;
16849 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16850 +                 %end;
16851 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16852 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16853 +                 %end;
16854 +            ;
16855 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16856 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16857 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16858 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16859 +                 %if "&em_tree_surrexists" ne "" %then %do;
16860 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16861 +                 %end;
16862 +                 %if &validexist %then %do;
16863 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16864 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16865 +                 %end;
16866 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16867 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16868 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16869 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16870 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16871 +                 %end;
16872 +            ;
16873 +         run;
16875 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16876 +      %end;
16877 +   %end;
16879 +   %doendm:
16880 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=18Mar2016:19:38:14,
      Create Time=18Mar2016:19:36:46
 
NOTE: 336 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=18Mar2016:19:38:14,
      Create Time=18Mar2016:19:36:46
 
NOTE: 314 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12372,
      Last Modified=18Mar2016:19:38:14,
      Create Time=18Mar2016:19:36:46
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11699,
      Last Modified=18Mar2016:19:38:14,
      Create Time=18Mar2016:19:36:46
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
16881
16882  *------------------------------------------------------------*;
16883  * End SCORE: Tree3;
16884  *------------------------------------------------------------*;
 
16885  proc sort data=WORK.EM_METACHANGE;
16886  by key uname;
16887  run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16888  filename x "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas";
16889  data _null_;
16890  file x;
16891  put 'if upcase(NAME) = "DEMCLUSTERGROUP" then do;';
16892  put 'ROLE = "REJECTED";';
16893  put 'end;';
16894  put 'else ';
16895  put 'if upcase(NAME) = "DEMREG" then do;';
16896  put 'ROLE = "REJECTED";';
16897  put 'end;';
16898  put 'else ';
16899  put 'if upcase(NAME) = "DEMTVREG" then do;';
16900  put 'ROLE = "REJECTED";';
16901  put 'end;';
16902  put 'else ';
16903  put 'if upcase(NAME) = "PROMCLASS" then do;';
16904  put 'ROLE = "REJECTED";';
16905  put 'end;';
16906  put 'else ';
16907  put 'if upcase(NAME) = "PROMSPEND" then do;';
16908  put 'ROLE = "REJECTED";';
16909  put 'end;';
16910  put 'else ';
16911  put 'if upcase(NAME) = "PROMTIME" then do;';
16912  put 'ROLE = "REJECTED";';
16913  put 'end;';
16914  put 'else ';
16915  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
16916  put 'ROLE = "ASSESS";';
16917  put 'end;';
16918  put 'else ';
16919  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
16920  put 'ROLE = "ASSESS";';
16921  put 'end;';
16922  put 'else ';
16923  put 'if upcase(NAME) = "_NODE_" then do;';
16924  put 'ROLE = "SEGMENT";';
16925  put 'LEVEL = "NOMINAL";';
16926  put 'end;';
16927  run;
 
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=18Mar2016:19:38:15,
      Create Time=18Mar2016:19:36:46
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16928  filename x;
NOTE: Fileref X has been deassigned.
 
16929  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
16930  *------------------------------------------------------------*;
16931  * Tree3: Scoring DATA data;
16932  *------------------------------------------------------------*;
16933  data EMWS1.Tree3_TRAIN
16934  / view=EMWS1.Tree3_TRAIN
16935  ;
16936  set EMWS1.Part_TRAIN
16937  ;
16938  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
16939 +****************************************************************;
16940 +******             DECISION TREE SCORING CODE             ******;
16941 +****************************************************************;
16942 +
16943 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16944 +LENGTH F_TargetBuy  $   12;
16945 +LENGTH I_TargetBuy  $   12;
16946 +LENGTH _WARN_  $    4;
16947 +
16948 +******              LABELS FOR NEW VARIABLES              ******;
16949 +label _NODE_ = 'Node' ;
16950 +label _LEAF_ = 'Leaf' ;
16951 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
16952 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
16953 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
16954 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
16955 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
16956 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
16957 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
16958 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
16959 +label F_TargetBuy = 'From: TargetBuy' ;
16960 +label I_TargetBuy = 'Into: TargetBuy' ;
16961 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
16962 +label _WARN_ = 'Warnings' ;
16963 +
16964 +
16965 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16966 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
16967 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
16968 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
16969 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
16970 +
16971 +
16972 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
16973 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
16974 +
16975 +******             ASSIGN OBSERVATION TO NODE             ******;
16976 +IF  NOT MISSING(DemAge ) AND
16977 +  DemAge  <                 39.5 THEN DO;
16978 +  IF  NOT MISSING(DemAffl ) AND
16979 +    DemAffl  <                  6.5 THEN DO;
16980 +    _NODE_  =                    6;
16981 +    _LEAF_  =                    1;
16982 +    P_TargetBuy0  =      0.6593886462882;
16983 +    P_TargetBuy1  =     0.34061135371179;
16984 +    Q_TargetBuy0  =      0.6593886462882;
16985 +    Q_TargetBuy1  =     0.34061135371179;
16986 +    V_TargetBuy0  =     0.66009852216748;
16987 +    V_TargetBuy1  =     0.33990147783251;
16988 +    I_TargetBuy  = '0' ;
16989 +    U_TargetBuy  =                    0;
16990 +    END;
16991 +  ELSE IF  NOT MISSING(DemAffl ) AND
16992 +                     6.5 <= DemAffl  AND
16993 +    DemAffl  <                  9.5 THEN DO;
16994 +    _ARBFMT_1 = PUT( DemGender , $1.);
16995 +     %DMNORMIP( _ARBFMT_1);
16996 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
16997 +      _NODE_  =                   21;
16998 +      _LEAF_  =                    2;
16999 +      P_TargetBuy0  =     0.38405797101449;
17000 +      P_TargetBuy1  =      0.6159420289855;
17001 +      Q_TargetBuy0  =     0.38405797101449;
17002 +      Q_TargetBuy1  =      0.6159420289855;
17003 +      V_TargetBuy0  =     0.41121495327102;
17004 +      V_TargetBuy1  =     0.58878504672897;
17005 +      I_TargetBuy  = '1' ;
17006 +      U_TargetBuy  =                    1;
17007 +      END;
17008 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17009 +      _NODE_  =                   22;
17010 +      _LEAF_  =                    3;
17011 +      P_TargetBuy0  =     0.58878504672897;
17012 +      P_TargetBuy1  =     0.41121495327102;
17013 +      Q_TargetBuy0  =     0.58878504672897;
17014 +      Q_TargetBuy1  =     0.41121495327102;
17015 +      V_TargetBuy0  =     0.59210526315789;
17016 +      V_TargetBuy1  =      0.4078947368421;
17017 +      I_TargetBuy  = '0' ;
17018 +      U_TargetBuy  =                    0;
17019 +      END;
17020 +    ELSE DO;
17021 +      _NODE_  =                   23;
17022 +      _LEAF_  =                    4;
17023 +      P_TargetBuy0  =     0.81395348837209;
17024 +      P_TargetBuy1  =      0.1860465116279;
17025 +      Q_TargetBuy0  =     0.81395348837209;
17026 +      Q_TargetBuy1  =      0.1860465116279;
17027 +      V_TargetBuy0  =     0.88679245283018;
17028 +      V_TargetBuy1  =     0.11320754716981;
17029 +      I_TargetBuy  = '0' ;
17030 +      U_TargetBuy  =                    0;
17031 +      END;
17032 +    END;
17033 +  ELSE IF  NOT MISSING(DemAffl ) AND
17034 +                    14.5 <= DemAffl  THEN DO;
17035 +    _NODE_  =                    9;
17036 +    _LEAF_  =                    8;
17037 +    P_TargetBuy0  =     0.06521739130434;
17038 +    P_TargetBuy1  =     0.93478260869565;
17039 +    Q_TargetBuy0  =     0.06521739130434;
17040 +    Q_TargetBuy1  =     0.93478260869565;
17041 +    V_TargetBuy0  =     0.03597122302158;
17042 +    V_TargetBuy1  =     0.96402877697841;
17043 +    I_TargetBuy  = '1' ;
17044 +    U_TargetBuy  =                    1;
17045 +    END;
17046 +  ELSE DO;
17047 +    _ARBFMT_1 = PUT( DemGender , $1.);
17048 +     %DMNORMIP( _ARBFMT_1);
17049 +    IF _ARBFMT_1 IN ('M' ) THEN DO;
17050 +      _NODE_  =                   25;
17051 +      _LEAF_  =                    6;
17052 +      P_TargetBuy0  =     0.41666666666666;
17053 +      P_TargetBuy1  =     0.58333333333333;
17054 +      Q_TargetBuy0  =     0.41666666666666;
17055 +      Q_TargetBuy1  =     0.58333333333333;
17056 +      V_TargetBuy0  =     0.55813953488372;
17057 +      V_TargetBuy1  =     0.44186046511627;
17058 +      I_TargetBuy  = '1' ;
17059 +      U_TargetBuy  =                    1;
17060 +      END;
17061 +    ELSE IF _ARBFMT_1 IN ('F' ) THEN DO;
17062 +      _NODE_  =                   26;
17063 +      _LEAF_  =                    7;
17064 +      P_TargetBuy0  =     0.21629213483146;
17065 +      P_TargetBuy1  =     0.78370786516853;
17066 +      Q_TargetBuy0  =     0.21629213483146;
17067 +      Q_TargetBuy1  =     0.78370786516853;
17068 +      V_TargetBuy0  =     0.19636363636363;
17069 +      V_TargetBuy1  =     0.80363636363636;
17070 +      I_TargetBuy  = '1' ;
17071 +      U_TargetBuy  =                    1;
17072 +      END;
17073 +    ELSE DO;
17074 +      _NODE_  =                   24;
17075 +      _LEAF_  =                    5;
17076 +      P_TargetBuy0  =     0.61224489795918;
17077 +      P_TargetBuy1  =     0.38775510204081;
17078 +      Q_TargetBuy0  =     0.61224489795918;
17079 +      Q_TargetBuy1  =     0.38775510204081;
17080 +      V_TargetBuy0  =     0.57894736842105;
17081 +      V_TargetBuy1  =     0.42105263157894;
17082 +      I_TargetBuy  = '0' ;
17083 +      U_TargetBuy  =                    0;
17084 +      END;
17085 +    END;
17086 +  END;
17087 +ELSE IF  NOT MISSING(DemAge ) AND
17088 +                  39.5 <= DemAge  AND
17089 +  DemAge  <                 44.5 THEN DO;
17090 +  IF  NOT MISSING(DemAffl ) AND
17091 +    DemAffl  <                  6.5 THEN DO;
17092 +    _NODE_  =                   10;
17093 +    _LEAF_  =                    9;
17094 +    P_TargetBuy0  =     0.80346820809248;
17095 +    P_TargetBuy1  =     0.19653179190751;
17096 +    Q_TargetBuy0  =     0.80346820809248;
17097 +    Q_TargetBuy1  =     0.19653179190751;
17098 +    V_TargetBuy0  =     0.78030303030303;
17099 +    V_TargetBuy1  =     0.21969696969696;
17100 +    I_TargetBuy  = '0' ;
17101 +    U_TargetBuy  =                    0;
17102 +    END;
17103 +  ELSE IF  NOT MISSING(DemAffl ) AND
17104 +                     6.5 <= DemAffl  AND
17105 +    DemAffl  <                  9.5 THEN DO;
17106 +    _NODE_  =                   11;
17107 +    _LEAF_  =                   10;
17108 +    P_TargetBuy0  =     0.67537313432835;
17109 +    P_TargetBuy1  =     0.32462686567164;
17110 +    Q_TargetBuy0  =     0.67537313432835;
17111 +    Q_TargetBuy1  =     0.32462686567164;
17112 +    V_TargetBuy0  =     0.68556701030927;
17113 +    V_TargetBuy1  =     0.31443298969072;
17114 +    I_TargetBuy  = '0' ;
17115 +    U_TargetBuy  =                    0;
17116 +    END;
17117 +  ELSE IF  NOT MISSING(DemAffl ) AND
17118 +                    11.5 <= DemAffl  THEN DO;
17119 +    _NODE_  =                   13;
17120 +    _LEAF_  =                   13;
17121 +    P_TargetBuy0  =     0.29050279329608;
17122 +    P_TargetBuy1  =     0.70949720670391;
17123 +    Q_TargetBuy0  =     0.29050279329608;
17124 +    Q_TargetBuy1  =     0.70949720670391;
17125 +    V_TargetBuy0  =     0.37007874015748;
17126 +    V_TargetBuy1  =     0.62992125984251;
17127 +    I_TargetBuy  = '1' ;
17128 +    U_TargetBuy  =                    1;
17129 +    END;
17130 +  ELSE DO;
17131 +    _ARBFMT_1 = PUT( DemGender , $1.);
17132 +     %DMNORMIP( _ARBFMT_1);
17133 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17134 +      _NODE_  =                   31;
17135 +      _LEAF_  =                   11;
17136 +      P_TargetBuy0  =     0.45762711864406;
17137 +      P_TargetBuy1  =     0.54237288135593;
17138 +      Q_TargetBuy0  =     0.45762711864406;
17139 +      Q_TargetBuy1  =     0.54237288135593;
17140 +      V_TargetBuy0  =     0.33783783783783;
17141 +      V_TargetBuy1  =     0.66216216216216;
17142 +      I_TargetBuy  = '1' ;
17143 +      U_TargetBuy  =                    1;
17144 +      END;
17145 +    ELSE DO;
17146 +      _NODE_  =                   32;
17147 +      _LEAF_  =                   12;
17148 +      P_TargetBuy0  =     0.71428571428571;
17149 +      P_TargetBuy1  =     0.28571428571428;
17150 +      Q_TargetBuy0  =     0.71428571428571;
17151 +      Q_TargetBuy1  =     0.28571428571428;
17152 +      V_TargetBuy0  =     0.68115942028985;
17153 +      V_TargetBuy1  =     0.31884057971014;
17154 +      I_TargetBuy  = '0' ;
17155 +      U_TargetBuy  =                    0;
17156 +      END;
17157 +    END;
17158 +  END;
17159 +ELSE IF  NOT MISSING(DemAge ) AND
17160 +                  44.5 <= DemAge  AND
17161 +  DemAge  <                 76.5 THEN DO;
17162 +  IF  NOT MISSING(DemAffl ) AND
17163 +    DemAffl  <                  8.5 THEN DO;
17164 +    _NODE_  =                   14;
17165 +    _LEAF_  =                   14;
17166 +    P_TargetBuy0  =     0.91972700682482;
17167 +    P_TargetBuy1  =     0.08027299317517;
17168 +    Q_TargetBuy0  =     0.91972700682482;
17169 +    Q_TargetBuy1  =     0.08027299317517;
17170 +    V_TargetBuy0  =     0.93264481365065;
17171 +    V_TargetBuy1  =     0.06735518634934;
17172 +    I_TargetBuy  = '0' ;
17173 +    U_TargetBuy  =                    0;
17174 +    END;
17175 +  ELSE IF  NOT MISSING(DemAffl ) AND
17176 +                    12.5 <= DemAffl  AND
17177 +    DemAffl  <                 16.5 THEN DO;
17178 +    _NODE_  =                   16;
17179 +    _LEAF_  =                   16;
17180 +    P_TargetBuy0  =     0.63956043956043;
17181 +    P_TargetBuy1  =     0.36043956043956;
17182 +    Q_TargetBuy0  =     0.63956043956043;
17183 +    Q_TargetBuy1  =     0.36043956043956;
17184 +    V_TargetBuy0  =     0.63513513513513;
17185 +    V_TargetBuy1  =     0.36486486486486;
17186 +    I_TargetBuy  = '0' ;
17187 +    U_TargetBuy  =                    0;
17188 +    END;
17189 +  ELSE IF  NOT MISSING(DemAffl ) AND
17190 +                    16.5 <= DemAffl  THEN DO;
17191 +    _NODE_  =                   17;
17192 +    _LEAF_  =                   17;
17193 +    P_TargetBuy0  =     0.22784810126582;
17194 +    P_TargetBuy1  =     0.77215189873417;
17195 +    Q_TargetBuy0  =     0.22784810126582;
17196 +    Q_TargetBuy1  =     0.77215189873417;
17197 +    V_TargetBuy0  =     0.28571428571428;
17198 +    V_TargetBuy1  =     0.71428571428571;
17199 +    I_TargetBuy  = '1' ;
17200 +    U_TargetBuy  =                    1;
17201 +    END;
17202 +  ELSE DO;
17203 +    _NODE_  =                   15;
17204 +    _LEAF_  =                   15;
17205 +    P_TargetBuy0  =     0.82864674868189;
17206 +    P_TargetBuy1  =      0.1713532513181;
17207 +    Q_TargetBuy0  =     0.82864674868189;
17208 +    Q_TargetBuy1  =      0.1713532513181;
17209 +    V_TargetBuy0  =     0.83093525179856;
17210 +    V_TargetBuy1  =     0.16906474820143;
17211 +    I_TargetBuy  = '0' ;
17212 +    U_TargetBuy  =                    0;
17213 +    END;
17214 +  END;
17215 +ELSE DO;
17216 +  IF  NOT MISSING(DemAffl ) AND
17217 +    DemAffl  <                 10.5 THEN DO;
17218 +    _NODE_  =                   18;
17219 +    _LEAF_  =                   18;
17220 +    P_TargetBuy0  =     0.82315112540192;
17221 +    P_TargetBuy1  =     0.17684887459807;
17222 +    Q_TargetBuy0  =     0.82315112540192;
17223 +    Q_TargetBuy1  =     0.17684887459807;
17224 +    V_TargetBuy0  =     0.82857142857142;
17225 +    V_TargetBuy1  =     0.17142857142857;
17226 +    I_TargetBuy  = '0' ;
17227 +    U_TargetBuy  =                    0;
17228 +    END;
17229 +  ELSE IF  NOT MISSING(DemAffl ) AND
17230 +                    13.5 <= DemAffl  THEN DO;
17231 +    _NODE_  =                   20;
17232 +    _LEAF_  =                   20;
17233 +    P_TargetBuy0  =                 0.36;
17234 +    P_TargetBuy1  =                 0.64;
17235 +    Q_TargetBuy0  =                 0.36;
17236 +    Q_TargetBuy1  =                 0.64;
17237 +    V_TargetBuy0  =     0.46511627906976;
17238 +    V_TargetBuy1  =     0.53488372093023;
17239 +    I_TargetBuy  = '1' ;
17240 +    U_TargetBuy  =                    1;
17241 +    END;
17242 +  ELSE DO;
17243 +    _NODE_  =                   19;
17244 +    _LEAF_  =                   19;
17245 +    P_TargetBuy0  =     0.61111111111111;
17246 +    P_TargetBuy1  =     0.38888888888888;
17247 +    Q_TargetBuy0  =     0.61111111111111;
17248 +    Q_TargetBuy1  =     0.38888888888888;
17249 +    V_TargetBuy0  =     0.64596273291925;
17250 +    V_TargetBuy1  =     0.35403726708074;
17251 +    I_TargetBuy  = '0' ;
17252 +    U_TargetBuy  =                    0;
17253 +    END;
17254 +  END;
17255 +
17256 +*****  RESIDUALS R_ *************;
17257 +IF  F_TargetBuy  NE '0'
17258 +AND F_TargetBuy  NE '1'  THEN DO;
17259 +        R_TargetBuy0  = .;
17260 +        R_TargetBuy1  = .;
17261 + END;
17262 + ELSE DO;
17263 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17264 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17265 +       SELECT( F_TargetBuy  );
17266 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17267 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17268 +       END;
17269 + END;
17270 +
17271 +****************************************************************;
17272 +******          END OF DECISION TREE SCORING CODE         ******;
17273 +****************************************************************;
17274 +
17275 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17276  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17277  quit;
17278  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17279  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
17280  *------------------------------------------------------------*;
17281  * Tree3: Scoring VALIDATE data;
17282  *------------------------------------------------------------*;
17283  data EMWS1.Tree3_VALIDATE
17284  / view=EMWS1.Tree3_VALIDATE
17285  ;
17286  set EMWS1.Part_VALIDATE
17287  ;
17288  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
17289 +****************************************************************;
17290 +******             DECISION TREE SCORING CODE             ******;
17291 +****************************************************************;
17292 +
17293 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17294 +LENGTH F_TargetBuy  $   12;
17295 +LENGTH I_TargetBuy  $   12;
17296 +LENGTH _WARN_  $    4;
17297 +
17298 +******              LABELS FOR NEW VARIABLES              ******;
17299 +label _NODE_ = 'Node' ;
17300 +label _LEAF_ = 'Leaf' ;
17301 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17302 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17303 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17304 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17305 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17306 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17307 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17308 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17309 +label F_TargetBuy = 'From: TargetBuy' ;
17310 +label I_TargetBuy = 'Into: TargetBuy' ;
17311 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17312 +label _WARN_ = 'Warnings' ;
17313 +
17314 +
17315 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17316 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17317 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17318 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17319 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17320 +
17321 +
17322 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17323 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17324 +
17325 +******             ASSIGN OBSERVATION TO NODE             ******;
17326 +IF  NOT MISSING(DemAge ) AND
17327 +  DemAge  <                 39.5 THEN DO;
17328 +  IF  NOT MISSING(DemAffl ) AND
17329 +    DemAffl  <                  6.5 THEN DO;
17330 +    _NODE_  =                    6;
17331 +    _LEAF_  =                    1;
17332 +    P_TargetBuy0  =      0.6593886462882;
17333 +    P_TargetBuy1  =     0.34061135371179;
17334 +    Q_TargetBuy0  =      0.6593886462882;
17335 +    Q_TargetBuy1  =     0.34061135371179;
17336 +    V_TargetBuy0  =     0.66009852216748;
17337 +    V_TargetBuy1  =     0.33990147783251;
17338 +    I_TargetBuy  = '0' ;
17339 +    U_TargetBuy  =                    0;
17340 +    END;
17341 +  ELSE IF  NOT MISSING(DemAffl ) AND
17342 +                     6.5 <= DemAffl  AND
17343 +    DemAffl  <                  9.5 THEN DO;
17344 +    _ARBFMT_1 = PUT( DemGender , $1.);
17345 +     %DMNORMIP( _ARBFMT_1);
17346 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17347 +      _NODE_  =                   21;
17348 +      _LEAF_  =                    2;
17349 +      P_TargetBuy0  =     0.38405797101449;
17350 +      P_TargetBuy1  =      0.6159420289855;
17351 +      Q_TargetBuy0  =     0.38405797101449;
17352 +      Q_TargetBuy1  =      0.6159420289855;
17353 +      V_TargetBuy0  =     0.41121495327102;
17354 +      V_TargetBuy1  =     0.58878504672897;
17355 +      I_TargetBuy  = '1' ;
17356 +      U_TargetBuy  =                    1;
17357 +      END;
17358 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17359 +      _NODE_  =                   22;
17360 +      _LEAF_  =                    3;
17361 +      P_TargetBuy0  =     0.58878504672897;
17362 +      P_TargetBuy1  =     0.41121495327102;
17363 +      Q_TargetBuy0  =     0.58878504672897;
17364 +      Q_TargetBuy1  =     0.41121495327102;
17365 +      V_TargetBuy0  =     0.59210526315789;
17366 +      V_TargetBuy1  =      0.4078947368421;
17367 +      I_TargetBuy  = '0' ;
17368 +      U_TargetBuy  =                    0;
17369 +      END;
17370 +    ELSE DO;
17371 +      _NODE_  =                   23;
17372 +      _LEAF_  =                    4;
17373 +      P_TargetBuy0  =     0.81395348837209;
17374 +      P_TargetBuy1  =      0.1860465116279;
17375 +      Q_TargetBuy0  =     0.81395348837209;
17376 +      Q_TargetBuy1  =      0.1860465116279;
17377 +      V_TargetBuy0  =     0.88679245283018;
17378 +      V_TargetBuy1  =     0.11320754716981;
17379 +      I_TargetBuy  = '0' ;
17380 +      U_TargetBuy  =                    0;
17381 +      END;
17382 +    END;
17383 +  ELSE IF  NOT MISSING(DemAffl ) AND
17384 +                    14.5 <= DemAffl  THEN DO;
17385 +    _NODE_  =                    9;
17386 +    _LEAF_  =                    8;
17387 +    P_TargetBuy0  =     0.06521739130434;
17388 +    P_TargetBuy1  =     0.93478260869565;
17389 +    Q_TargetBuy0  =     0.06521739130434;
17390 +    Q_TargetBuy1  =     0.93478260869565;
17391 +    V_TargetBuy0  =     0.03597122302158;
17392 +    V_TargetBuy1  =     0.96402877697841;
17393 +    I_TargetBuy  = '1' ;
17394 +    U_TargetBuy  =                    1;
17395 +    END;
17396 +  ELSE DO;
17397 +    _ARBFMT_1 = PUT( DemGender , $1.);
17398 +     %DMNORMIP( _ARBFMT_1);
17399 +    IF _ARBFMT_1 IN ('M' ) THEN DO;
17400 +      _NODE_  =                   25;
17401 +      _LEAF_  =                    6;
17402 +      P_TargetBuy0  =     0.41666666666666;
17403 +      P_TargetBuy1  =     0.58333333333333;
17404 +      Q_TargetBuy0  =     0.41666666666666;
17405 +      Q_TargetBuy1  =     0.58333333333333;
17406 +      V_TargetBuy0  =     0.55813953488372;
17407 +      V_TargetBuy1  =     0.44186046511627;
17408 +      I_TargetBuy  = '1' ;
17409 +      U_TargetBuy  =                    1;
17410 +      END;
17411 +    ELSE IF _ARBFMT_1 IN ('F' ) THEN DO;
17412 +      _NODE_  =                   26;
17413 +      _LEAF_  =                    7;
17414 +      P_TargetBuy0  =     0.21629213483146;
17415 +      P_TargetBuy1  =     0.78370786516853;
17416 +      Q_TargetBuy0  =     0.21629213483146;
17417 +      Q_TargetBuy1  =     0.78370786516853;
17418 +      V_TargetBuy0  =     0.19636363636363;
17419 +      V_TargetBuy1  =     0.80363636363636;
17420 +      I_TargetBuy  = '1' ;
17421 +      U_TargetBuy  =                    1;
17422 +      END;
17423 +    ELSE DO;
17424 +      _NODE_  =                   24;
17425 +      _LEAF_  =                    5;
17426 +      P_TargetBuy0  =     0.61224489795918;
17427 +      P_TargetBuy1  =     0.38775510204081;
17428 +      Q_TargetBuy0  =     0.61224489795918;
17429 +      Q_TargetBuy1  =     0.38775510204081;
17430 +      V_TargetBuy0  =     0.57894736842105;
17431 +      V_TargetBuy1  =     0.42105263157894;
17432 +      I_TargetBuy  = '0' ;
17433 +      U_TargetBuy  =                    0;
17434 +      END;
17435 +    END;
17436 +  END;
17437 +ELSE IF  NOT MISSING(DemAge ) AND
17438 +                  39.5 <= DemAge  AND
17439 +  DemAge  <                 44.5 THEN DO;
17440 +  IF  NOT MISSING(DemAffl ) AND
17441 +    DemAffl  <                  6.5 THEN DO;
17442 +    _NODE_  =                   10;
17443 +    _LEAF_  =                    9;
17444 +    P_TargetBuy0  =     0.80346820809248;
17445 +    P_TargetBuy1  =     0.19653179190751;
17446 +    Q_TargetBuy0  =     0.80346820809248;
17447 +    Q_TargetBuy1  =     0.19653179190751;
17448 +    V_TargetBuy0  =     0.78030303030303;
17449 +    V_TargetBuy1  =     0.21969696969696;
17450 +    I_TargetBuy  = '0' ;
17451 +    U_TargetBuy  =                    0;
17452 +    END;
17453 +  ELSE IF  NOT MISSING(DemAffl ) AND
17454 +                     6.5 <= DemAffl  AND
17455 +    DemAffl  <                  9.5 THEN DO;
17456 +    _NODE_  =                   11;
17457 +    _LEAF_  =                   10;
17458 +    P_TargetBuy0  =     0.67537313432835;
17459 +    P_TargetBuy1  =     0.32462686567164;
17460 +    Q_TargetBuy0  =     0.67537313432835;
17461 +    Q_TargetBuy1  =     0.32462686567164;
17462 +    V_TargetBuy0  =     0.68556701030927;
17463 +    V_TargetBuy1  =     0.31443298969072;
17464 +    I_TargetBuy  = '0' ;
17465 +    U_TargetBuy  =                    0;
17466 +    END;
17467 +  ELSE IF  NOT MISSING(DemAffl ) AND
17468 +                    11.5 <= DemAffl  THEN DO;
17469 +    _NODE_  =                   13;
17470 +    _LEAF_  =                   13;
17471 +    P_TargetBuy0  =     0.29050279329608;
17472 +    P_TargetBuy1  =     0.70949720670391;
17473 +    Q_TargetBuy0  =     0.29050279329608;
17474 +    Q_TargetBuy1  =     0.70949720670391;
17475 +    V_TargetBuy0  =     0.37007874015748;
17476 +    V_TargetBuy1  =     0.62992125984251;
17477 +    I_TargetBuy  = '1' ;
17478 +    U_TargetBuy  =                    1;
17479 +    END;
17480 +  ELSE DO;
17481 +    _ARBFMT_1 = PUT( DemGender , $1.);
17482 +     %DMNORMIP( _ARBFMT_1);
17483 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17484 +      _NODE_  =                   31;
17485 +      _LEAF_  =                   11;
17486 +      P_TargetBuy0  =     0.45762711864406;
17487 +      P_TargetBuy1  =     0.54237288135593;
17488 +      Q_TargetBuy0  =     0.45762711864406;
17489 +      Q_TargetBuy1  =     0.54237288135593;
17490 +      V_TargetBuy0  =     0.33783783783783;
17491 +      V_TargetBuy1  =     0.66216216216216;
17492 +      I_TargetBuy  = '1' ;
17493 +      U_TargetBuy  =                    1;
17494 +      END;
17495 +    ELSE DO;
17496 +      _NODE_  =                   32;
17497 +      _LEAF_  =                   12;
17498 +      P_TargetBuy0  =     0.71428571428571;
17499 +      P_TargetBuy1  =     0.28571428571428;
17500 +      Q_TargetBuy0  =     0.71428571428571;
17501 +      Q_TargetBuy1  =     0.28571428571428;
17502 +      V_TargetBuy0  =     0.68115942028985;
17503 +      V_TargetBuy1  =     0.31884057971014;
17504 +      I_TargetBuy  = '0' ;
17505 +      U_TargetBuy  =                    0;
17506 +      END;
17507 +    END;
17508 +  END;
17509 +ELSE IF  NOT MISSING(DemAge ) AND
17510 +                  44.5 <= DemAge  AND
17511 +  DemAge  <                 76.5 THEN DO;
17512 +  IF  NOT MISSING(DemAffl ) AND
17513 +    DemAffl  <                  8.5 THEN DO;
17514 +    _NODE_  =                   14;
17515 +    _LEAF_  =                   14;
17516 +    P_TargetBuy0  =     0.91972700682482;
17517 +    P_TargetBuy1  =     0.08027299317517;
17518 +    Q_TargetBuy0  =     0.91972700682482;
17519 +    Q_TargetBuy1  =     0.08027299317517;
17520 +    V_TargetBuy0  =     0.93264481365065;
17521 +    V_TargetBuy1  =     0.06735518634934;
17522 +    I_TargetBuy  = '0' ;
17523 +    U_TargetBuy  =                    0;
17524 +    END;
17525 +  ELSE IF  NOT MISSING(DemAffl ) AND
17526 +                    12.5 <= DemAffl  AND
17527 +    DemAffl  <                 16.5 THEN DO;
17528 +    _NODE_  =                   16;
17529 +    _LEAF_  =                   16;
17530 +    P_TargetBuy0  =     0.63956043956043;
17531 +    P_TargetBuy1  =     0.36043956043956;
17532 +    Q_TargetBuy0  =     0.63956043956043;
17533 +    Q_TargetBuy1  =     0.36043956043956;
17534 +    V_TargetBuy0  =     0.63513513513513;
17535 +    V_TargetBuy1  =     0.36486486486486;
17536 +    I_TargetBuy  = '0' ;
17537 +    U_TargetBuy  =                    0;
17538 +    END;
17539 +  ELSE IF  NOT MISSING(DemAffl ) AND
17540 +                    16.5 <= DemAffl  THEN DO;
17541 +    _NODE_  =                   17;
17542 +    _LEAF_  =                   17;
17543 +    P_TargetBuy0  =     0.22784810126582;
17544 +    P_TargetBuy1  =     0.77215189873417;
17545 +    Q_TargetBuy0  =     0.22784810126582;
17546 +    Q_TargetBuy1  =     0.77215189873417;
17547 +    V_TargetBuy0  =     0.28571428571428;
17548 +    V_TargetBuy1  =     0.71428571428571;
17549 +    I_TargetBuy  = '1' ;
17550 +    U_TargetBuy  =                    1;
17551 +    END;
17552 +  ELSE DO;
17553 +    _NODE_  =                   15;
17554 +    _LEAF_  =                   15;
17555 +    P_TargetBuy0  =     0.82864674868189;
17556 +    P_TargetBuy1  =      0.1713532513181;
17557 +    Q_TargetBuy0  =     0.82864674868189;
17558 +    Q_TargetBuy1  =      0.1713532513181;
17559 +    V_TargetBuy0  =     0.83093525179856;
17560 +    V_TargetBuy1  =     0.16906474820143;
17561 +    I_TargetBuy  = '0' ;
17562 +    U_TargetBuy  =                    0;
17563 +    END;
17564 +  END;
17565 +ELSE DO;
17566 +  IF  NOT MISSING(DemAffl ) AND
17567 +    DemAffl  <                 10.5 THEN DO;
17568 +    _NODE_  =                   18;
17569 +    _LEAF_  =                   18;
17570 +    P_TargetBuy0  =     0.82315112540192;
17571 +    P_TargetBuy1  =     0.17684887459807;
17572 +    Q_TargetBuy0  =     0.82315112540192;
17573 +    Q_TargetBuy1  =     0.17684887459807;
17574 +    V_TargetBuy0  =     0.82857142857142;
17575 +    V_TargetBuy1  =     0.17142857142857;
17576 +    I_TargetBuy  = '0' ;
17577 +    U_TargetBuy  =                    0;
17578 +    END;
17579 +  ELSE IF  NOT MISSING(DemAffl ) AND
17580 +                    13.5 <= DemAffl  THEN DO;
17581 +    _NODE_  =                   20;
17582 +    _LEAF_  =                   20;
17583 +    P_TargetBuy0  =                 0.36;
17584 +    P_TargetBuy1  =                 0.64;
17585 +    Q_TargetBuy0  =                 0.36;
17586 +    Q_TargetBuy1  =                 0.64;
17587 +    V_TargetBuy0  =     0.46511627906976;
17588 +    V_TargetBuy1  =     0.53488372093023;
17589 +    I_TargetBuy  = '1' ;
17590 +    U_TargetBuy  =                    1;
17591 +    END;
17592 +  ELSE DO;
17593 +    _NODE_  =                   19;
17594 +    _LEAF_  =                   19;
17595 +    P_TargetBuy0  =     0.61111111111111;
17596 +    P_TargetBuy1  =     0.38888888888888;
17597 +    Q_TargetBuy0  =     0.61111111111111;
17598 +    Q_TargetBuy1  =     0.38888888888888;
17599 +    V_TargetBuy0  =     0.64596273291925;
17600 +    V_TargetBuy1  =     0.35403726708074;
17601 +    I_TargetBuy  = '0' ;
17602 +    U_TargetBuy  =                    0;
17603 +    END;
17604 +  END;
17605 +
17606 +*****  RESIDUALS R_ *************;
17607 +IF  F_TargetBuy  NE '0'
17608 +AND F_TargetBuy  NE '1'  THEN DO;
17609 +        R_TargetBuy0  = .;
17610 +        R_TargetBuy1  = .;
17611 + END;
17612 + ELSE DO;
17613 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17614 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17615 +       SELECT( F_TargetBuy  );
17616 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17617 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17618 +       END;
17619 + END;
17620 +
17621 +****************************************************************;
17622 +******          END OF DECISION TREE SCORING CODE         ******;
17623 +****************************************************************;
17624 +
17625 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17626  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17627  quit;
17628  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17629  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
17630  *------------------------------------------------------------*;
17631  * Tree3: Scoring TEST data;
17632  *------------------------------------------------------------*;
17633  data EMWS1.Tree3_TEST
17634  / view=EMWS1.Tree3_TEST
17635  ;
17636  set EMWS1.Part_TEST
17637  ;
17638  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
17639 +****************************************************************;
17640 +******             DECISION TREE SCORING CODE             ******;
17641 +****************************************************************;
17642 +
17643 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17644 +LENGTH F_TargetBuy  $   12;
17645 +LENGTH I_TargetBuy  $   12;
17646 +LENGTH _WARN_  $    4;
17647 +
17648 +******              LABELS FOR NEW VARIABLES              ******;
17649 +label _NODE_ = 'Node' ;
17650 +label _LEAF_ = 'Leaf' ;
17651 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17652 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17653 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17654 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17655 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17656 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17657 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17658 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17659 +label F_TargetBuy = 'From: TargetBuy' ;
17660 +label I_TargetBuy = 'Into: TargetBuy' ;
17661 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17662 +label _WARN_ = 'Warnings' ;
17663 +
17664 +
17665 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17666 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17667 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17668 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17669 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17670 +
17671 +
17672 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17673 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17674 +
17675 +******             ASSIGN OBSERVATION TO NODE             ******;
17676 +IF  NOT MISSING(DemAge ) AND
17677 +  DemAge  <                 39.5 THEN DO;
17678 +  IF  NOT MISSING(DemAffl ) AND
17679 +    DemAffl  <                  6.5 THEN DO;
17680 +    _NODE_  =                    6;
17681 +    _LEAF_  =                    1;
17682 +    P_TargetBuy0  =      0.6593886462882;
17683 +    P_TargetBuy1  =     0.34061135371179;
17684 +    Q_TargetBuy0  =      0.6593886462882;
17685 +    Q_TargetBuy1  =     0.34061135371179;
17686 +    V_TargetBuy0  =     0.66009852216748;
17687 +    V_TargetBuy1  =     0.33990147783251;
17688 +    I_TargetBuy  = '0' ;
17689 +    U_TargetBuy  =                    0;
17690 +    END;
17691 +  ELSE IF  NOT MISSING(DemAffl ) AND
17692 +                     6.5 <= DemAffl  AND
17693 +    DemAffl  <                  9.5 THEN DO;
17694 +    _ARBFMT_1 = PUT( DemGender , $1.);
17695 +     %DMNORMIP( _ARBFMT_1);
17696 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17697 +      _NODE_  =                   21;
17698 +      _LEAF_  =                    2;
17699 +      P_TargetBuy0  =     0.38405797101449;
17700 +      P_TargetBuy1  =      0.6159420289855;
17701 +      Q_TargetBuy0  =     0.38405797101449;
17702 +      Q_TargetBuy1  =      0.6159420289855;
17703 +      V_TargetBuy0  =     0.41121495327102;
17704 +      V_TargetBuy1  =     0.58878504672897;
17705 +      I_TargetBuy  = '1' ;
17706 +      U_TargetBuy  =                    1;
17707 +      END;
17708 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17709 +      _NODE_  =                   22;
17710 +      _LEAF_  =                    3;
17711 +      P_TargetBuy0  =     0.58878504672897;
17712 +      P_TargetBuy1  =     0.41121495327102;
17713 +      Q_TargetBuy0  =     0.58878504672897;
17714 +      Q_TargetBuy1  =     0.41121495327102;
17715 +      V_TargetBuy0  =     0.59210526315789;
17716 +      V_TargetBuy1  =      0.4078947368421;
17717 +      I_TargetBuy  = '0' ;
17718 +      U_TargetBuy  =                    0;
17719 +      END;
17720 +    ELSE DO;
17721 +      _NODE_  =                   23;
17722 +      _LEAF_  =                    4;
17723 +      P_TargetBuy0  =     0.81395348837209;
17724 +      P_TargetBuy1  =      0.1860465116279;
17725 +      Q_TargetBuy0  =     0.81395348837209;
17726 +      Q_TargetBuy1  =      0.1860465116279;
17727 +      V_TargetBuy0  =     0.88679245283018;
17728 +      V_TargetBuy1  =     0.11320754716981;
17729 +      I_TargetBuy  = '0' ;
17730 +      U_TargetBuy  =                    0;
17731 +      END;
17732 +    END;
17733 +  ELSE IF  NOT MISSING(DemAffl ) AND
17734 +                    14.5 <= DemAffl  THEN DO;
17735 +    _NODE_  =                    9;
17736 +    _LEAF_  =                    8;
17737 +    P_TargetBuy0  =     0.06521739130434;
17738 +    P_TargetBuy1  =     0.93478260869565;
17739 +    Q_TargetBuy0  =     0.06521739130434;
17740 +    Q_TargetBuy1  =     0.93478260869565;
17741 +    V_TargetBuy0  =     0.03597122302158;
17742 +    V_TargetBuy1  =     0.96402877697841;
17743 +    I_TargetBuy  = '1' ;
17744 +    U_TargetBuy  =                    1;
17745 +    END;
17746 +  ELSE DO;
17747 +    _ARBFMT_1 = PUT( DemGender , $1.);
17748 +     %DMNORMIP( _ARBFMT_1);
17749 +    IF _ARBFMT_1 IN ('M' ) THEN DO;
17750 +      _NODE_  =                   25;
17751 +      _LEAF_  =                    6;
17752 +      P_TargetBuy0  =     0.41666666666666;
17753 +      P_TargetBuy1  =     0.58333333333333;
17754 +      Q_TargetBuy0  =     0.41666666666666;
17755 +      Q_TargetBuy1  =     0.58333333333333;
17756 +      V_TargetBuy0  =     0.55813953488372;
17757 +      V_TargetBuy1  =     0.44186046511627;
17758 +      I_TargetBuy  = '1' ;
17759 +      U_TargetBuy  =                    1;
17760 +      END;
17761 +    ELSE IF _ARBFMT_1 IN ('F' ) THEN DO;
17762 +      _NODE_  =                   26;
17763 +      _LEAF_  =                    7;
17764 +      P_TargetBuy0  =     0.21629213483146;
17765 +      P_TargetBuy1  =     0.78370786516853;
17766 +      Q_TargetBuy0  =     0.21629213483146;
17767 +      Q_TargetBuy1  =     0.78370786516853;
17768 +      V_TargetBuy0  =     0.19636363636363;
17769 +      V_TargetBuy1  =     0.80363636363636;
17770 +      I_TargetBuy  = '1' ;
17771 +      U_TargetBuy  =                    1;
17772 +      END;
17773 +    ELSE DO;
17774 +      _NODE_  =                   24;
17775 +      _LEAF_  =                    5;
17776 +      P_TargetBuy0  =     0.61224489795918;
17777 +      P_TargetBuy1  =     0.38775510204081;
17778 +      Q_TargetBuy0  =     0.61224489795918;
17779 +      Q_TargetBuy1  =     0.38775510204081;
17780 +      V_TargetBuy0  =     0.57894736842105;
17781 +      V_TargetBuy1  =     0.42105263157894;
17782 +      I_TargetBuy  = '0' ;
17783 +      U_TargetBuy  =                    0;
17784 +      END;
17785 +    END;
17786 +  END;
17787 +ELSE IF  NOT MISSING(DemAge ) AND
17788 +                  39.5 <= DemAge  AND
17789 +  DemAge  <                 44.5 THEN DO;
17790 +  IF  NOT MISSING(DemAffl ) AND
17791 +    DemAffl  <                  6.5 THEN DO;
17792 +    _NODE_  =                   10;
17793 +    _LEAF_  =                    9;
17794 +    P_TargetBuy0  =     0.80346820809248;
17795 +    P_TargetBuy1  =     0.19653179190751;
17796 +    Q_TargetBuy0  =     0.80346820809248;
17797 +    Q_TargetBuy1  =     0.19653179190751;
17798 +    V_TargetBuy0  =     0.78030303030303;
17799 +    V_TargetBuy1  =     0.21969696969696;
17800 +    I_TargetBuy  = '0' ;
17801 +    U_TargetBuy  =                    0;
17802 +    END;
17803 +  ELSE IF  NOT MISSING(DemAffl ) AND
17804 +                     6.5 <= DemAffl  AND
17805 +    DemAffl  <                  9.5 THEN DO;
17806 +    _NODE_  =                   11;
17807 +    _LEAF_  =                   10;
17808 +    P_TargetBuy0  =     0.67537313432835;
17809 +    P_TargetBuy1  =     0.32462686567164;
17810 +    Q_TargetBuy0  =     0.67537313432835;
17811 +    Q_TargetBuy1  =     0.32462686567164;
17812 +    V_TargetBuy0  =     0.68556701030927;
17813 +    V_TargetBuy1  =     0.31443298969072;
17814 +    I_TargetBuy  = '0' ;
17815 +    U_TargetBuy  =                    0;
17816 +    END;
17817 +  ELSE IF  NOT MISSING(DemAffl ) AND
17818 +                    11.5 <= DemAffl  THEN DO;
17819 +    _NODE_  =                   13;
17820 +    _LEAF_  =                   13;
17821 +    P_TargetBuy0  =     0.29050279329608;
17822 +    P_TargetBuy1  =     0.70949720670391;
17823 +    Q_TargetBuy0  =     0.29050279329608;
17824 +    Q_TargetBuy1  =     0.70949720670391;
17825 +    V_TargetBuy0  =     0.37007874015748;
17826 +    V_TargetBuy1  =     0.62992125984251;
17827 +    I_TargetBuy  = '1' ;
17828 +    U_TargetBuy  =                    1;
17829 +    END;
17830 +  ELSE DO;
17831 +    _ARBFMT_1 = PUT( DemGender , $1.);
17832 +     %DMNORMIP( _ARBFMT_1);
17833 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17834 +      _NODE_  =                   31;
17835 +      _LEAF_  =                   11;
17836 +      P_TargetBuy0  =     0.45762711864406;
17837 +      P_TargetBuy1  =     0.54237288135593;
17838 +      Q_TargetBuy0  =     0.45762711864406;
17839 +      Q_TargetBuy1  =     0.54237288135593;
17840 +      V_TargetBuy0  =     0.33783783783783;
17841 +      V_TargetBuy1  =     0.66216216216216;
17842 +      I_TargetBuy  = '1' ;
17843 +      U_TargetBuy  =                    1;
17844 +      END;
17845 +    ELSE DO;
17846 +      _NODE_  =                   32;
17847 +      _LEAF_  =                   12;
17848 +      P_TargetBuy0  =     0.71428571428571;
17849 +      P_TargetBuy1  =     0.28571428571428;
17850 +      Q_TargetBuy0  =     0.71428571428571;
17851 +      Q_TargetBuy1  =     0.28571428571428;
17852 +      V_TargetBuy0  =     0.68115942028985;
17853 +      V_TargetBuy1  =     0.31884057971014;
17854 +      I_TargetBuy  = '0' ;
17855 +      U_TargetBuy  =                    0;
17856 +      END;
17857 +    END;
17858 +  END;
17859 +ELSE IF  NOT MISSING(DemAge ) AND
17860 +                  44.5 <= DemAge  AND
17861 +  DemAge  <                 76.5 THEN DO;
17862 +  IF  NOT MISSING(DemAffl ) AND
17863 +    DemAffl  <                  8.5 THEN DO;
17864 +    _NODE_  =                   14;
17865 +    _LEAF_  =                   14;
17866 +    P_TargetBuy0  =     0.91972700682482;
17867 +    P_TargetBuy1  =     0.08027299317517;
17868 +    Q_TargetBuy0  =     0.91972700682482;
17869 +    Q_TargetBuy1  =     0.08027299317517;
17870 +    V_TargetBuy0  =     0.93264481365065;
17871 +    V_TargetBuy1  =     0.06735518634934;
17872 +    I_TargetBuy  = '0' ;
17873 +    U_TargetBuy  =                    0;
17874 +    END;
17875 +  ELSE IF  NOT MISSING(DemAffl ) AND
17876 +                    12.5 <= DemAffl  AND
17877 +    DemAffl  <                 16.5 THEN DO;
17878 +    _NODE_  =                   16;
17879 +    _LEAF_  =                   16;
17880 +    P_TargetBuy0  =     0.63956043956043;
17881 +    P_TargetBuy1  =     0.36043956043956;
17882 +    Q_TargetBuy0  =     0.63956043956043;
17883 +    Q_TargetBuy1  =     0.36043956043956;
17884 +    V_TargetBuy0  =     0.63513513513513;
17885 +    V_TargetBuy1  =     0.36486486486486;
17886 +    I_TargetBuy  = '0' ;
17887 +    U_TargetBuy  =                    0;
17888 +    END;
17889 +  ELSE IF  NOT MISSING(DemAffl ) AND
17890 +                    16.5 <= DemAffl  THEN DO;
17891 +    _NODE_  =                   17;
17892 +    _LEAF_  =                   17;
17893 +    P_TargetBuy0  =     0.22784810126582;
17894 +    P_TargetBuy1  =     0.77215189873417;
17895 +    Q_TargetBuy0  =     0.22784810126582;
17896 +    Q_TargetBuy1  =     0.77215189873417;
17897 +    V_TargetBuy0  =     0.28571428571428;
17898 +    V_TargetBuy1  =     0.71428571428571;
17899 +    I_TargetBuy  = '1' ;
17900 +    U_TargetBuy  =                    1;
17901 +    END;
17902 +  ELSE DO;
17903 +    _NODE_  =                   15;
17904 +    _LEAF_  =                   15;
17905 +    P_TargetBuy0  =     0.82864674868189;
17906 +    P_TargetBuy1  =      0.1713532513181;
17907 +    Q_TargetBuy0  =     0.82864674868189;
17908 +    Q_TargetBuy1  =      0.1713532513181;
17909 +    V_TargetBuy0  =     0.83093525179856;
17910 +    V_TargetBuy1  =     0.16906474820143;
17911 +    I_TargetBuy  = '0' ;
17912 +    U_TargetBuy  =                    0;
17913 +    END;
17914 +  END;
17915 +ELSE DO;
17916 +  IF  NOT MISSING(DemAffl ) AND
17917 +    DemAffl  <                 10.5 THEN DO;
17918 +    _NODE_  =                   18;
17919 +    _LEAF_  =                   18;
17920 +    P_TargetBuy0  =     0.82315112540192;
17921 +    P_TargetBuy1  =     0.17684887459807;
17922 +    Q_TargetBuy0  =     0.82315112540192;
17923 +    Q_TargetBuy1  =     0.17684887459807;
17924 +    V_TargetBuy0  =     0.82857142857142;
17925 +    V_TargetBuy1  =     0.17142857142857;
17926 +    I_TargetBuy  = '0' ;
17927 +    U_TargetBuy  =                    0;
17928 +    END;
17929 +  ELSE IF  NOT MISSING(DemAffl ) AND
17930 +                    13.5 <= DemAffl  THEN DO;
17931 +    _NODE_  =                   20;
17932 +    _LEAF_  =                   20;
17933 +    P_TargetBuy0  =                 0.36;
17934 +    P_TargetBuy1  =                 0.64;
17935 +    Q_TargetBuy0  =                 0.36;
17936 +    Q_TargetBuy1  =                 0.64;
17937 +    V_TargetBuy0  =     0.46511627906976;
17938 +    V_TargetBuy1  =     0.53488372093023;
17939 +    I_TargetBuy  = '1' ;
17940 +    U_TargetBuy  =                    1;
17941 +    END;
17942 +  ELSE DO;
17943 +    _NODE_  =                   19;
17944 +    _LEAF_  =                   19;
17945 +    P_TargetBuy0  =     0.61111111111111;
17946 +    P_TargetBuy1  =     0.38888888888888;
17947 +    Q_TargetBuy0  =     0.61111111111111;
17948 +    Q_TargetBuy1  =     0.38888888888888;
17949 +    V_TargetBuy0  =     0.64596273291925;
17950 +    V_TargetBuy1  =     0.35403726708074;
17951 +    I_TargetBuy  = '0' ;
17952 +    U_TargetBuy  =                    0;
17953 +    END;
17954 +  END;
17955 +
17956 +*****  RESIDUALS R_ *************;
17957 +IF  F_TargetBuy  NE '0'
17958 +AND F_TargetBuy  NE '1'  THEN DO;
17959 +        R_TargetBuy0  = .;
17960 +        R_TargetBuy1  = .;
17961 + END;
17962 + ELSE DO;
17963 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17964 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17965 +       SELECT( F_TargetBuy  );
17966 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17967 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17968 +       END;
17969 + END;
17970 +
17971 +****************************************************************;
17972 +******          END OF DECISION TREE SCORING CODE         ******;
17973 +****************************************************************;
17974 +
17975 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17976  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17977  quit;
17978  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
17980  proc sort data=WORK.EM_USER_REPORT;
17981  by ID VIEW;
17982  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17983  *------------------------------------------------------------*;
17984  * Tree3: Computing metadata for TRAIN data;
17985  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18366  data EMWS1.Tree3_EMINFO;
18367  length TARGET KEY $32 DATA $43;
18368  input TARGET KEY DATA $;
18369  cards;
 
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18373  run;
18374  proc sort data = EMWS1.Tree3_EMINFO NOTHREADS;
18375  by TARGET KEY;
18376  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18377  proc sort data = EMWS1.Ids2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18378  by TARGET KEY;
18379  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS2_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18380  proc sort data = EMWS1.Tree3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18381  by TARGET KEY;
18382  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18383  data EMWS1.Tree3_EMINFO;
18384  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18385  by TARGET KEY;
18386  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18387  proc datasets lib=work nolist;
18388  delete TEMP_INFO SORTEDEMINFO;
18389  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18390  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE3_TEST.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                March 18, 2016
Time:                19:38:17
*------------------------------------------------------------*
18414  data EMWS1.Tree3_EMOUTFIT;
18415  set EMWS1.Tree3_EMOUTFIT;
18416  length TargetLabel $200;
18417  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18418  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
18419  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18420  proc sort data=EMWS1.Tree3_EMREPORTFIT nothreads;
18421  by TARGET;
18422  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: The data set EMWS1.TREE3_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18423  %let _EMwarndup = 0;
18424  %let _EMtargetdup =;
18425  %let _EMASEtargetdup =;
18426  data _null_;
18427  set EMWS1.Tree3_EMOUTFIT;
18428  if .<_ASE_<0.000001 then do;
18429  call symput('_EMwarndup', '1');
18430  call symput('_EMtargetdup', target);
18431  call symput('_EMASEtargetdup', put(_ASE_, best.));
18432  end;
18433  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18434  %let EMEXCEPTIONSTRING=;
18435  *------------------------------------------------------------*;
18436  * REPORT: Tree3;
18437  *------------------------------------------------------------*;
18438  %let EM_ACTION = REPORT;
18439  %let syscc = 0;
18440  %macro main;
18441
18442    %if %upcase(&EM_ACTION) = CREATE %then %do;
18443      filename temp catalog 'sashelp.emmodl.tree_create.source';
18444      %include temp;
18445      filename temp;
18446
18447      %em_tree_create;
18448    %end;
18449
18450     %else
18451     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18452
18453         filename temp catalog 'sashelp.emmodl.tree_train.source';
18454         %include temp;
18455         filename temp;
18456         %em_tree_train;
18457     %end;
18458
18459    %else
18460    %if %upcase(&EM_ACTION) = SCORE %then %do;
18461      filename temp catalog 'sashelp.emmodl.tree_score.source';
18462      %include temp;
18463      filename temp;
18464
18465      %em_tree_score;
18466
18467    %end;
18468
18469    %else
18470    %if %upcase(&EM_ACTION) = REPORT %then %do;
18471
18472         filename temp catalog 'sashelp.emmodl.tree_report.source';
18473         %include temp;
18474         filename temp;
18475
18476         %em_tree_report;
18477     %end;
18478
18479    %else
18480    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18481
18482         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18483         %include temp;
18484         filename temp;
18485         %EM_TREE_OPENTREEVIEWER;
18486
18487     %end;
18488
18489    %else
18490    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18491
18492         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18493         %include temp;
18494         filename temp;
18495         %EM_TREE_CLOSETREEVIEWER;
18496
18497     %end;
18498
18499
18500     %doendm:
18501  %mend main;
18502
18503  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18505 +%macro em_tree_makePlotDs( multipleTar= );
18507 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18508 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18509 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18510 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18512 +  /* determine if validation statistics will be displayed */
18513 +  %let validflag=N;
18514 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18515 +    /* determine if validation data exists */
18516 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18517 +      %let validflag=Y;
18518 +    %end;
18519 +  %end;
18521 +   /* retrieve name of decmeta even in presence of multiple targets */
18522 +   %let decmeta = ;
18523 +   %if &EM_DEC_DECMETA eq %then %do;
18524 +     data _Target;
18525 +       set &em_data_variableset;
18526 +       where ROLE='TARGET' and USE in('D', 'Y');
18527 +       keep NAME;
18528 +     run;
18529 +     proc sort data=_Target;
18530 +       by NAME;
18531 +     run;
18532 +     proc sort data=EM_TARGETDECINFO;
18533 +       by TARGET;
18534 +     run;
18535 +     data _Target;
18536 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18537 +       by NAME;
18538 +       if _a then do;
18539 +         call symput('decmeta', trim(DECMETA));
18540 +       end;
18541 +     run;
18542 +     proc delete data=_Target;run;
18543 +   %end;
18544 +   %else %let decmeta = &EM_DEC_DECMETA;
18547 +  /* retrieve targetEvent from decmeta */
18548 +  %let targetEvent=;
18549 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18550 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18551 +      data _null_;
18552 +       set &DECMETA(where=(_TYPE_="TARGET"));
18553 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18554 +      run;
18555 +    %end;
18556 +  %end;
18558 +  /* retrieve predicted var for targetEvent from decmeta */
18559 +  %let predTarget=;
18560 +  %let predLvl=;
18561 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18562 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18563 +      data _null_;
18564 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18565 +       call symput('predTarget', strip(VARIABLE));
18566 +       call symput('predLvl', strip(LEVEL));
18567 +      run;
18568 +    %end;
18569 +  %end;
18570 +  %else %do;
18571 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18572 +      data _null_;
18573 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18574 +       call symput('predTarget', strip(VARIABLE));
18575 +      run;
18576 +    %end;
18577 +  %end;
18579 +  /* create BelowText value */
18580 +  data belowtext;
18581 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18582 +    keep node belowtext;
18583 +  run;
18585 +  /* relace belowtext with variable label if it exists */
18586 +  data belowtext2;
18587 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18588 +    keep node belowtextlbl;
18589 +  run;
18591 +  proc sort data=belowtext; by node; run;
18592 +  proc sort data=belowtext2; by node; run;
18594 +  data belowtext;
18595 +    merge belowtext belowtext2(in=_a);
18596 +    by node;
18597 +    if _a then belowtext=belowtextlbl;
18598 +    keep node belowtext;
18599 +  run;
18601 +  /* create AboveText value */
18602 +  data abovetext;
18603 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18604 +  run;
18605 +  proc sort data=abovetext; by node numeric_value; run;
18607 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18608 +  data abovetext;
18609 +    set abovetext(rename=(node=parent));
18610 +    by parent numeric_value;
18611 +    retain abovetext tempstring flag branch origval origchar ;
18612 +    length abovetext $256;
18613 +    length tempstring origchar $64;
18615 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18616 +      if first.parent then do;
18617 +        if missing(character_value) then do;
18618 +          numeric_value = round(numeric_value, &sp_precision);
18619 +          abovetext = "< "||strip(NUMERIC_VALUE);
18620 +          branch = 1;
18621 +          origval = numeric_value;
18622 +          output;
18623 +        end;
18624 +        else do;
18625 +          abovetext = "< "||strip(CHARACTER_VALUE);
18626 +          branch = 1;
18627 +          origchar = character_value;
18628 +          output;
18629 +        end;
18631 +        if first.parent AND last.parent then do;
18632 +          if missing(character_value) then do;
18633 +            numeric_value = round(numeric_value, &sp_precision);
18634 +            branch = branch + 1;
18635 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18636 +            output;
18637 +          end;
18638 +          else do;
18639 +            branch = branch + 1;
18640 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18641 +            output;
18642 +          end;
18643 +        end;
18644 +      end;
18645 +      else if last.parent then do;
18646 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18647 +          if missing(character_value) then do;
18648 +            numeric_value = round(numeric_value, &sp_precision);
18649 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18650 +          end;
18651 +          else do;
18652 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18653 +          end;
18654 +          branch = branch + 1;
18655 +          output;
18657 +          if missing(character_value) then do;
18658 +            numeric_value = round(numeric_value, &sp_precision);
18659 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18660 +          end;
18661 +          else do;
18662 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18663 +          end;
18664 +          branch = branch + 1;
18665 +          output;
18666 +        end;
18667 +        else do;
18668 +          if missing(character_value) then do;
18669 +            numeric_value = round(numeric_value, &sp_precision);
18670 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18671 +          end;
18672 +          else do;
18673 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18674 +          end;
18675 +          branch = branch + 1;
18676 +          output;
18677 +        end;
18678 +      end;
18679 +      else do;
18680 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18681 +          if missing(character_value) then do;
18682 +            numeric_value = round(numeric_value,&sp_precision);
18683 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18684 +            origval = numeric_value;
18685 +          end;
18686 +          else do;
18687 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18688 +            origchar = character_value;
18689 +          end;
18690 +          branch = branch + 1;
18691 +          output;
18693 +        end;
18694 +        else do;
18695 +          if missing(character_value) then do;
18696 +            numeric_value = round(numeric_value, &sp_precision);
18697 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18698 +            origval = numeric_value;
18699 +          end;
18700 +          else do;
18701 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18702 +            origval = character_value;
18703 +          end;
18704 +          branch = branch + 1;
18705 +          output;
18706 +        end;
18707 +      end;
18708 +    end;
18709 +    else do;
18710 +       if first.numeric_value then do;
18711 +         flag = 0;
18712 +         abovetext = strip(CHARACTER_VALUE);
18713 +         branch = numeric_value;
18714 +         if first.numeric_value AND last.numeric_value then do;
18715 +           output;
18716 +         end;
18717 +       end;
18718 +       else if last.numeric_value then do;
18719 +         if flag=0 then do;
18720 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18721 +           length = length(strip(tempstring));
18722 +           if length < 32 then do;
18723 +             abovetext = strip(tempstring);
18724 +           end;
18725 +           else do;
18726 +             abovetext = strip(abovetext)||", ...";
18727 +             flag = 1;
18728 +           end;
18729 +         end;
18730 +         branch = numeric_value;
18731 +         output;
18732 +       end;
18733 +       else do;
18734 +         if flag=0 then do;
18735 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18736 +           length = length(strip(tempstring));
18737 +           if length < 32 then do;
18738 +             abovetext = strip(tempstring);
18739 +           end;
18740 +           else do;
18741 +             abovetext = strip(abovetext)||", ...";
18742 +             flag=1;
18743 +           end;
18744 +         end;
18745 +         branch = numeric_value;
18746 +       end;
18747 +    end;
18748 +    keep parent branch abovetext;
18749 +  run;
18751 +  /* MIssing value to abovetext */
18752 +  data tempmissing;
18753 +    set &EM_USER_OUTRULES;
18754 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18755 +    rename node=parent numeric_value=branch character_value=misschar;
18756 +  run;
18759 +  proc sort data=abovetext; by parent branch; run;
18760 +  proc sort data=tempmissing; by parent branch; run;
18761 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18763 +  data tempoutnodes;
18764 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18765 +    by parent branch;
18766 +    length traintotal validtotal 8;
18767 +    retain traintotal validtotal;
18769 +    if _a then do;
18770 +      if ^MISSING(abovetext) then do;
18771 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18772 +      end;
18773 +      else do;
18774 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18775 +      end;
18776 +    end;
18777 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18779 +    if node=1 then do;
18780 +      traintotal = N;
18781 +      validtotal=VN;
18782 +    end;
18784 +    drop role rank stat misschar belowtext;
18785 +  run;
18786 +  proc sort data=tempoutnodes; by node; run;
18787 +  proc sort data=belowtext; by node; run;
18789 +  data tempoutnodes;
18790 +    merge tempoutnodes belowtext;
18791 +    by node;
18793 +  run;
18795 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18796 +  %let adjusted = N;
18797 +  %let npriors = 0;
18798 +  data _null_ ;
18799 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18800 +    if eof then do ;
18801 +      call symput("npriors" , strip(put(_N_,best.))) ;
18802 +    end;
18803 +  run;
18804 +  %if &npriors gt 0 %then %let adjusted=Y;
18807 +  /* create a table with targetUsed and targetLevel columns for each node */
18808 +  data temptarmeta;
18809 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18810 +    %if &multipleTar eq N %then %do;
18811 +      AND USE in ('D', 'Y')
18812 +    %end;
18813 +    ));
18814 +    length TARGET $32;
18815 +    Target=name;
18816 +    keep target level;
18817 +  run;
18819 +  %if &multipleTar eq Y %then %do;
18820 +    data temptargetused;
18821 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18822 +      keep node target;
18823 +    run;
18824 +    proc sort data=temptargetused; by target; run;
18825 +    proc sort data=temptarmeta; by target; run;
18826 +    data temptargetused;
18827 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18828 +      by target;
18829 +      if _a and _b;
18830 +    run;
18831 +  %end;
18832 +  %else %do;
18833 +    data temptargetused;
18834 +      set &EM_USER_OUTSTATS;
18835 +      length target $32 tarlevel $10;
18836 +      target="%EM_TARGET";
18837 +      tarlevel="%EM_TARGET_LEVEL";
18838 +      keep node target tarlevel;
18839 +    run;
18840 +    proc sort data=temptargetused nodupkey; by node; run;
18841 +  %end;
18843 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18844 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18845 +  proc sort data=temptargetused; by node; run;
18848 +  /* create tables for all interval targets as well as all class targets */
18849 +  data tempinterval tempclass;
18850 +    merge tempoutstats temptargetused( rename=(target=targetused));
18851 +    by node;
18852 +    %if "&multipleTar" eq "Y" %then %do;
18853 +      if ((missing(Target)) OR (target=targetused ));
18854 +    %end;
18856 +    if tarlevel="INTERVAL" then output tempinterval;
18857 +    else output tempclass;
18858 +  run;
18860 +  /* iniitalize intTarget and classTarget flags */
18861 +  %let em_intNobs =0;
18862 +  %let em_classNobs = 0;
18863 +  %let em_intTarget= N;
18864 +  %let em_classTarget= N;
18866 +  proc sql;
18867 +    reset noprint;
18868 +    select count(*) into :em_intNobs from tempinterval;
18869 +  quit;
18870 +  proc sql;
18871 +    reset noprint;
18872 +    select count(*) into :em_classNobs from tempclass;
18873 +  quit;
18875 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18876 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18878 +  /* retrieve all information for interval targets */
18879 +  %if &em_intTarget eq Y %then %do;
18881 +    /* determine if leaf variable exists */
18882 +    %let dsid=%sysfunc(open(tempinterval,i));
18883 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18884 +    %let rc=%sysfunc(close(&dsid));
18886 +    proc transpose data=tempinterval
18887 +      %if &leafexists %then %do;
18888 +        (drop=leaf)
18889 +      %end;
18890 +      %if &validexist %then %do;
18891 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18892 +      %end;
18893 +      %else %do;
18894 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18895 +      %end;
18896 +      by node;
18897 +      id statname;
18898 +    run;
18899 +    data tempinterval;
18900 +      set tempinterval;
18901 +      if missing(N) then delete;
18902 +    run;
18903 +  %end;
18905 +  /* retrieve all information for class targets */
18906 +  %if &em_classTarget eq Y %then %do;
18907 +    proc sort data=tempclass; by node category; run;
18908 +    %if &validflag eq N %then %do;
18909 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18910 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18911 +    %end;
18912 +    %else %do;
18913 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18914 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18915 +    %end;
18916 +      set tempclass;
18918 +      %if &validflag eq N %then %do;
18919 +        %if "&adjusted" eq "N" %then %do;
18920 +          if statname="N" then output tempn;
18921 +        %end;
18922 +        %else %do;
18923 +          if statname="NPRIORS" then output tempn;
18924 +        %end;
18925 +        else if statname="PREDICTION" then output temppredict;
18926 +        else if statname="PROBABILITY" then output tempprob;
18927 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18928 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18929 +      %end;
18930 +      %else %do;
18931 +        %if "&adjusted" eq "N" %then %do;
18932 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18933 +        %end;
18934 +        %else %do;
18935 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18936 +        %end;
18937 +        else if statname="PREDICTION" then output temppredict;
18938 +        else if statname="PROBABILITY" then output tempprob;
18939 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18940 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18941 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18942 +      %end;
18943 +    run;
18946 +    /* determine if profit/loss exists in tempprofit */
18947 +    %let em_profitflag=0;
18948 +    %let em_lossflag=0;
18949 +    proc sql;
18950 +      reset noprint;
18951 +      select count(*) into :em_profitflag from tempprofit;
18952 +    quit;
18953 +    proc sql;
18954 +      reset noprint;
18955 +      select count(*) into :em_lossflag from temploss;
18956 +    quit;
18958 +    %if &validFlag eq Y %then %do;
18959 +      proc transpose data=tempn
18960 +        %if "&adjusted" eq "N" %then %do;
18961 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18962 +        %end;
18963 +        %else %do;
18964 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18965 +        %end;
18966 +        by node;
18967 +        id statname;
18968 +      run;
18969 +      %if &em_profitflag ne 0 %then %do;
18970 +        proc transpose data=tempprofit out=tempprofit;
18971 +          by node category;
18972 +          id statname ;
18973 +        run;
18974 +      %end;
18975 +      %if &em_lossflag ne 0 %then %do;
18976 +        proc transpose data=temploss out=temploss;
18977 +          by node category;
18978 +          id statname ;
18979 +        run;
18980 +      %end;
18981 +      data tempprob;
18982 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18983 +        by node
18984 +        %if &multipleTar eq Y %then %do;
18985 +          target
18986 +        %end;
18987 +        category;
18988 +      run;
18989 +    %end;
18991 +    /* store percentcorrect value */
18992 +    data temppredict;
18993 +      merge tempprob temppredict(in=_a);
18994 +      by node category;
18995 +      if _a then do;
18996 +        percentCorrect = statvalue;
18997 +        %if &validFlag eq Y %then %do;
18998 +          vpercentCorrect= vstatvalue;
18999 +        %end;
19000 +      end;
19001 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19002 +      %if &validFlag eq Y %then %do;
19003 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19004 +      %end;
19005 +      ;
19006 +      if missing(percentCorrect) then delete;
19007 +      drop target;
19008 +    run;
19010 +    /* build profittext */
19011 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19012 +      data tempprofittext(keep= node profittext profitloss);
19013 +        length profittext $800 profitloss 8.;
19014 +        retain profittext profitloss;
19016 +        merge tempprob
19017 +        %if &em_profitflag ne 0 %then %do;
19018 +          tempprofit
19019 +        %end;
19020 +        %else %if &em_lossflag ne 0 %then %do;
19021 +          temploss
19022 +        %end;
19023 +        ;
19024 +        by node category;
19026 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19027 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19028 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19029 +          %let profittype = ALL;
19030 +        %end;
19032 +        /* create the profitloss variable for nodecolor if selected */
19033 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19035 +        %if "&profittype" eq "ALL" %then %do;
19036 +          if strip(CATEGORY)="&targetEvent" then do;
19037 +            profitloss=statvalue;
19038 +          end;
19039 +          if first.node then do;
19040 +            %if &validFlag eq N %then %do;
19041 +             %if &em_profitflag ne 0 %then %do;
19042 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19043 +             %end;
19044 +             %if &em_lossflag ne 0 %then %do;
19045 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19046 +             %end;
19047 +            %end;
19048 +            %else %do;
19049 +             %if &em_profitflag ne 0 %then %do;
19050 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19050!+;
19051 +             %end;
19052 +             %if &em_lossflag ne 0 %then %do;
19053 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19054 +             %end;
19055 +            %end;
19056 +          end;
19057 +          else if last.node then do;
19058 +            %if &validFlag eq N %then %do;
19059 +             %if &em_profitflag ne 0 %then %do;
19060 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19061 +             %end;
19062 +             %if &em_lossflag ne 0 %then %do;
19063 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19064 +             %end;
19065 +             /*if CATEGORY="&targetEvent" then do;
19066 +               profitloss=statvalue;
19067 +             end;*/
19068 +            %end;
19069 +            %else %do;
19070 +             %if &em_profitflag ne 0 %then %do;
19071 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19071!+14.&EM_PROPERTY_SPLITPRECISION);
19072 +                if CATEGORY="&targetEvent" then do;
19073 +                 profitloss=ALTERNATIVE_PROFIT;
19074 +                end;
19075 +             %end;
19076 +             %if &em_lossflag ne 0 %then %do;
19077 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19077!+14.&EM_PROPERTY_SPLITPRECISION);
19078 +                if CATEGORY="&targetEvent" then do;
19079 +                  profitloss=ALTERNATIVE_LOSS;
19080 +                end;
19081 +             %end;
19082 +            %end;
19083 +            output;
19084 +          end;
19085 +          else do;
19086 +            %if &validFlag eq N %then %do;
19087 +             %if &em_profitflag ne 0 %then %do;
19088 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19089 +             %end;
19090 +             %if &em_lossflag ne 0 %then %do;
19091 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19092 +             %end;
19093 +            %end;
19094 +            %else %do;
19095 +             %if &em_profitflag ne 0 %then %do;
19096 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19096!+14.&EM_PROPERTY_SPLITPRECISION);
19097 +             %end;
19098 +             %if &em_lossflag ne 0 %then %do;
19099 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19099!+14.&EM_PROPERTY_SPLITPRECISION);
19100 +             %end;
19101 +            %end;
19102 +          end;
19103 +        %end;
19104 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19105 +          if strip(CATEGORY) = "&targetevent" then do;
19106 +            %if &validFlag eq N %then %do;
19107 +             %if &em_profitflag ne 0 %then %do;
19108 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19109 +             %end;
19110 +             %if &em_lossflag ne 0 %then %do;
19111 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19112 +             %end;
19113 +             profitloss=statvalue;
19114 +            %end;
19115 +            %else %do;
19116 +             %if &em_profitflag ne 0 %then %do;
19117 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19117!+;
19118 +                profitloss=ALTERNATIVE_PROFIT;
19119 +             %end;
19120 +             %if &em_lossflag ne 0 %then %do;
19121 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19122 +                profitloss=ALTERNATIVE_LOSS;
19123 +             %end;
19124 +            %end;
19125 +            output;
19126 +          end;
19127 +        %end;
19128 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19129 +          if strip(CATEGORY) = "&targetevent" then do;
19130 +            %if &validFlag eq N %then %do;
19131 +             profitloss=statvalue;
19132 +            %end;
19133 +            %else %do;
19134 +             %if &em_profitflag ne 0 %then %do;
19135 +                profitloss=ALTERNATIVE_PROFIT;
19136 +             %end;
19137 +             %if &em_lossflag ne 0 %then %do;
19138 +                profitloss=ALTERNATIVE_LOSS;
19139 +             %end;
19140 +            %end;
19141 +            output;
19142 +          end;
19143 +        %end;
19144 +      run;
19145 +    %end;
19147 +    data tempprob(keep= node probtext);
19148 +      length probtext $800;
19149 +      retain probtext;
19150 +      set tempprob ;
19151 +      by node;
19153 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19154 +      %let probtype = &EM_PROPERTY_TARGET;
19155 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19156 +        %let probtype = ALL;
19157 +      %end;
19159 +      %if "&probtype" eq "ALL" %then %do;
19160 +        if first.node then do;
19161 +          %if &validFlag eq N %then %do;
19162 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19163 +          %end;
19164 +          %else %do;
19165 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19166 +          %end;
19167 +        end;
19168 +        else if last.node then do;
19169 +          %if &validFlag eq N %then %do;
19170 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19171 +          %end;
19172 +          %else %do;
19173 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19174 +          %end;
19175 +          output;
19176 +        end;
19177 +        else do;
19178 +          %if &validFlag eq N %then %do;
19179 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19180 +          %end;
19181 +          %else %do;
19182 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19183 +          %end;
19184 +        end;
19185 +      %end;
19186 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19187 +        if strip(CATEGORY) = "&targetevent" then do;
19188 +          %if &validFlag eq N %then %do;
19189 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19190 +          %end;
19191 +          %else %do;
19192 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19193 +          %end;
19194 +          output;
19195 +        end;
19196 +      %end;
19197 +      %else %if "&probtype" eq "NONE" %then %do;
19198 +        if last.node then do;
19199 +          output;
19200 +        end;
19201 +      %end;
19202 +    run;
19203 +  %end;
19205 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19207 +  %let oldexists=0;
19208 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19209 +     data old_tree_plot;
19210 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19211 +        rename nodecolor=oldnodecolor;
19212 +     run;
19214 +     proc sort data=old_tree_plot;
19215 +        by node;
19216 +     run;
19218 +     %let oldexists=1;
19219 +  %end;
19221 +  data &EM_USER_TREE_PLOT;
19222 +    length textall $800;
19223 +    merge tempoutnodes temptargetused
19225 +    %if &em_intTarget eq Y %then %do;
19226 +      tempinterval
19227 +    %end;
19229 +    %if &em_classTarget eq Y %then %do;
19231 +      %if &validFlag eq N %then %do;
19232 +        tempn(rename=(statvalue=N))
19233 +      %end;
19234 +      %else %do;
19235 +        tempn
19236 +      %end;
19238 +      temppredict tempprob
19240 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19241 +        tempprofittext
19242 +      %end;
19243 +    %end;
19244 +    ;
19245 +    by node;
19247 +    /* build nodetext based on user selection */
19248 +    textall="";
19250 +    %if &em_intTarget eq Y %then %do;
19251 +    if tarlevel="INTERVAL" then do;
19252 +      /* Nodeid */
19253 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19254 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19255 +      %end;
19257 +      /* Target identifier if multiple targets are used */
19258 +      %if "&multipleTar" eq "Y" %then %do;
19259 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19260 +      %end;
19262 +      %if &validFlag eq Y %then %do;
19263 +         /* Column labels displayed in validflag eq Y only */
19264 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19265 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19265!+noquote ))";
19266 +         %end;
19268 +         /* Average values */
19269 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19270 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19271 +         %end;
19273 +         /* RASE */
19274 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19275 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19276 +         %end;
19278 +         /* Count */
19279 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19280 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19281 +         %end;
19282 +      %end;
19283 +      %else %do;
19284 +         /* Average values */
19285 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19286 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19287 +         %end;
19289 +         /* RASE */
19290 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19291 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19292 +         %end;
19294 +         /* Count */
19295 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19296 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19297 +         %end;
19298 +      %end;
19300 +      /* nodecolor */
19301 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19302 +        nodecolor=PREDICTION;
19303 +      %end;
19304 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19305 +        nodecolor=RASE;
19306 +      %end;
19307 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19308 +        nodecolor=1;
19309 +      %end;
19311 +    end;
19312 +    %end;
19313 +    %if &em_classTarget eq Y %then %do;
19314 +    if tarlevel^="INTERVAL" then  do;
19316 +      /* Nodeid */
19317 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19318 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19319 +      %end;
19320 +      /* Target identifier if multiple targets are used */
19321 +      %if "&multipleTar" eq "Y" %then %do;
19322 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19323 +      %end;
19325 +      /* Predicted values */
19326 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19327 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19328 +      %end;
19330 +      /* Column labels displayed in validflag eq Y only */
19331 +      %if "&ValidFlag" eq "Y" %then %do;
19332 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19333 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19333!+noquote ))";
19334 +        %end;
19335 +      %end;
19337 +      /* Target Values */
19338 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19339 +        textall=strip(textall)||"0A"x||strip(probtext);
19340 +      %end;
19342 +      /* include profit or loss for all target levels */
19343 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19344 +        textall=strip(textall)||"0A"x||strip(profittext);
19345 +      %end;
19347 +      %if &validFlag eq N %then %do;
19348 +        /* Percent Correct */
19349 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19350 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19351 +        %end;
19353 +         /* Count */
19354 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19355 +          %if "&adjusted" eq "N" %then %do;
19356 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19357 +          %end;
19358 +          %else %do;
19359 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19360 +          %end;
19361 +         %end;
19362 +      %end;
19363 +      %else %do;
19364 +        /* Percent Correct */
19365 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19366 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19367 +        %end;
19369 +         /* Count */
19370 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19371 +          %if "&adjusted" eq "N" %then %do;
19372 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19373 +          %end;
19374 +          %else %do;
19375 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19376 +          %end;
19377 +         %end;
19378 +      %end;
19380 +      /* nodecolor */
19381 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19382 +       %if &multipleTar ne Y %then %do;
19383 +        nodecolor=&predTarget;
19384 +       %end;
19385 +       %else %do;
19386 +         nodecolor=percentcorrect;
19387 +       %end;
19388 +      %end;
19389 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19390 +        nodecolor=percentcorrect;
19391 +      %end;
19392 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19393 +        nodecolor=1;
19394 +      %end;
19395 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19396 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19397 +          nodecolor=percentcorrect;
19398 +        %end;
19399 +        %else %do;
19400 +          nodecolor=profitloss;
19401 +        %end;
19402 +      %end;
19404 +    end;
19405 +    %end;
19406 +    %if &em_intTarget eq Y %then %do;
19407 +     drop  PREDICTION  TARGET TARLEVEL
19408 +     %if &ValidFlag eq Y %then %do;
19409 +         VPREDICTION
19410 +     %end;
19411 +     ;
19412 +    %end;
19413 +    %if &em_classTarget eq Y %then %do;
19414 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19415 +     %if &ValidFlag eq Y %then %do;
19416 +         VSTATVALUE
19417 +     %end;
19418 +     ;
19419 +    %end;
19421 +  run;
19423 +  /* add leaf index information to plotds - based on primary target only*/
19424 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19425 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19426 +      set &EM_USER_OUTSTATS;
19427 +      if ((statname="PROBABILITY"
19428 +      %if &validexist %then %do;
19429 +       or statname="VALID: PROBABILITY"
19430 +      %end;
19431 +      ) AND (CATEGORY="&TARGETEVENT")
19432 +      %if "&multipleTar" eq "Y" %then %do;
19433 +        AND (Target="%EM_TARGET")
19434 +      %end;
19435 +      );
19436 +    run;
19438 +    %if &validexist %then %do;
19439 +      proc sort data=tempprob; by node; run;
19440 +      %let vpredTarget = V%substr(&predTarget, 2);
19441 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19442 +         by node;
19443 +         id statname;
19444 +      run;
19445 +    %end;
19446 +  %end;
19447 +  %else %do;
19448 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19449 +      set &EM_USER_OUTSTATS;
19450 +      if ((statname="PREDICTION"
19451 +      %if &validexist %then %do;
19452 +       or statname="VALID: PREDICTION"
19453 +      %end;
19454 +      )
19455 +      %if "&multipleTar" eq "Y" %then %do;
19456 +        AND (Target="%EM_TARGET")
19457 +      %end;
19458 +      );
19459 +    run;
19460 +    %if &validexist %then %do;
19461 +      proc sort data=tempprob; by node; run;
19462 +      %let vpredTarget = V%substr(&predTarget, 2);
19463 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19464 +         by node;
19465 +         id statname;
19466 +      run;
19467 +    %end;
19468 +  %end;
19470 +  proc sort data=tempprob; by node; run;
19471 +  data tempoutnodes;
19472 +    merge tempoutnodes tempprob;
19473 +    by node;
19474 +  run;
19476 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19477 +  data tempnodes;
19478 +    retain traintotal validtotal;
19479 +    set tempnodes(where=(leaf ne . ));
19480 +    tprob=round(&predTarget, .01);
19481 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19482 +      percevent_train=round(tprob*100, .01);
19483 +    %end;
19484 +    %else %do;
19485 +      percevent_train=tprob;
19486 +    %end;
19488 +    perc_train=round((n/traintotal)*100, 0.01);
19489 +    /* leafwidth already has a *10 multiplier */
19490 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19492 +    %if &validexist %then %do;
19493 +      %let vpredTarget = V%substr(&predTarget,2);
19494 +      vprob=round(&vpredTarget, .01);
19495 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19496 +        percevent_valid=round(vprob*100, .01);
19497 +      %end;
19498 +      %else %do;
19499 +        percevent_valid=vprob;
19500 +      %end;
19501 +      perc_valid=round((vn/validtotal)*100, .01);
19502 +    %end;
19504 +    index=_N_;
19505 +    keep node index tprob perc_train percevent_train
19506 +    %if &validexist %then %do;
19507 +        vprob percevent_valid perc_valid
19508 +    %end;
19509 +    ;
19510 +  run;
19511 +  proc sort data=tempnodes; by node; run;
19512 +  data &EM_USER_TREE_PLOT;
19513 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19514 +    by node;
19515 +    if missing(node) then delete;
19516 +    %if &oldexists %then %do;
19517 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19518 +      drop oldnodecolor;
19519 +    %end;
19520 +    abovetext = compbl(abovetext);
19522 +    /* add variable labels */
19523 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19524 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19525 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19526 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19527 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19528 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19530 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19531 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19532 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19533 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19534 +          %end;
19535 +          %else %do;
19536 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19537 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19538 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19539 +          %end;
19540 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19542 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19543 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19544 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19545 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19546 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19547 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19548 +          %end;
19549 +          %else %do;
19550 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19551 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19552 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19553 +          %end;
19554 +    ;
19555 +  run;
19557 +  /* delete temporary tables */
19558 +  proc datasets lib=work nolist;
19559 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19560 +  run;
19562 +%mend em_tree_makePlotDs;
19566 +%macro em_tree_report;
19568 +   /* report properties */
19569 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19570 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19571 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19572 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19573 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19574 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19575 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19576 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19577 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19578 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19579 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19580 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19581 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19583 +   %let validexist=0;
19584 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19585 +     %let validexist=1;
19586 +   %end;
19588 +   /* determine if multiple targets will be processed */
19589 +   %let em_tree_multipleTargets=N;
19590 +   %let em_tree_numTarget=1;
19591 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19592 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19593 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19594 +         %let em_tree_multipleTargets=N;
19595 +      %end;
19596 +      %else %do;
19597 +        data _null_;
19598 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19599 +          if eof then
19600 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19601 +        run;
19603 +        %if &em_tree_numTarget gt 1 %then %do;
19604 +           %let em_tree_multipleTargets=Y;
19605 +        %end;
19606 +     %end;
19607 +   %end;
19609 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19611 +   /* variable importance */
19612 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19613 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19615 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19616 +     /* and the columns may not be generated                                                                                 */
19617 +     %let em_tree_cvexists=;
19618 +     %let em_tree_surrexists=.;
19619 +     data _null_;
19620 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19621 +       if eof then do ;
19622 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19623 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19624 +       end;
19625 +     run;
19627 +     data &EM_USER_OUTIMPORT;
19628 +         set &EM_USER_OUTIMPORT;
19629 +         /* format columns based on Precison value specified */
19630 +         format importance 15.&EM_PROPERTY_PRECISION
19631 +              %if &validexist %then %do;
19632 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19633 +              %end;
19634 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19635 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19636 +              %end;
19637 +         ;
19638 +     run;
19640 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19641 +     proc print data=&EM_USER_OUTIMPORT
19642 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19643 +          (where=((nrules>0) OR (nsurrogates>0)))
19644 +        %end;
19645 +        %else %do;
19646 +           (where=(nrules>0))
19647 +        %end;
19648 +        label noobs
19649 +        ;
19650 +     run;
19651 +     title10;
19653 +   %end;
19655 +   /* Sequence */
19656 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19657 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19658 +   data _null_ ;
19659 +      set &EM_USER_outseq (obs=2) end=eof ;
19660 +      if eof then do ;
19661 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19662 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19663 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19664 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19665 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19666 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19667 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19668 +      end;
19669 +    run;
19671 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19672 +      data &EM_USER_OUTSEQ;
19673 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19674 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19675 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19676 +           _XMISC_=_VMISC_
19677 +        %end;
19678 +        %if "&em_tree_aprof" ne "."  %then %do;
19679 +           _XAPROF_=_VAPROF_
19680 +           _XPROF_ = _VPROF_
19681 +        %end;
19682 +        %if "&em_tree_aloss" ne "."  %then %do;
19683 +           _XALOSS_=_VALOSS_
19684 +        %end;
19685 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19686 +           _XPASE_ = _VPASE_
19687 +           _XPMISC_ = _VPMISC_
19688 +        %end;
19690 +        ));
19691 +     %end;
19692 +     %else %do;
19693 +        set &EM_USER_OUTSEQ;
19694 +     %end;
19696 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19697 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19698 +            _MISC_   15.&EM_PROPERTY_PRECISION
19699 +         %end;
19700 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19701 +            _PASE_  15.&EM_PROPERTY_PRECISION
19702 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19703 +         %end;
19704 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19705 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19706 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19707 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19708 +            %end;
19709 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19710 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19711 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19712 +            %end;
19713 +         %end;
19714 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19715 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19716 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19717 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19718 +            %end;
19719 +         %end;
19720 +         %if "&em_tree_seq" ne "." %then %do;
19721 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19722 +         %end;
19723 +         %if "&em_tree_vseq" ne "." %then %do;
19724 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19725 +         %end;
19726 +         %if "&em_tree_aprof" ne "." %then %do;
19727 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19728 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19729 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19730 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19731 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19732 +           %end;
19733 +         %end;
19734 +         %else %if "&em_tree_aloss" ne "." %then %do;
19735 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19736 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19737 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19738 +           %end;
19739 +         %end;
19740 +      ;
19741 +    run;
19742 +   %end;
19744 +   /* Observation Based Importance */
19745 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19747 +      /* need to check for 0 obs */
19748 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19749 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19750 +      %let rc=%sysfunc(close(&dsid));
19752 +      %if &onobs %then %do;
19753 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19754 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19756 +         data &EM_USER_OUTOBSIMP;
19757 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19758 +           if _a;
19759 +           by _INPUT1_;
19760 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19761 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19762 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19763 +                   %end;
19764 +                   ;
19765 +         run;
19766 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19767 +      %end;
19768 +   %end;
19770 +  %end;
19772 +  /* create dataset to support tree diagram and icicle plot */
19773 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19774 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19776 +  /* display tree diagram */
19777 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19778 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19780 +  /* display icicle diagram */
19781 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19782 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19784 +  /* Leaf Statistics Plot */
19785 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19787 +  /* print leaf information to output window */
19788 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19790 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19791 +       by descending N;
19792 +     run;
19794 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19795 +     %local vn;
19796 +     data _null_;
19797 +       set t (obs=2) end=eof;
19798 +       if eof then do;
19799 +         call symput("vn", strip(put(vn, best.)));
19800 +       end;
19801 +     run;
19803 +     data t;
19804 +       set t;
19805 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19806 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19807 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19808 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19809 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19810 +       %end;
19811 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19812 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19813 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19814 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19815 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19816 +          %end;
19817 +       %end;
19818 +       ;
19819 +     run;
19821 +     /* determine if rase is found in t */
19822 +    %let dsid=%sysfunc(open(t,i));
19823 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19824 +    %let rc=%sysfunc(close(&dsid));
19826 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19827 +     proc print data=t noobs label;
19828 +       where tprob ne .;
19829 +       var node depth N tprob
19830 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19831 +         %if "&vn" ne "." %then %do;
19832 +           VN
19833 +         %end;
19834 +         vprob
19835 +       %end;
19836 +       %if &raseexists %then %do;
19837 +            RASE
19838 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19839 +              VRASE
19840 +            %end;
19841 +       %end;
19842 +       ;
19843 +     run;
19844 +     title10;
19845 +  %end;
19847 +  /* create plots that are done during training of node */
19848 +  /* display iterative plot, including reference line */
19849 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19850 +   /* %if &nleaves eq  %then %do; */
19851 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19852 +      data _null_;
19853 +        set &EM_USER_OUTTOPOLOGY end=eof;
19854 +        if eof then do;
19855 +          call symput('nleaves', LEAF);
19856 +        end;
19857 +      run;
19858 +   /* %end; */
19860 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19861 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19862 +  %end;
19864 +  /* display leaf statistics */
19865 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19867 +  /* stats by node if multiple targets = Y */
19868 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19869 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19870 +    data &EM_USER_OUTSTATS;
19871 +      set &EM_USER_OUTSTATS;
19873 +     * if STATNAME="TARGET" then delete;
19874 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19875 +      drop leaf;
19876 +    run;
19877 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19879 +  %end;
19880 +  %else %do;
19881 +    /* add outstats and outdescribe to spk but not results */
19882 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19883 +  %end;
19885 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE3_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 32 observations read from the data set EMWS1.TREE3_OUTSEQ.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 32 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 23 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 23 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 27 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 225 observations read from the data set EMWS1.TREE3_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 8 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 8 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 28 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 8 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 28 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 28 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 28 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE3_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 196 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 196 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 196 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 168 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 28 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 196 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 196 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 196 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 28 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 196 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 196 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 196 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 196 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 56 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 28 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 56 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 56 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 28 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPPROB.
NOTE: There were 56 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 56 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 56 observations read from the data set WORK.TEMPPROB.
NOTE: There were 28 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 28 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 28 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 28 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 28 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 28 observations read from the data set WORK.TEMPN.
NOTE: There were 28 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 28 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE3_TREE_PLOT has 28 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 196 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 56 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 56 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 28 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 28 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 28 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 28 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 28 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 20 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 20 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set EMWS1.TREE3_TREE_PLOT.
NOTE: There were 20 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE3_TREE_PLOT has 28 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 28 observations read from the data set EMWS1.TREE3_TREE_PLOT.
NOTE: The data set WORK.T has 28 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 28 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 28 observations read from the data set EMWS1.TREE3_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19886
19887  *------------------------------------------------------------*;
19888  * End REPORT: Tree3;
19889  *------------------------------------------------------------*;
 
19890  /* Reset EM Options */
19891  options formchar="|----|+|---+=|-/\<>*";
19892  options nocenter ls=256 ps=10000;
19893  goptions reset=all device=GIF NODISPLAY;
 
19894  proc sort data=WORK.EM_USER_REPORT;
19895  by ID VIEW;
19896  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19897  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19898  by NAME;
19899  run;
 
NOTE: There were 14 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19900  proc sort data=EMWS1.Tree3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19901  by NAME;
19902  run;
 
NOTE: There were 14 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19903  data WORK.ASSESS_META;
19904  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19905  by NAME;
19906  run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19907  data EM_temp_assessMeta;
19908  set EMWS1.Tree3_CMeta_TRAIN;
19909  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19910  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19911  data EM_temp_assessdata;
19912  set EMWS1.Tree3_TRAIN(keep=
19913  F_TargetBuy
19914  I_TargetBuy
19915  P_TargetBuy0
19916  P_TargetBuy1
19917  Q_TargetBuy0
19918  Q_TargetBuy1
19919  R_TargetBuy0
19920  R_TargetBuy1
19921  U_TargetBuy
19922  V_TargetBuy0
19923  V_TargetBuy1
19924  _WARN_
19925  TargetBuy
19926  );
19927  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 8889 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 8889 observations read from the data set EMWS1.TREE3_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 8889 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24212   data EM_temp_assessMeta;
24213   set EMWS1.Tree3_CMeta_TRAIN;
24214   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24215   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24216   data EM_temp_assessdata;
24217   set EMWS1.Tree3_VALIDATE(keep=
24218   F_TargetBuy
24219   I_TargetBuy
24220   P_TargetBuy0
24221   P_TargetBuy1
24222   Q_TargetBuy0
24223   Q_TargetBuy1
24224   R_TargetBuy0
24225   R_TargetBuy1
24226   U_TargetBuy
24227   V_TargetBuy0
24228   V_TargetBuy1
24229   _WARN_
24230   TargetBuy
24231   );
24232   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 6667 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 6667 observations read from the data set EMWS1.TREE3_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 6667 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28526   %let _cn = %sysfunc(getoption(CENTER));
28527   options nocenter;
28528   proc print data=EMWS1.Tree3_EMREPORTFIT noobs label;
28529   var STAT LABEL TRAIN
28530   VALIDATE
28531   TEST
28532   ;
28533   by TARGET TARGETLABEL;
28534   title9 ' ';
28535   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28536   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28537   title10;
28538   options &_cn;
 
28539   proc sort data=EMWS1.Tree3_EMCLASSIFICATION nothreads;
28540   by DATAROLE TARGET TARGETLABEL;
28541   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE3_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28542   %let _cn = %sysfunc(getoption(CENTER));
28543   options nocenter;
28544   proc print data=EMWS1.Tree3_EMCLASSIFICATION noobs label;
28545   var from into pct_row pct_col count percent
28546   ;
28547   by DATAROLE TARGET TARGETLABEL;
28548   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28549   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28550   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28551   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28552   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28553   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28554   where _TYPE_='PREDICTION';
28555   title9 ' ';
28556   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28557   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28558   title9;
28559   title10;
28560   options &_cn;
 
28561   %let _cn = %sysfunc(getoption(CENTER));
28562   options nocenter;
28563   data EMWS1.Tree3_EMEVENTREPORT;
28564   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28564 !  8;
28565   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28565 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28565 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28565 ! FALSEEVENT
28566   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28566 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28566 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28567      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28568   FALSEEVENT=0;
28569   FALSENEVENT=0;
28570   TRUEEVENT=0;
28571   TRUENEVENT=0;
28572   set EMWS1.Tree3_EMEVENTREPORT;
28573   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE3_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28574   proc print data=EMWS1.Tree3_EMEVENTREPORT noobs label;
28575   title9 ' ';
28576   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28577   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28578   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28579   title10;
28580   options &_cn;
 
28581   proc datasets library=EMWS1 nolist;
28582   modify Tree3_EMRANK;
28583   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28584   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28585   run;
 
NOTE: MODIFY was successful for EMWS1.TREE3_EMRANK.DATA.
28586   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28587   %let _cn = %sysfunc(getoption(CENTER));
28588   options nocenter;
28589   proc print data=EMWS1.Tree3_EMRANK label noobs;
28590   var
28591   decile gain lift liftc resp respc N _meanP_;
28592   by
28593   notsorted DATAROLE
28594   notsorted TARGET
28595   notsorted TARGETLABEL
28596   ;
28597   title9 ' ';
28598   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28599   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE3_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28600   title10;
28601   options &_cn;
 
28602   proc datasets library=EMWS1 nolist;
28603   modify Tree3_EMSCOREDIST;
28604   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28605   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28606   run;
 
NOTE: MODIFY was successful for EMWS1.TREE3_EMSCOREDIST.DATA.
28607   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
