*------------------------------------------------------------*
User:                Intern Three
Date:                March 26, 2016
Time:                23:46:17
Site:                70085778
Platform:            X64_7HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                March 26, 2016
Time:                23:46:03
*------------------------------------------------------------*
14716  proc freq data=EMWS1.Tree5_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.Tree5META;
14718  run;
 
NOTE: There were 14 observations read from the data set EMWS1.TREE5_VARIABLESET.
NOTE: The data set WORK.TREE5META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14719  proc print data=WORK.Tree5META label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 7 observations read from the data set WORK.TREE5META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14755  data WORK.Tree5_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14756  length ORDER $20;
14757  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14758     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14759  set EMWS1.IDS2_TARGETBUY_DM( where=(_TYPE_="TARGET"));
14760  NumLevels=2;
14761  select(upcase(ORDER));
14762  when('DESC') ORDER = 'Descending';
14763  when('ASC') ORDER = 'Ascending';
14764  when('FMTDESC') ORDER = 'Formatted Descending';
14765  when('FMTASC') ORDER = 'Formatted Ascending';
14766  otherwise ORDER = 'Descending';
14767  end;
14768  output;
14769  run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE5_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14770  title9 ' ';
14771  proc print data=WORK.Tree5_EVENT noobs label;
14772  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14773  title9 ' ';
14774  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14775  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE5_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14776  title10;
 
"No decisions defined for target "TargetBuy"."
14777  proc print data = EMWS1.Ids2_TargetBuy_DM noobs label;
14778  var _type_ variable label;
14779  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14780  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14781  title9 ' ';
14782  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14783  run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14784  title10;
 
14785  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15323  *------------------------------------------------------------*;
15324  * Tree5: Generation of macros and macro variables;
15325  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15326  *------------------------------------------------------------*;
 
15327  %let EMEXCEPTIONSTRING=;
15328  *------------------------------------------------------------*;
15329  * TRAIN: Tree5;
15330  *------------------------------------------------------------*;
15331  %let EM_ACTION = TRAIN;
15332  %let syscc = 0;
15333  %macro main;
15334
15335    %if %upcase(&EM_ACTION) = CREATE %then %do;
15336      filename temp catalog 'sashelp.emmodl.tree_create.source';
15337      %include temp;
15338      filename temp;
15339
15340      %em_tree_create;
15341    %end;
15342
15343     %else
15344     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15345
15346         filename temp catalog 'sashelp.emmodl.tree_train.source';
15347         %include temp;
15348         filename temp;
15349         %em_tree_train;
15350     %end;
15351
15352    %else
15353    %if %upcase(&EM_ACTION) = SCORE %then %do;
15354      filename temp catalog 'sashelp.emmodl.tree_score.source';
15355      %include temp;
15356      filename temp;
15357
15358      %em_tree_score;
15359
15360    %end;
15361
15362    %else
15363    %if %upcase(&EM_ACTION) = REPORT %then %do;
15364
15365         filename temp catalog 'sashelp.emmodl.tree_report.source';
15366         %include temp;
15367         filename temp;
15368
15369         %em_tree_report;
15370     %end;
15371
15372    %else
15373    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15374
15375         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15376         %include temp;
15377         filename temp;
15378         %EM_TREE_OPENTREEVIEWER;
15379
15380     %end;
15381
15382    %else
15383    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15384
15385         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15386         %include temp;
15387         filename temp;
15388         %EM_TREE_CLOSETREEVIEWER;
15389
15390     %end;
15391
15392
15393     %doendm:
15394  %mend main;
15395
15396  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15398 +%macro em_tree_train;
15400 +   %if &EM_IMPORT_DATA eq %then %do;
15401 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15402 +       %put &em_codebar;
15403 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15404 +       %put &errormsg;
15405 +       %put &em_codebar;
15406 +       %goto doendm;
15407 +   %end;
15408 +   %else
15409 +       %let EMEXCEPTIONSTRING =;
15411 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15412 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15413 +        %put &em_codebar;
15414 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15415 +        %put &errormsg;
15416 +        %put &em_codebar;
15417 +        %goto doendm;
15418 +   %end;
15420 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15421 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15422 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15423 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15424 +        %put &em_codebar;
15425 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15426 +        %put &errormsg;
15427 +        %put &em_codebar;
15428 +        %goto doendm;
15429 +   %end;
15431 +   /* Initialize property macro variables */
15432 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15433 +   %include temp;
15434 +   filename temp;
15436 +   %EM_SetProperties;
15438 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15439 +   %EM_GETNAME(key=EMTREE, type=DATA);
15440 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15441 +     /* if import eq Y and no importtable defined, throw an exception */
15442 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15443 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15444 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15445 +         %put &em_codebar;
15446 +         %put &errmsg;
15447 +         %put &em_codebar;
15448 +         %goto doendm;
15449 +      %end;
15450 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15451 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15452 +         %put &em_codebar;
15453 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15454 +         %put &errormsg;
15455 +         %put &em_codebar;
15456 +         %goto doendm;
15457 +      %end;
15458 +      %else %do;
15459 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15460 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15461 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15462 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15463 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15464 +         %let dsid = %sysfunc(close(&dsid));
15465 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15466 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15467 +            %put &em_codebar;
15468 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15469 +            %put &errormsg;
15470 +            %put &em_codebar;
15471 +            %goto doendm;
15472 +         %end;
15473 +      %end;
15474 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15475 +         proc delete data=&EM_USER_EMTREE;
15476 +         run;
15477 +      %end;
15478 +   %end;
15479 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15480 +      proc delete data=&EM_USER_EMTREE;
15481 +      run;
15482 +   %end;
15484 +   /* load tree macros */
15485 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15486 +   %include temp;
15487 +   filename temp;
15489 +   /* data sets */
15490 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15491 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15492 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15494 +   /* files */
15495 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15497 +   /* check actual num of target levels */
15498 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15499 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15500 +                              nLevel=_nTargetLevel );
15501 +      %if &_nTargetLevel  > 2 %then %do;
15502 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15503 +        %put &em_codebar;
15504 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15505 +        %put &errormsg;
15506 +        %put &em_codebar;
15507 +        %goto doendm;
15508 +      %end;
15509 +   %end;
15511 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15512 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15513 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15514 +        %let costflag=0;
15515 +        data _null_;
15516 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15517 +          if eof then call symput("costflag", _N_);
15518 +        run;
15519 +        %if &costflag gt 0 %then %do;
15520 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15521 +          %put &em_codebar;
15522 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15523 +          %put &errormsg;
15524 +          %put &em_codebar;
15525 +          %goto doendm;
15526 +       %end;
15527 +     %end;
15528 +   %end;
15530 +   /* determine if multiple targets will be processed */
15531 +   %let em_tree_multipleTargets=N;
15532 +   %let em_tree_numTarget = 1;
15533 +   %let em_tree_targetVars=;
15535 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15536 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15537 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15538 +         %let em_tree_multipleTargets=N;
15539 +      %end;
15540 +      %else %do;
15541 +         /* create macro array of targets  */
15542 +         data _null_;
15543 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15544 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15545 +           if eof then
15546 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15547 +        run;
15549 +        %if &em_tree_numTarget gt 1 %then %do;
15550 +           %let em_tree_multipleTargets=Y;
15551 +        %end;
15552 +      %end;
15553 +   %end;
15555 +   /* create view of only necessary variable for performance reasons */
15556 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15557 +   data &tempData / view=&tempData;
15558 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15559 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15560 +       %EM_TARGET
15561 +     %end;
15562 +     %else %do;
15563 +       %if &em_tree_numTarget ne 0 %then %do;
15564 +         %do i=1 %to &em_tree_numTarget;
15565 +            &&em_tree_targetVars&i
15566 +         %end;
15567 +       %end;
15568 +     %end;
15569 +     );
15570 +   run;
15572 +   /* run Tree procedure */
15573 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15575 +   /* Check return code and throw exception if error is detected */
15576 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15577 +   %if &syserr %then %do;
15578 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15579 +     %goto doendm;
15580 +   %end;
15582 +   /* add decision score code if multiple targets are processed */
15583 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15584 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15585 +   %end;
15587 +   /* create outfit dataset if multiple score statements have been executed */
15588 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15590 +   /* create English Rules */
15591 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15592 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15593 +       %em_tree_makeEnglishRules;
15595 +       /* English Rules */
15596 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15598 +     %end;
15599 +   filename x;
15601 +   %doendm:
15602 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15603 +%macro EM_SetProperties;
15605 +   /* train properties */
15606 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15648 +   /* properties for interactive sample */
15649 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15654 +   /* report properties */
15655 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15660 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15669 +   /* score properties */
15670 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15673 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE5_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15675 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15676 +  %global &nLevel;
15677 +  proc dmdb batch data=&indata
15678 +    classout=_tmp_dmdbout;
15679 +    class &target;
15680 +  run;
15681 +  data _tmp_dmdbout;
15682 +    set _tmp_dmdbout;
15683 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15684 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15685 +  run;
15686 +  data _null_;
15687 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15688 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15689 +    %let dsid = %sysfunc(close(&dsid));
15690 +     call symput("&nLevel", put(&_obs, Best12.));
15691 +  run;
15693 +  proc datasets lib=work nolist;
15694 +     delete _tmp_dmdbout;
15695 +  run;
15696 +  quit;
15697 +%Mend EM_CheckBinaryTargetLevel;
15700 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15702 +  /* determine the number of obs in training data */
15703 +  proc sql;
15704 +    reset noprint;
15705 +    select count(*) into :em_nobs from &indata;
15706 +  quit;
15708 +  /* determine the number of input variables */
15709 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15710 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15712 +  /* retrieve targetEvent from decmeta */
15713 +  %let targetEvent=;
15714 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15715 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15716 +      data _null_;
15717 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15718 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15719 +      run;
15720 +    %end;
15721 +  %end;
15723 +  /* create targetTable if multipleTar eq Y */
15724 +  data temptarget;
15725 +    set &EM_DATA_VARIABLESET;
15726 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15727 +  run;
15729 + /* data sets */
15730 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15731 + %EM_GETNAME(key=EMTREE,        type=DATA);
15732 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15733 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15734 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15735 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15736 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15737 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15738 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15739 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15741 + /* files */
15742 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15743 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15745 + /* turn on pmml if requested */
15746 + %let nnpmml=0;
15747 + %if %symexist(EM_PMML) %then %do;
15748 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15749 +       %let nnpmml=1;
15751 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15752 +%end;
15754 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15756 + %if &nnpmml or &numClassTarget %then %do;
15758 +       /* create dmdb needed for pmml generation */
15759 +       %let tree_maxlevel = 512;
15760 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15761 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15762 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15763 +         %end;
15764 +       %end;
15765 +       %if &tree_maxlevel gt 0 %then %do;
15766 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15767 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15768 +       %end;
15770 +       %let targetOrderString =;
15771 +       %let targetString = ;
15772 +       data _null_;
15773 +          length orderString nameString $10000;
15774 +          retain orderString nameString;
15775 +          set &em_data_variableset end=eof;
15776 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15777 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15778 +          %end;
15779 +          %else %do;
15780 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15781 +          %end;          select(order);
15782 +            when('')        order ='DESC';
15783 +            when('FMTASC')  order='ASCFMT';
15784 +            when('FMTDESC') order='DESFMT';
15785 +            otherwise;
15786 +          end;
15787 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15788 +          nameString = trim(nameString)!!' '!!trim(NAME);
15790 +          if eof then do;
15791 +             call symput('targetOrderString', trim(orderString));
15792 +             call symput('targetString', trim(nameString));
15793 +          end;
15794 +       run;
15796 +       %let arborkluge= "work._treeDMDB";
15798 +       proc dmdb batch data=&indata
15799 +       %if &nnpmml %then %do;
15800 +           PMML
15801 +       %end;
15802 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15805 +   %if &nnpmml %then %do;
15806 +        %if "%EM_ID" ne "" %then %do;
15807 +          id %EM_ID;
15808 +        %end;
15809 +        %if &EM_NUM_CLASS gt 0 %then %do;
15810 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15811 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15812 +               &targetOrderString;
15813 +        %end;
15814 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15815 +          var %EM_INTERVAL;
15816 +        %end;
15817 +        target &targetString %EM_INTERVAL_TARGET;
15818 +        %if "%EM_FREQ" ne "" %then %do;
15819 +          freq %EM_FREQ;
15820 +        %end;
15821 +  %end;
15822 +  %else %do;
15823 +      class  &targetOrderString;
15824 +      target &targetString %EM_INTERVAL_TARGET;
15825 +  %end;
15826 +       run;
15827 +       quit;
15829 +       proc datasets lib=work nolist;
15830 +          delete classout varout;
15831 +       run;
15832 +       quit;
15834 +    %end;
15835 + %end;
15837 + /* run Arbor procedure */
15838 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15839 +  proc arbor data=&INDATA
15841 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15842 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15843 +  %end;
15845 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15846 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15847 +  %end;
15849 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15850 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15851 +  %end;
15853 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15854 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15855 +  %end;
15857 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15858 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15859 +  %end;
15861 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15862 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15863 +  %end;
15864 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15865 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15866 +  %end;
15867 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15868 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15869 +  %end;
15871 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15872 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15873 +      alpha = &EM_PROPERTY_SIGLEVEL
15874 +    %end;
15875 +  %end;
15877 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15878 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15879 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15880 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15881 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15883 +        padjust =
15884 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15885 +          &chaid
15886 +        %end;
15887 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15888 +          DEPTH
15889 +        %end;
15890 +      %end;
15891 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15892 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15893 +         pvars = &num_inputs
15894 +      %end;
15895 +    %end;
15896 +  %end;
15897 +  %else %do;
15898 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15899 +         padjust = NONE
15900 +      %end;
15901 +  %end;
15903 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15904 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15905 +    Maxrules = &num_nrules
15906 +  %end;
15908 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15909 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15910 +    Maxsurrs = &num_nsurrs
15911 +  %end;
15913 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15914 +     Missing=&EM_PROPERTY_MISSINGVALUE
15915 +  %end;
15917 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15918 +     USEVARONCE
15919 +  %end;
15921 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15922 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15923 +  %end;
15926 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15927 +    event = "&targetEvent"
15928 +  %end;
15930 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15931 +     DECSEARCH
15932 +  %end;
15934 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15935 +     PRIORSSEARCH
15936 +  %end;
15938 +  %if &arbor_1 ne %then %do;
15939 +    &arbor_1
15940 +  %end;
15942 +  %if &em_arbor ne %then %do;
15943 +     &em_arbor
15944 +  %end;
15945 +  ;
15946 + %end;
15947 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15948 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15949 +       interact;
15950 + %end;
15951 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15952 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15953 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15954 +    %put &em_codebar;
15955 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15956 +    %put &errormsg;
15957 +    %put &em_codebar;
15958 +    %goto doendm;
15959 +   %end;
15960 +   %else %do;
15961 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15962 +       interact;
15963 +   %end;
15964 + %end;
15966 + %else %do;
15967 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15968 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15969 +    %put &em_codebar;
15970 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15971 +    %put &errormsg;
15972 +    %put &em_codebar;
15973 +    %goto doendm;
15974 +   %end;
15975 +   %else %do;
15976 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15977 +        interact;
15978 +   %end;
15979 + %end;
15981 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15982 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15983 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15984 +    %end;
15986 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15987 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15988 +    %end;
15990 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15991 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15992 +    %end;
15994 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15995 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15996 +    %end;
15998 +    %if "%EM_FREQ" ne "" %then %do;
15999 +       freq %EM_FREQ;
16000 +    %end;
16002 +    %if "&multipleTar" eq "Y" %then %do;
16003 +       /* cycle through all target vars in variableset */
16004 +       %let tdsid = %sysfunc(open(temptarget));
16005 +       %if &tdsid %then %do;
16006 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16007 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16008 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16009 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16010 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16011 +             target &var / level = &lvl
16012 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16013 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16014 +             %end;
16015 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16016 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16017 +             %end;
16018 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16019 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16020 +             %end;
16021 +          %end;
16022 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16023 +       %end;
16024 +       useTarget variable = %EM_TARGET;
16025 +    %end;
16026 +    %else %do;
16027 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16028 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16029 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16030 +      %end;
16031 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16032 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16033 +      %end;
16034 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16035 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16036 +      %end;
16037 +    %end;
16039 +    %if "&multipleTar" eq "N" %then %do;
16040 +      &EM_DEC_STATEMENT;
16041 +    %end;
16043 +    Performance &EM_PROPERTY_PERFORMANCE
16044 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16045 +      nodesize=&EM_PROPERTY_NODESAMPLE
16046 +    %end;
16047 +    ;
16049 +    %if "&intFlag" eq "Y" %then %do;
16050 +       INTERACT Largest;
16051 +       Train maxnewdepth=0;
16052 +    %end;
16054 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16055 +         Assess
16056 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16057 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16058 +              %put &em_codebar;
16059 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16060 +              %put &errormsg;
16061 +              %put &em_codebar;
16062 +            %end;
16063 +            %else %do;
16064 +               Validata=&EM_IMPORT_VALIDATE
16065 +            %end;
16066 +         %end;
16067 +         %else %do;
16068 +           NoValidata
16069 +         %end;
16070 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16071 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16072 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16073 +               %if &dsid %then %do;
16074 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16075 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16076 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16077 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16078 +                   %else %do;
16079 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16080 +                      %else %let measure= MISC;
16081 +                   %end;
16082 +                 %end;
16083 +               %end;
16084 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16085 +            %end;
16086 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16087 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16088 +                 %let measure=ASE;
16089 +              %end;
16090 +              %else %do;
16091 +                 %let measure=MISC;
16092 +              %end;
16093 +            %end;
16094 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16095 +              %let measure=ASE;
16096 +            %end;
16097 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16098 +               %let measure = LIFT;
16099 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16100 +               %if &dsid %then %do;
16101 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16102 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16103 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16104 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16105 +                 %end;
16106 +               %end;
16107 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16108 +            %end;
16109 +            measure=&measure
16110 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16111 +               event = "&targetEvent"
16112 +            %end;
16113 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16114 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16115 +            %end;
16116 +         %end;
16117 +         %if "&multipleTar" eq "N" %then %do;
16118 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16119 +               CV
16120 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16121 +                 CVNITer = &EM_PROPERTY_CVNITER
16122 +               %end;
16123 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16124 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16125 +               %end;
16126 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16127 +                 CVSeed = &EM_PROPERTY_CVSEED
16128 +               %end;
16129 +            %end;
16130 +         %end;
16131 +       %end;
16132 +      ;
16134 +      %if "&intFlag" ne "Y" %then %do;
16135 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16136 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16137 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16138 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16140 +          SUBTREE &subtree
16141 +          %if "&subtree" eq "NLEAVES" %then %do;
16142 +            =&EM_PROPERTY_NSUBTREE
16143 +          %end;
16144 +          ;
16145 +        %end;
16147 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16148 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16149 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16150 +          %end;
16151 +       %end;
16152 +      %end;
16153 + %end;
16156 + MakeMacro nleaves = nleaves;
16157 + save
16158 + %if "&EM_USER_EMTREE" ne "" %then %do;
16159 +   MODEL=&EM_USER_EMTREE
16160 + %end;
16161 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16162 +   SEQUENCE=&EM_USER_OUTSEQ
16163 + %end;
16164 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16165 +   IMPORTANCE=&EM_USER_OUTIMPORT
16166 + %end;
16167 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16168 +   NODESTAT=&EM_USER_OUTNODES
16169 + %end;
16170 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16171 +   SUMMARY=&EM_USER_OUTSUMMARY
16172 + %end;
16173 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16174 +   STATSBYNODE=&EM_USER_OUTSTATS
16175 + %end;
16176 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16177 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16178 + %end;
16179 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16180 +   Pathlistnonmissing=&EM_USER_OUTPATH
16181 + %end;
16182 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16183 +   RULES = &EM_USER_OUTRULES
16184 + %end;
16185 + ;
16187 + %if "&intFlag" ne "Y" %then %do;
16189 +   %let lookupString = ;
16190 +   %if ^%symexist(EM_OPTION) %then
16191 +      %let EM_OPTION=;
16193 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16194 +      %let lookupString = LOOKUP=SELECT;
16195 +   %end;
16197 +   %let codetext=;
16198 +   %let norescodetxt=;
16200 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16201 +     %let codetext=&codetext DUMMY;
16202 +     %let norescodetxt=&norescodetxt DUMMY;
16203 +   %end;
16204 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16205 +     %let codetext=&codetext NOLEAFID;
16206 +     %let norescodetxt=&norescodetxt NOLEAFID;
16207 +   %end;
16208 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16209 +     %let norescodetxt=&norescodetxt NOPRED;
16210 +   %end;
16212 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16213 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16215 +   %if &nnpmml %then %do;
16216 +     code pmml;
16217 +   %end;
16219 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16220 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16221 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16222 +   %end;
16223 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16224 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16225 +   %end;
16226 + %end;
16228 + run;
16229 + quit;
16231 + /*%em_checkerror(); */
16232 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16233 +   /* Delete DMDB catalog */
16234 +   proc datasets lib=work nolist;
16235 +       delete _treeDMDB / mt=cat;
16236 +  run;
16237 +  %end;
16239 + %if &nnpmml %then %do;
16240 +    ods pmml close;
16241 + %end;
16243 +  %doendm:
16245 +%mend em_tree_runTreeProcedure;
16247 +%macro em_tree_createFitStats( multipleTar= );
16250 +  /* create targetTable is multipleTar eq Y */
16251 +  data temptarget;
16252 +    set &EM_DATA_VARIABLESET;
16253 +    where ROLE="TARGET";
16254 +  run;
16256 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16257 +   data &EM_USER_EMOUTFIT;
16258 +     length target $32;
16259 +     merge work.fit_train
16260 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16261 +       work.fit_valid
16262 +     %end;
16263 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16264 +       work.fit_test
16265 +     %end;
16266 +     ;
16267 +     %if "&multipleTar" eq "N" %then %do;
16268 +       target="%EM_TARGET";
16269 +     %end;
16270 +     %else %do;
16271 +       target = _TARGET_;
16272 +     %end;
16273 +     drop _NW_ _SUMW_
16274 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16275 +        _VSUMW_
16276 +     %end;
16277 +     ;
16278 +   run;
16280 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16281 +     proc datasets library=work nolist;
16282 +       delete fit_valid;
16283 +     run;
16284 +   %end;
16285 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16286 +     proc datasets library=work nolist;
16287 +       delete fit_test;
16288 +     run;
16289 +   %end;
16291 +%mend em_tree_createFitStats;
16294 +%macro em_tree_makeEnglishRules;
16296 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16297 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16299 +  /* verify that necessary tables exist and if not, skip processing */
16300 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16301 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16302 +    %goto doendm;
16303 +  %end;
16304 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16305 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16306 +    %goto doendm;
16307 +  %end;
16309 +  /* determine length of variable in outpath dataset */
16310 +  %let vlength= ;
16311 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16312 +  %if &dsid ne %then %do;
16313 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16314 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16315 +  %end;
16316 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16318 +  data tempoutpath;
16319 +    length varname $&vlength;
16320 +    retain varname;
16321 +    set &EM_USER_OUTPATH;
16323 +    if ^missing(variable) then varname=variable;
16324 +    else if ^missing(var_name) then varname=var_name;
16325 +    output;
16326 +  run;
16328 +  /* create an array of generated predicted variable names */
16329 +  %let tree_pred_vars = ;
16330 +  %let tree_pred_label = ;
16331 +  %let numpred= 0;
16332 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16334 +    data _null_;
16335 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16336 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16337 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16338 +     if eof then
16339 +       call symput('numpred', strip(put(_N_, BEST.)));
16340 +    run;
16341 +  %end;
16343 +  /* determine if NPRIORS exists in outnodes  */
16344 +  %local nprior_flag;
16345 +  data _null_;
16346 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16347 +    if eof then do;
16348 +      call symput('nprior_flag', strip(put(npriors, best.)));
16349 +    end;
16350 +  run;
16352 +  proc sort data=tempoutpath; by node; run;
16353 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16355 +  data tempoutpath;
16356 +    merge tempoutpath(in=_a) outnodes(keep= node
16357 +    %if "&nprior_flag" ne "." %then %do;
16358 +      NPRIORS
16359 +    %end;
16360 +    %else %do;
16361 +      N
16362 +    %end;
16363 +    %if &numpred gt 0 %then %do;
16364 +      %do i=1 %to &numpred;
16365 +        &&tree_pred_vars&i
16366 +      %end;
16367 +    %end;
16368 +    );
16369 +    by node;
16370 +    if _a;
16371 +  run;
16373 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16375 +  data _null_;
16376 +    file x;
16377 +    set tempoutpath;
16378 +    by node descending varname;
16379 +    retain origvar oldnode string;
16380 +    length origvar $32 oldnode 8 string $200;
16382 +    if _N_ = 1 then do;
16383 +      origvar = varname;
16384 +      oldnode = node;
16385 +    end;
16387 +    if first.node then do;
16388 +       put "&EM_CODEBAR";
16389 +       put " Node = " node;
16390 +       put "&EM_CODEBAR";
16391 +    end;
16393 +      if first.varname then do;
16394 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16395 +            if MISSING(CHARACTER_VALUE) then do;
16396 +             if NUMERIC_VALUE ne .  then do;
16397 +              if ^first.node then do;
16398 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16399 +              end;
16400 +              else do;
16401 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16402 +              end;
16403 +             end;
16404 +            end;
16405 +            else do;
16406 +              if ^first.node then do;
16407 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16408 +              end;
16409 +              else do;
16410 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16411 +              end;
16412 +             end;
16413 +         end;
16414 +         else if RELATION in ("=") then do;
16415 +            if ^first.node then do;
16416 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16417 +            end;
16418 +            else do;
16419 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16420 +            end;
16421 +         end;
16422 +         else if RELATION in ("ISMISSING") then do;
16423 +            if ^first.node then do;
16424 +              string = " AND "|| strip(varname) || " equals Missing";
16425 +            end;
16426 +            else do;
16427 +              string = "if "|| strip(varname) ||" equals Missing";
16428 +            end;
16429 +         end;
16430 +         else if RELATION in ("ISNOTMISSING") then do;
16431 +            if ^first.node then do;
16432 +              string = " AND "|| strip(varname) || " equals All Values";
16433 +            end;
16434 +            else do;
16435 +              string = "if "|| strip(varname) ||" equals All Values";
16436 +            end;
16437 +         end;
16438 +         if ^missing(varname) then origvar = varname;
16439 +         oldnode=node;
16441 +      end;
16442 +      else do;
16443 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16444 +          if MISSING(CHARACTER_VALUE) then do;
16445 +           if  NUMERIC_VALUE ne .  then do;
16446 +            if ^MISSING(string) then
16447 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16448 +            else
16449 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16450 +           end;
16451 +          end;
16452 +          else do;
16453 +            if ^MISSING(string) then
16454 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16455 +            else
16456 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16457 +          end;
16459 +         end;
16460 +         else if RELATION in ("=") then do;
16461 +           string = strip(string)||", "||strip(character_value);
16462 +         end;
16463 +         else if RELATION in ("ISMISSING") then do;
16465 +         end;
16466 +         if ^missing(varname) then origvar = varname;
16467 +         oldnode=node;
16468 +      end;
16469 +      if last.varname then do;
16470 +         if RELATION in ("ISMISSING") then do;
16471 +           if ^first.varname then do;
16472 +             string = strip(string) || " or MISSING";
16473 +           end;
16474 +         end;
16475 +         put string;
16476 +         if ^missing(varname) then origvar = varname;
16477 +         oldnode=node;
16478 +      end;
16480 +      if last.node then do;
16481 +         put "then ";
16482 +         put " Tree Node Identifier   = " node;
16484 +         %if "&nprior_flag" ne "." %then %do;
16485 +           put " Number of Observations = " NPRIORS;
16486 +         %end;
16487 +         %else %do;
16488 +           put " Number of Observations = " N;
16489 +         %end;
16491 +         %if &numpred gt 0 %then %do;
16492 +           %do i=1 %to &numpred;
16493 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16494 +           %end;
16495 +         %end;
16497 +         put " ";
16498 +         if ^missing(varname) then origvar = varname;
16499 +         oldnode=node;
16500 +      end;
16502 +  run;
16504 +  proc datasets lib=work nolist;
16505 +    delete tempoutpath outnodes;
16506 +  run;
16508 +  %doendm:
16509 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 8889   Memory used = 511K.
NOTE: There were 8889 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE5.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.EM_TREE5.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
NOTE: There were 8889 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE5_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE5_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 8889   Memory used = 511K.
NOTE: View EMWS1.EM_TREE5.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.04 seconds
 
NOTE: There were 8889 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 8889 observations read from the data set EMWS1.EM_TREE5.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.18 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596892 kilobytes of physical memory.
NOTE: Will use 8889 out of 8889 training cases.
NOTE: Using memory pool with 159328256 bytes.
NOTE: Passed training data 9 times.
NOTE: Training used 2285560 bytes of work memory.
NOTE: The subtree sequence contains 32 subtrees. The largest has 53 nodes and 35 leaves.
NOTE: Using subtree with 28 nodes and 20 leaves.
NOTE: Using subtree with 28 nodes and 20 leaves.
NOTE: Created macro variable NLEAVES equal to 20.
NOTE: The data set EMWS1.TREE5_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS1.TREE5_EMTREE has 1121 observations and 4 variables.
NOTE: The data set EMWS1.TREE5_OUTNODES has 28 observations and 24 variables.
NOTE: The data set EMWS1.TREE5_OUTPATH has 102 observations and 7 variables.
NOTE: The data set EMWS1.TREE5_OUTRULES has 225 observations and 6 variables.
NOTE: The data set EMWS1.TREE5_OUTSEQ has 32 observations and 20 variables.
NOTE: The data set EMWS1.TREE5_OUTSTATS has 196 observations and 5 variables.
NOTE: The data set EMWS1.TREE5_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE5_OUTTOPOLOGY has 28 observations and 5 variables.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\TREEFLOW.sas opened.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS1.EM_TREE5.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 8889 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
 
 
NOTE: View EMWS1.EM_TREE5.VIEW used (Total process time):
      real time           0.61 seconds
      cpu time            0.60 seconds
 
NOTE: There were 8889 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 8889 observations read from the data set EMWS1.EM_TREE5.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.62 seconds
      cpu time            0.62 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE5_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE5_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 102 observations read from the data set EMWS1.TREE5_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 102 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE5_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 102 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 102 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set EMWS1.TREE5_OUTNODES.
NOTE: The data set WORK.OUTNODES has 28 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 102 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 28 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 102 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 102 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 102 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=26Mar2016:23:46:07,
      Create Time=26Mar2016:16:50:59
 
NOTE: 228 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 102 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16511
16512  *------------------------------------------------------------*;
16513  * End TRAIN: Tree5;
16514  *------------------------------------------------------------*;
 
16515  *------------------------------------------------------------*;
16516  * Close any missing semi colons;
16517  *------------------------------------------------------------*;
16518  ;
16519  ;
16520  ;
16521  ;
16522  quit;
16523  *------------------------------------------------------------*;
16524  * Close any unbalanced quotes;
16525  *------------------------------------------------------------*;
16526  /*; *"; *'; */
16527  ;
16528  run;
16529  quit;
16530  /* Reset EM Options */
16531  options formchar="|----|+|---+=|-/\<>*";
16532  options nocenter ls=256 ps=10000;
16533  goptions reset=all device=GIF NODISPLAY;
 
16534  proc sort data=WORK.EM_USER_REPORT;
16535  by ID VIEW;
16536  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                March 26, 2016
Time:                23:46:08
*------------------------------------------------------------*
16638  %let EMEXCEPTIONSTRING=;
16639  *------------------------------------------------------------*;
16640  * SCORE: Tree5;
16641  *------------------------------------------------------------*;
16642  %let EM_ACTION = SCORE;
16643  %let syscc = 0;
16644  %macro main;
16645
16646    %if %upcase(&EM_ACTION) = CREATE %then %do;
16647      filename temp catalog 'sashelp.emmodl.tree_create.source';
16648      %include temp;
16649      filename temp;
16650
16651      %em_tree_create;
16652    %end;
16653
16654     %else
16655     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16656
16657         filename temp catalog 'sashelp.emmodl.tree_train.source';
16658         %include temp;
16659         filename temp;
16660         %em_tree_train;
16661     %end;
16662
16663    %else
16664    %if %upcase(&EM_ACTION) = SCORE %then %do;
16665      filename temp catalog 'sashelp.emmodl.tree_score.source';
16666      %include temp;
16667      filename temp;
16668
16669      %em_tree_score;
16670
16671    %end;
16672
16673    %else
16674    %if %upcase(&EM_ACTION) = REPORT %then %do;
16675
16676         filename temp catalog 'sashelp.emmodl.tree_report.source';
16677         %include temp;
16678         filename temp;
16679
16680         %em_tree_report;
16681     %end;
16682
16683    %else
16684    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16685
16686         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16687         %include temp;
16688         filename temp;
16689         %EM_TREE_OPENTREEVIEWER;
16690
16691     %end;
16692
16693    %else
16694    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16695
16696         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16697         %include temp;
16698         filename temp;
16699         %EM_TREE_CLOSETREEVIEWER;
16700
16701     %end;
16702
16703
16704     %doendm:
16705  %mend main;
16706
16707  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16709 +%macro em_tree_score;
16711 +   /* determine if multiple targets will be processed */
16712 +   %let em_tree_multipleTargets=N;
16713 +   %let em_tree_numTarget=1;
16714 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16715 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16716 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16717 +         %let em_tree_multipleTargets=N;
16718 +      %end;
16719 +      %else %do;
16720 +         /* create macro array of targets  */
16721 +         data _null_;
16722 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16723 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16724 +           if eof then
16725 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16726 +        run;
16728 +        %if &em_tree_numTarget gt 1 %then %do;
16729 +           %let em_tree_multipleTargets=Y;
16730 +        %end;
16731 +      %end;
16732 +   %end;
16734 +   /* build flow and publish scoring code */
16735 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16736 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16738 +   filename treeflow "&EM_USER_TREEFLOW";
16739 +   filename treepub "&EM_USER_TREEPUBLISH";
16741 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16742 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16744 +   %em_copyfile(infref=treeflow, outfref=flowref);
16745 +   %em_copyfile(infref=treepub, outfref=pubref);
16747 +   filename treeflow;
16748 +   filename treepub;
16750 +   /* if priors are used, add code to generate unadjusted residuals in export */
16751 +   %let useAdjPriors = N;
16752 +   data _null_;
16753 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16754 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16755 +   run;
16756 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16757 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16758 +      %include temp;
16759 +      filename temp;
16761 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16762 +      filename adjref "&EM_USER_adjResidualCode";
16763 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16765 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16767 +      filename adjref;
16768 +   %end;
16770 +   /* LEAF */
16771 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16772 +      data _null_;
16773 +        file flowref mod;
16774 +        put 'drop _LEAF_;';
16775 +      run;
16777 +      data _null_;
16778 +        file pubref mod;
16779 +        put 'drop _LEAF_;';
16780 +      run;
16782 +   %end;
16784 +   filename flowref;
16785 +   filename pubref;
16787 +   /* em_metachange code */
16788 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16789 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16790 +   %end;
16792 +   /* variable selection based on importance stat    */
16793 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16794 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16795 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16796 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16797 +     %let obs = %sysfunc(fetch(&dsid));
16798 +     %do %while(&obs=0);
16799 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16800 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16801 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16802 +       %let obs = %sysfunc(fetch(&dsid));
16803 +     %end;
16804 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16805 +   %end;
16807 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16808 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16809 +    %let tree_pred_vars = ;
16810 +    %let tree_pred_lvl =;
16811 +    %let numpred= 0;
16813 +    data _null_;
16814 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16815 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16816 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16817 +     if eof then
16818 +       call symput('numpred', strip(put(_N_, BEST.)));
16819 +    run;
16820 +   %end;
16822 +   %if &numpred ne 0 %then %do;
16823 +    %do i=1 %to &numpred;
16824 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16825 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16826 +    %end;
16827 +   %end;
16829 +   /* determine if multiple targets will be processed */
16830 +   %let em_tree_multipleTargets=N;
16831 +   %let em_tree_numTarget=1;
16832 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16833 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16834 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16835 +         %let em_tree_multipleTargets=N;
16836 +      %end;
16837 +      %else %do;
16838 +        data _null_;
16839 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16840 +          if eof then
16841 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16842 +        run;
16844 +        %if &em_tree_numTarget gt 1 %then %do;
16845 +           %let em_tree_multipleTargets=Y;
16846 +        %end;
16847 +     %end;
16848 +   %end;
16850 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16851 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16853 +      /* variable importance */
16854 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16855 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16857 +         %let validexist=0;
16858 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16859 +           %let validexist=1;
16860 +         %end;
16862 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16863 +         /* and the columns may not be generated                                                                                 */
16864 +         %let em_tree_cvexists=;
16865 +         %let em_tree_surrexists=.;
16866 +         data _null_;
16867 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16868 +            if eof then do ;
16869 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16870 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16871 +            end;
16872 +         run;
16874 +         data &EM_USER_OUTIMPORT;
16875 +            set &EM_USER_OUTIMPORT;
16877 +            /* format columns based on Precison value specified */
16878 +            format importance 15.&EM_PROPERTY_PRECISION
16879 +                 %if &validexist %then %do;
16880 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16881 +                 %end;
16882 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16883 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16884 +                 %end;
16885 +            ;
16886 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16887 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16888 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16889 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16890 +                 %if "&em_tree_surrexists" ne "" %then %do;
16891 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16892 +                 %end;
16893 +                 %if &validexist %then %do;
16894 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16895 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16896 +                 %end;
16897 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16898 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16899 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16900 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16901 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16902 +                 %end;
16903 +            ;
16904 +         run;
16906 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16907 +      %end;
16908 +   %end;
16910 +   %doendm:
16911 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=26Mar2016:23:46:08,
      Create Time=18Mar2016:20:21:26
 
NOTE: 336 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=26Mar2016:23:46:08,
      Create Time=18Mar2016:20:21:26
 
NOTE: 314 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12372,
      Last Modified=26Mar2016:23:46:08,
      Create Time=18Mar2016:20:21:26
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11699,
      Last Modified=26Mar2016:23:46:08,
      Create Time=18Mar2016:20:21:26
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE5_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS1.TREE5_OUTIMPORT.
NOTE: The data set EMWS1.TREE5_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
16912
16913  *------------------------------------------------------------*;
16914  * End SCORE: Tree5;
16915  *------------------------------------------------------------*;
 
16916  proc sort data=WORK.EM_METACHANGE;
16917  by key uname;
16918  run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16919  filename x "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\CDELTA_TRAIN.sas";
16920  data _null_;
16921  file x;
16922  put 'if upcase(NAME) = "DEMCLUSTERGROUP" then do;';
16923  put 'ROLE = "REJECTED";';
16924  put 'end;';
16925  put 'else ';
16926  put 'if upcase(NAME) = "DEMREG" then do;';
16927  put 'ROLE = "REJECTED";';
16928  put 'end;';
16929  put 'else ';
16930  put 'if upcase(NAME) = "DEMTVREG" then do;';
16931  put 'ROLE = "REJECTED";';
16932  put 'end;';
16933  put 'else ';
16934  put 'if upcase(NAME) = "PROMCLASS" then do;';
16935  put 'ROLE = "REJECTED";';
16936  put 'end;';
16937  put 'else ';
16938  put 'if upcase(NAME) = "PROMSPEND" then do;';
16939  put 'ROLE = "REJECTED";';
16940  put 'end;';
16941  put 'else ';
16942  put 'if upcase(NAME) = "PROMTIME" then do;';
16943  put 'ROLE = "REJECTED";';
16944  put 'end;';
16945  put 'else ';
16946  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
16947  put 'ROLE = "ASSESS";';
16948  put 'end;';
16949  put 'else ';
16950  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
16951  put 'ROLE = "ASSESS";';
16952  put 'end;';
16953  put 'else ';
16954  put 'if upcase(NAME) = "_NODE_" then do;';
16955  put 'ROLE = "SEGMENT";';
16956  put 'LEVEL = "NOMINAL";';
16957  put 'end;';
16958  run;
 
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=26Mar2016:23:46:09,
      Create Time=18Mar2016:20:21:26
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
16959  filename x;
NOTE: Fileref X has been deassigned.
 
16960  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas";
16961  *------------------------------------------------------------*;
16962  * Tree5: Scoring DATA data;
16963  *------------------------------------------------------------*;
16964  data EMWS1.Tree5_TRAIN
16965  / view=EMWS1.Tree5_TRAIN
16966  ;
16967  set EMWS1.Part_TRAIN
16968  ;
16969  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas.
16970 +****************************************************************;
16971 +******             DECISION TREE SCORING CODE             ******;
16972 +****************************************************************;
16973 +
16974 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16975 +LENGTH F_TargetBuy  $   12;
16976 +LENGTH I_TargetBuy  $   12;
16977 +LENGTH _WARN_  $    4;
16978 +
16979 +******              LABELS FOR NEW VARIABLES              ******;
16980 +label _NODE_ = 'Node' ;
16981 +label _LEAF_ = 'Leaf' ;
16982 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
16983 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
16984 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
16985 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
16986 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
16987 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
16988 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
16989 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
16990 +label F_TargetBuy = 'From: TargetBuy' ;
16991 +label I_TargetBuy = 'Into: TargetBuy' ;
16992 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
16993 +label _WARN_ = 'Warnings' ;
16994 +
16995 +
16996 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16997 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
16998 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
16999 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17000 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17001 +
17002 +
17003 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17004 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17005 +
17006 +******             ASSIGN OBSERVATION TO NODE             ******;
17007 +IF  NOT MISSING(DemAge ) AND
17008 +  DemAge  <                 39.5 THEN DO;
17009 +  IF  NOT MISSING(DemAffl ) AND
17010 +    DemAffl  <                  6.5 THEN DO;
17011 +    _NODE_  =                    6;
17012 +    _LEAF_  =                    1;
17013 +    P_TargetBuy0  =      0.6593886462882;
17014 +    P_TargetBuy1  =     0.34061135371179;
17015 +    Q_TargetBuy0  =      0.6593886462882;
17016 +    Q_TargetBuy1  =     0.34061135371179;
17017 +    V_TargetBuy0  =     0.66009852216748;
17018 +    V_TargetBuy1  =     0.33990147783251;
17019 +    I_TargetBuy  = '0' ;
17020 +    U_TargetBuy  =                    0;
17021 +    END;
17022 +  ELSE IF  NOT MISSING(DemAffl ) AND
17023 +                     6.5 <= DemAffl  AND
17024 +    DemAffl  <                  9.5 THEN DO;
17025 +    _ARBFMT_1 = PUT( DemGender , $1.);
17026 +     %DMNORMIP( _ARBFMT_1);
17027 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17028 +      _NODE_  =                   21;
17029 +      _LEAF_  =                    2;
17030 +      P_TargetBuy0  =     0.38405797101449;
17031 +      P_TargetBuy1  =      0.6159420289855;
17032 +      Q_TargetBuy0  =     0.38405797101449;
17033 +      Q_TargetBuy1  =      0.6159420289855;
17034 +      V_TargetBuy0  =     0.41121495327102;
17035 +      V_TargetBuy1  =     0.58878504672897;
17036 +      I_TargetBuy  = '1' ;
17037 +      U_TargetBuy  =                    1;
17038 +      END;
17039 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17040 +      _NODE_  =                   22;
17041 +      _LEAF_  =                    3;
17042 +      P_TargetBuy0  =     0.58878504672897;
17043 +      P_TargetBuy1  =     0.41121495327102;
17044 +      Q_TargetBuy0  =     0.58878504672897;
17045 +      Q_TargetBuy1  =     0.41121495327102;
17046 +      V_TargetBuy0  =     0.59210526315789;
17047 +      V_TargetBuy1  =      0.4078947368421;
17048 +      I_TargetBuy  = '0' ;
17049 +      U_TargetBuy  =                    0;
17050 +      END;
17051 +    ELSE DO;
17052 +      _NODE_  =                   23;
17053 +      _LEAF_  =                    4;
17054 +      P_TargetBuy0  =     0.81395348837209;
17055 +      P_TargetBuy1  =      0.1860465116279;
17056 +      Q_TargetBuy0  =     0.81395348837209;
17057 +      Q_TargetBuy1  =      0.1860465116279;
17058 +      V_TargetBuy0  =     0.88679245283018;
17059 +      V_TargetBuy1  =     0.11320754716981;
17060 +      I_TargetBuy  = '0' ;
17061 +      U_TargetBuy  =                    0;
17062 +      END;
17063 +    END;
17064 +  ELSE IF  NOT MISSING(DemAffl ) AND
17065 +                    14.5 <= DemAffl  THEN DO;
17066 +    _NODE_  =                    9;
17067 +    _LEAF_  =                    8;
17068 +    P_TargetBuy0  =     0.06521739130434;
17069 +    P_TargetBuy1  =     0.93478260869565;
17070 +    Q_TargetBuy0  =     0.06521739130434;
17071 +    Q_TargetBuy1  =     0.93478260869565;
17072 +    V_TargetBuy0  =     0.03597122302158;
17073 +    V_TargetBuy1  =     0.96402877697841;
17074 +    I_TargetBuy  = '1' ;
17075 +    U_TargetBuy  =                    1;
17076 +    END;
17077 +  ELSE DO;
17078 +    _ARBFMT_1 = PUT( DemGender , $1.);
17079 +     %DMNORMIP( _ARBFMT_1);
17080 +    IF _ARBFMT_1 IN ('M' ) THEN DO;
17081 +      _NODE_  =                   25;
17082 +      _LEAF_  =                    6;
17083 +      P_TargetBuy0  =     0.41666666666666;
17084 +      P_TargetBuy1  =     0.58333333333333;
17085 +      Q_TargetBuy0  =     0.41666666666666;
17086 +      Q_TargetBuy1  =     0.58333333333333;
17087 +      V_TargetBuy0  =     0.55813953488372;
17088 +      V_TargetBuy1  =     0.44186046511627;
17089 +      I_TargetBuy  = '1' ;
17090 +      U_TargetBuy  =                    1;
17091 +      END;
17092 +    ELSE IF _ARBFMT_1 IN ('F' ) THEN DO;
17093 +      _NODE_  =                   26;
17094 +      _LEAF_  =                    7;
17095 +      P_TargetBuy0  =     0.21629213483146;
17096 +      P_TargetBuy1  =     0.78370786516853;
17097 +      Q_TargetBuy0  =     0.21629213483146;
17098 +      Q_TargetBuy1  =     0.78370786516853;
17099 +      V_TargetBuy0  =     0.19636363636363;
17100 +      V_TargetBuy1  =     0.80363636363636;
17101 +      I_TargetBuy  = '1' ;
17102 +      U_TargetBuy  =                    1;
17103 +      END;
17104 +    ELSE DO;
17105 +      _NODE_  =                   24;
17106 +      _LEAF_  =                    5;
17107 +      P_TargetBuy0  =     0.61224489795918;
17108 +      P_TargetBuy1  =     0.38775510204081;
17109 +      Q_TargetBuy0  =     0.61224489795918;
17110 +      Q_TargetBuy1  =     0.38775510204081;
17111 +      V_TargetBuy0  =     0.57894736842105;
17112 +      V_TargetBuy1  =     0.42105263157894;
17113 +      I_TargetBuy  = '0' ;
17114 +      U_TargetBuy  =                    0;
17115 +      END;
17116 +    END;
17117 +  END;
17118 +ELSE IF  NOT MISSING(DemAge ) AND
17119 +                  39.5 <= DemAge  AND
17120 +  DemAge  <                 44.5 THEN DO;
17121 +  IF  NOT MISSING(DemAffl ) AND
17122 +    DemAffl  <                  6.5 THEN DO;
17123 +    _NODE_  =                   10;
17124 +    _LEAF_  =                    9;
17125 +    P_TargetBuy0  =     0.80346820809248;
17126 +    P_TargetBuy1  =     0.19653179190751;
17127 +    Q_TargetBuy0  =     0.80346820809248;
17128 +    Q_TargetBuy1  =     0.19653179190751;
17129 +    V_TargetBuy0  =     0.78030303030303;
17130 +    V_TargetBuy1  =     0.21969696969696;
17131 +    I_TargetBuy  = '0' ;
17132 +    U_TargetBuy  =                    0;
17133 +    END;
17134 +  ELSE IF  NOT MISSING(DemAffl ) AND
17135 +                     6.5 <= DemAffl  AND
17136 +    DemAffl  <                  9.5 THEN DO;
17137 +    _NODE_  =                   11;
17138 +    _LEAF_  =                   10;
17139 +    P_TargetBuy0  =     0.67537313432835;
17140 +    P_TargetBuy1  =     0.32462686567164;
17141 +    Q_TargetBuy0  =     0.67537313432835;
17142 +    Q_TargetBuy1  =     0.32462686567164;
17143 +    V_TargetBuy0  =     0.68556701030927;
17144 +    V_TargetBuy1  =     0.31443298969072;
17145 +    I_TargetBuy  = '0' ;
17146 +    U_TargetBuy  =                    0;
17147 +    END;
17148 +  ELSE IF  NOT MISSING(DemAffl ) AND
17149 +                    11.5 <= DemAffl  THEN DO;
17150 +    _NODE_  =                   13;
17151 +    _LEAF_  =                   13;
17152 +    P_TargetBuy0  =     0.29050279329608;
17153 +    P_TargetBuy1  =     0.70949720670391;
17154 +    Q_TargetBuy0  =     0.29050279329608;
17155 +    Q_TargetBuy1  =     0.70949720670391;
17156 +    V_TargetBuy0  =     0.37007874015748;
17157 +    V_TargetBuy1  =     0.62992125984251;
17158 +    I_TargetBuy  = '1' ;
17159 +    U_TargetBuy  =                    1;
17160 +    END;
17161 +  ELSE DO;
17162 +    _ARBFMT_1 = PUT( DemGender , $1.);
17163 +     %DMNORMIP( _ARBFMT_1);
17164 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17165 +      _NODE_  =                   31;
17166 +      _LEAF_  =                   11;
17167 +      P_TargetBuy0  =     0.45762711864406;
17168 +      P_TargetBuy1  =     0.54237288135593;
17169 +      Q_TargetBuy0  =     0.45762711864406;
17170 +      Q_TargetBuy1  =     0.54237288135593;
17171 +      V_TargetBuy0  =     0.33783783783783;
17172 +      V_TargetBuy1  =     0.66216216216216;
17173 +      I_TargetBuy  = '1' ;
17174 +      U_TargetBuy  =                    1;
17175 +      END;
17176 +    ELSE DO;
17177 +      _NODE_  =                   32;
17178 +      _LEAF_  =                   12;
17179 +      P_TargetBuy0  =     0.71428571428571;
17180 +      P_TargetBuy1  =     0.28571428571428;
17181 +      Q_TargetBuy0  =     0.71428571428571;
17182 +      Q_TargetBuy1  =     0.28571428571428;
17183 +      V_TargetBuy0  =     0.68115942028985;
17184 +      V_TargetBuy1  =     0.31884057971014;
17185 +      I_TargetBuy  = '0' ;
17186 +      U_TargetBuy  =                    0;
17187 +      END;
17188 +    END;
17189 +  END;
17190 +ELSE IF  NOT MISSING(DemAge ) AND
17191 +                  44.5 <= DemAge  AND
17192 +  DemAge  <                 76.5 THEN DO;
17193 +  IF  NOT MISSING(DemAffl ) AND
17194 +    DemAffl  <                  8.5 THEN DO;
17195 +    _NODE_  =                   14;
17196 +    _LEAF_  =                   14;
17197 +    P_TargetBuy0  =     0.91972700682482;
17198 +    P_TargetBuy1  =     0.08027299317517;
17199 +    Q_TargetBuy0  =     0.91972700682482;
17200 +    Q_TargetBuy1  =     0.08027299317517;
17201 +    V_TargetBuy0  =     0.93264481365065;
17202 +    V_TargetBuy1  =     0.06735518634934;
17203 +    I_TargetBuy  = '0' ;
17204 +    U_TargetBuy  =                    0;
17205 +    END;
17206 +  ELSE IF  NOT MISSING(DemAffl ) AND
17207 +                    12.5 <= DemAffl  AND
17208 +    DemAffl  <                 16.5 THEN DO;
17209 +    _NODE_  =                   16;
17210 +    _LEAF_  =                   16;
17211 +    P_TargetBuy0  =     0.63956043956043;
17212 +    P_TargetBuy1  =     0.36043956043956;
17213 +    Q_TargetBuy0  =     0.63956043956043;
17214 +    Q_TargetBuy1  =     0.36043956043956;
17215 +    V_TargetBuy0  =     0.63513513513513;
17216 +    V_TargetBuy1  =     0.36486486486486;
17217 +    I_TargetBuy  = '0' ;
17218 +    U_TargetBuy  =                    0;
17219 +    END;
17220 +  ELSE IF  NOT MISSING(DemAffl ) AND
17221 +                    16.5 <= DemAffl  THEN DO;
17222 +    _NODE_  =                   17;
17223 +    _LEAF_  =                   17;
17224 +    P_TargetBuy0  =     0.22784810126582;
17225 +    P_TargetBuy1  =     0.77215189873417;
17226 +    Q_TargetBuy0  =     0.22784810126582;
17227 +    Q_TargetBuy1  =     0.77215189873417;
17228 +    V_TargetBuy0  =     0.28571428571428;
17229 +    V_TargetBuy1  =     0.71428571428571;
17230 +    I_TargetBuy  = '1' ;
17231 +    U_TargetBuy  =                    1;
17232 +    END;
17233 +  ELSE DO;
17234 +    _NODE_  =                   15;
17235 +    _LEAF_  =                   15;
17236 +    P_TargetBuy0  =     0.82864674868189;
17237 +    P_TargetBuy1  =      0.1713532513181;
17238 +    Q_TargetBuy0  =     0.82864674868189;
17239 +    Q_TargetBuy1  =      0.1713532513181;
17240 +    V_TargetBuy0  =     0.83093525179856;
17241 +    V_TargetBuy1  =     0.16906474820143;
17242 +    I_TargetBuy  = '0' ;
17243 +    U_TargetBuy  =                    0;
17244 +    END;
17245 +  END;
17246 +ELSE DO;
17247 +  IF  NOT MISSING(DemAffl ) AND
17248 +    DemAffl  <                 10.5 THEN DO;
17249 +    _NODE_  =                   18;
17250 +    _LEAF_  =                   18;
17251 +    P_TargetBuy0  =     0.82315112540192;
17252 +    P_TargetBuy1  =     0.17684887459807;
17253 +    Q_TargetBuy0  =     0.82315112540192;
17254 +    Q_TargetBuy1  =     0.17684887459807;
17255 +    V_TargetBuy0  =     0.82857142857142;
17256 +    V_TargetBuy1  =     0.17142857142857;
17257 +    I_TargetBuy  = '0' ;
17258 +    U_TargetBuy  =                    0;
17259 +    END;
17260 +  ELSE IF  NOT MISSING(DemAffl ) AND
17261 +                    13.5 <= DemAffl  THEN DO;
17262 +    _NODE_  =                   20;
17263 +    _LEAF_  =                   20;
17264 +    P_TargetBuy0  =                 0.36;
17265 +    P_TargetBuy1  =                 0.64;
17266 +    Q_TargetBuy0  =                 0.36;
17267 +    Q_TargetBuy1  =                 0.64;
17268 +    V_TargetBuy0  =     0.46511627906976;
17269 +    V_TargetBuy1  =     0.53488372093023;
17270 +    I_TargetBuy  = '1' ;
17271 +    U_TargetBuy  =                    1;
17272 +    END;
17273 +  ELSE DO;
17274 +    _NODE_  =                   19;
17275 +    _LEAF_  =                   19;
17276 +    P_TargetBuy0  =     0.61111111111111;
17277 +    P_TargetBuy1  =     0.38888888888888;
17278 +    Q_TargetBuy0  =     0.61111111111111;
17279 +    Q_TargetBuy1  =     0.38888888888888;
17280 +    V_TargetBuy0  =     0.64596273291925;
17281 +    V_TargetBuy1  =     0.35403726708074;
17282 +    I_TargetBuy  = '0' ;
17283 +    U_TargetBuy  =                    0;
17284 +    END;
17285 +  END;
17286 +
17287 +*****  RESIDUALS R_ *************;
17288 +IF  F_TargetBuy  NE '0'
17289 +AND F_TargetBuy  NE '1'  THEN DO;
17290 +        R_TargetBuy0  = .;
17291 +        R_TargetBuy1  = .;
17292 + END;
17293 + ELSE DO;
17294 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17295 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17296 +       SELECT( F_TargetBuy  );
17297 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17298 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17299 +       END;
17300 + END;
17301 +
17302 +****************************************************************;
17303 +******          END OF DECISION TREE SCORING CODE         ******;
17304 +****************************************************************;
17305 +
17306 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17307  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE5_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17308  quit;
17309  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17310  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas";
17311  *------------------------------------------------------------*;
17312  * Tree5: Scoring VALIDATE data;
17313  *------------------------------------------------------------*;
17314  data EMWS1.Tree5_VALIDATE
17315  / view=EMWS1.Tree5_VALIDATE
17316  ;
17317  set EMWS1.Part_VALIDATE
17318  ;
17319  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas.
17320 +****************************************************************;
17321 +******             DECISION TREE SCORING CODE             ******;
17322 +****************************************************************;
17323 +
17324 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17325 +LENGTH F_TargetBuy  $   12;
17326 +LENGTH I_TargetBuy  $   12;
17327 +LENGTH _WARN_  $    4;
17328 +
17329 +******              LABELS FOR NEW VARIABLES              ******;
17330 +label _NODE_ = 'Node' ;
17331 +label _LEAF_ = 'Leaf' ;
17332 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17333 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17334 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17335 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17336 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17337 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17338 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17339 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17340 +label F_TargetBuy = 'From: TargetBuy' ;
17341 +label I_TargetBuy = 'Into: TargetBuy' ;
17342 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17343 +label _WARN_ = 'Warnings' ;
17344 +
17345 +
17346 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17347 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17348 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17349 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17350 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17351 +
17352 +
17353 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17354 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17355 +
17356 +******             ASSIGN OBSERVATION TO NODE             ******;
17357 +IF  NOT MISSING(DemAge ) AND
17358 +  DemAge  <                 39.5 THEN DO;
17359 +  IF  NOT MISSING(DemAffl ) AND
17360 +    DemAffl  <                  6.5 THEN DO;
17361 +    _NODE_  =                    6;
17362 +    _LEAF_  =                    1;
17363 +    P_TargetBuy0  =      0.6593886462882;
17364 +    P_TargetBuy1  =     0.34061135371179;
17365 +    Q_TargetBuy0  =      0.6593886462882;
17366 +    Q_TargetBuy1  =     0.34061135371179;
17367 +    V_TargetBuy0  =     0.66009852216748;
17368 +    V_TargetBuy1  =     0.33990147783251;
17369 +    I_TargetBuy  = '0' ;
17370 +    U_TargetBuy  =                    0;
17371 +    END;
17372 +  ELSE IF  NOT MISSING(DemAffl ) AND
17373 +                     6.5 <= DemAffl  AND
17374 +    DemAffl  <                  9.5 THEN DO;
17375 +    _ARBFMT_1 = PUT( DemGender , $1.);
17376 +     %DMNORMIP( _ARBFMT_1);
17377 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17378 +      _NODE_  =                   21;
17379 +      _LEAF_  =                    2;
17380 +      P_TargetBuy0  =     0.38405797101449;
17381 +      P_TargetBuy1  =      0.6159420289855;
17382 +      Q_TargetBuy0  =     0.38405797101449;
17383 +      Q_TargetBuy1  =      0.6159420289855;
17384 +      V_TargetBuy0  =     0.41121495327102;
17385 +      V_TargetBuy1  =     0.58878504672897;
17386 +      I_TargetBuy  = '1' ;
17387 +      U_TargetBuy  =                    1;
17388 +      END;
17389 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17390 +      _NODE_  =                   22;
17391 +      _LEAF_  =                    3;
17392 +      P_TargetBuy0  =     0.58878504672897;
17393 +      P_TargetBuy1  =     0.41121495327102;
17394 +      Q_TargetBuy0  =     0.58878504672897;
17395 +      Q_TargetBuy1  =     0.41121495327102;
17396 +      V_TargetBuy0  =     0.59210526315789;
17397 +      V_TargetBuy1  =      0.4078947368421;
17398 +      I_TargetBuy  = '0' ;
17399 +      U_TargetBuy  =                    0;
17400 +      END;
17401 +    ELSE DO;
17402 +      _NODE_  =                   23;
17403 +      _LEAF_  =                    4;
17404 +      P_TargetBuy0  =     0.81395348837209;
17405 +      P_TargetBuy1  =      0.1860465116279;
17406 +      Q_TargetBuy0  =     0.81395348837209;
17407 +      Q_TargetBuy1  =      0.1860465116279;
17408 +      V_TargetBuy0  =     0.88679245283018;
17409 +      V_TargetBuy1  =     0.11320754716981;
17410 +      I_TargetBuy  = '0' ;
17411 +      U_TargetBuy  =                    0;
17412 +      END;
17413 +    END;
17414 +  ELSE IF  NOT MISSING(DemAffl ) AND
17415 +                    14.5 <= DemAffl  THEN DO;
17416 +    _NODE_  =                    9;
17417 +    _LEAF_  =                    8;
17418 +    P_TargetBuy0  =     0.06521739130434;
17419 +    P_TargetBuy1  =     0.93478260869565;
17420 +    Q_TargetBuy0  =     0.06521739130434;
17421 +    Q_TargetBuy1  =     0.93478260869565;
17422 +    V_TargetBuy0  =     0.03597122302158;
17423 +    V_TargetBuy1  =     0.96402877697841;
17424 +    I_TargetBuy  = '1' ;
17425 +    U_TargetBuy  =                    1;
17426 +    END;
17427 +  ELSE DO;
17428 +    _ARBFMT_1 = PUT( DemGender , $1.);
17429 +     %DMNORMIP( _ARBFMT_1);
17430 +    IF _ARBFMT_1 IN ('M' ) THEN DO;
17431 +      _NODE_  =                   25;
17432 +      _LEAF_  =                    6;
17433 +      P_TargetBuy0  =     0.41666666666666;
17434 +      P_TargetBuy1  =     0.58333333333333;
17435 +      Q_TargetBuy0  =     0.41666666666666;
17436 +      Q_TargetBuy1  =     0.58333333333333;
17437 +      V_TargetBuy0  =     0.55813953488372;
17438 +      V_TargetBuy1  =     0.44186046511627;
17439 +      I_TargetBuy  = '1' ;
17440 +      U_TargetBuy  =                    1;
17441 +      END;
17442 +    ELSE IF _ARBFMT_1 IN ('F' ) THEN DO;
17443 +      _NODE_  =                   26;
17444 +      _LEAF_  =                    7;
17445 +      P_TargetBuy0  =     0.21629213483146;
17446 +      P_TargetBuy1  =     0.78370786516853;
17447 +      Q_TargetBuy0  =     0.21629213483146;
17448 +      Q_TargetBuy1  =     0.78370786516853;
17449 +      V_TargetBuy0  =     0.19636363636363;
17450 +      V_TargetBuy1  =     0.80363636363636;
17451 +      I_TargetBuy  = '1' ;
17452 +      U_TargetBuy  =                    1;
17453 +      END;
17454 +    ELSE DO;
17455 +      _NODE_  =                   24;
17456 +      _LEAF_  =                    5;
17457 +      P_TargetBuy0  =     0.61224489795918;
17458 +      P_TargetBuy1  =     0.38775510204081;
17459 +      Q_TargetBuy0  =     0.61224489795918;
17460 +      Q_TargetBuy1  =     0.38775510204081;
17461 +      V_TargetBuy0  =     0.57894736842105;
17462 +      V_TargetBuy1  =     0.42105263157894;
17463 +      I_TargetBuy  = '0' ;
17464 +      U_TargetBuy  =                    0;
17465 +      END;
17466 +    END;
17467 +  END;
17468 +ELSE IF  NOT MISSING(DemAge ) AND
17469 +                  39.5 <= DemAge  AND
17470 +  DemAge  <                 44.5 THEN DO;
17471 +  IF  NOT MISSING(DemAffl ) AND
17472 +    DemAffl  <                  6.5 THEN DO;
17473 +    _NODE_  =                   10;
17474 +    _LEAF_  =                    9;
17475 +    P_TargetBuy0  =     0.80346820809248;
17476 +    P_TargetBuy1  =     0.19653179190751;
17477 +    Q_TargetBuy0  =     0.80346820809248;
17478 +    Q_TargetBuy1  =     0.19653179190751;
17479 +    V_TargetBuy0  =     0.78030303030303;
17480 +    V_TargetBuy1  =     0.21969696969696;
17481 +    I_TargetBuy  = '0' ;
17482 +    U_TargetBuy  =                    0;
17483 +    END;
17484 +  ELSE IF  NOT MISSING(DemAffl ) AND
17485 +                     6.5 <= DemAffl  AND
17486 +    DemAffl  <                  9.5 THEN DO;
17487 +    _NODE_  =                   11;
17488 +    _LEAF_  =                   10;
17489 +    P_TargetBuy0  =     0.67537313432835;
17490 +    P_TargetBuy1  =     0.32462686567164;
17491 +    Q_TargetBuy0  =     0.67537313432835;
17492 +    Q_TargetBuy1  =     0.32462686567164;
17493 +    V_TargetBuy0  =     0.68556701030927;
17494 +    V_TargetBuy1  =     0.31443298969072;
17495 +    I_TargetBuy  = '0' ;
17496 +    U_TargetBuy  =                    0;
17497 +    END;
17498 +  ELSE IF  NOT MISSING(DemAffl ) AND
17499 +                    11.5 <= DemAffl  THEN DO;
17500 +    _NODE_  =                   13;
17501 +    _LEAF_  =                   13;
17502 +    P_TargetBuy0  =     0.29050279329608;
17503 +    P_TargetBuy1  =     0.70949720670391;
17504 +    Q_TargetBuy0  =     0.29050279329608;
17505 +    Q_TargetBuy1  =     0.70949720670391;
17506 +    V_TargetBuy0  =     0.37007874015748;
17507 +    V_TargetBuy1  =     0.62992125984251;
17508 +    I_TargetBuy  = '1' ;
17509 +    U_TargetBuy  =                    1;
17510 +    END;
17511 +  ELSE DO;
17512 +    _ARBFMT_1 = PUT( DemGender , $1.);
17513 +     %DMNORMIP( _ARBFMT_1);
17514 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17515 +      _NODE_  =                   31;
17516 +      _LEAF_  =                   11;
17517 +      P_TargetBuy0  =     0.45762711864406;
17518 +      P_TargetBuy1  =     0.54237288135593;
17519 +      Q_TargetBuy0  =     0.45762711864406;
17520 +      Q_TargetBuy1  =     0.54237288135593;
17521 +      V_TargetBuy0  =     0.33783783783783;
17522 +      V_TargetBuy1  =     0.66216216216216;
17523 +      I_TargetBuy  = '1' ;
17524 +      U_TargetBuy  =                    1;
17525 +      END;
17526 +    ELSE DO;
17527 +      _NODE_  =                   32;
17528 +      _LEAF_  =                   12;
17529 +      P_TargetBuy0  =     0.71428571428571;
17530 +      P_TargetBuy1  =     0.28571428571428;
17531 +      Q_TargetBuy0  =     0.71428571428571;
17532 +      Q_TargetBuy1  =     0.28571428571428;
17533 +      V_TargetBuy0  =     0.68115942028985;
17534 +      V_TargetBuy1  =     0.31884057971014;
17535 +      I_TargetBuy  = '0' ;
17536 +      U_TargetBuy  =                    0;
17537 +      END;
17538 +    END;
17539 +  END;
17540 +ELSE IF  NOT MISSING(DemAge ) AND
17541 +                  44.5 <= DemAge  AND
17542 +  DemAge  <                 76.5 THEN DO;
17543 +  IF  NOT MISSING(DemAffl ) AND
17544 +    DemAffl  <                  8.5 THEN DO;
17545 +    _NODE_  =                   14;
17546 +    _LEAF_  =                   14;
17547 +    P_TargetBuy0  =     0.91972700682482;
17548 +    P_TargetBuy1  =     0.08027299317517;
17549 +    Q_TargetBuy0  =     0.91972700682482;
17550 +    Q_TargetBuy1  =     0.08027299317517;
17551 +    V_TargetBuy0  =     0.93264481365065;
17552 +    V_TargetBuy1  =     0.06735518634934;
17553 +    I_TargetBuy  = '0' ;
17554 +    U_TargetBuy  =                    0;
17555 +    END;
17556 +  ELSE IF  NOT MISSING(DemAffl ) AND
17557 +                    12.5 <= DemAffl  AND
17558 +    DemAffl  <                 16.5 THEN DO;
17559 +    _NODE_  =                   16;
17560 +    _LEAF_  =                   16;
17561 +    P_TargetBuy0  =     0.63956043956043;
17562 +    P_TargetBuy1  =     0.36043956043956;
17563 +    Q_TargetBuy0  =     0.63956043956043;
17564 +    Q_TargetBuy1  =     0.36043956043956;
17565 +    V_TargetBuy0  =     0.63513513513513;
17566 +    V_TargetBuy1  =     0.36486486486486;
17567 +    I_TargetBuy  = '0' ;
17568 +    U_TargetBuy  =                    0;
17569 +    END;
17570 +  ELSE IF  NOT MISSING(DemAffl ) AND
17571 +                    16.5 <= DemAffl  THEN DO;
17572 +    _NODE_  =                   17;
17573 +    _LEAF_  =                   17;
17574 +    P_TargetBuy0  =     0.22784810126582;
17575 +    P_TargetBuy1  =     0.77215189873417;
17576 +    Q_TargetBuy0  =     0.22784810126582;
17577 +    Q_TargetBuy1  =     0.77215189873417;
17578 +    V_TargetBuy0  =     0.28571428571428;
17579 +    V_TargetBuy1  =     0.71428571428571;
17580 +    I_TargetBuy  = '1' ;
17581 +    U_TargetBuy  =                    1;
17582 +    END;
17583 +  ELSE DO;
17584 +    _NODE_  =                   15;
17585 +    _LEAF_  =                   15;
17586 +    P_TargetBuy0  =     0.82864674868189;
17587 +    P_TargetBuy1  =      0.1713532513181;
17588 +    Q_TargetBuy0  =     0.82864674868189;
17589 +    Q_TargetBuy1  =      0.1713532513181;
17590 +    V_TargetBuy0  =     0.83093525179856;
17591 +    V_TargetBuy1  =     0.16906474820143;
17592 +    I_TargetBuy  = '0' ;
17593 +    U_TargetBuy  =                    0;
17594 +    END;
17595 +  END;
17596 +ELSE DO;
17597 +  IF  NOT MISSING(DemAffl ) AND
17598 +    DemAffl  <                 10.5 THEN DO;
17599 +    _NODE_  =                   18;
17600 +    _LEAF_  =                   18;
17601 +    P_TargetBuy0  =     0.82315112540192;
17602 +    P_TargetBuy1  =     0.17684887459807;
17603 +    Q_TargetBuy0  =     0.82315112540192;
17604 +    Q_TargetBuy1  =     0.17684887459807;
17605 +    V_TargetBuy0  =     0.82857142857142;
17606 +    V_TargetBuy1  =     0.17142857142857;
17607 +    I_TargetBuy  = '0' ;
17608 +    U_TargetBuy  =                    0;
17609 +    END;
17610 +  ELSE IF  NOT MISSING(DemAffl ) AND
17611 +                    13.5 <= DemAffl  THEN DO;
17612 +    _NODE_  =                   20;
17613 +    _LEAF_  =                   20;
17614 +    P_TargetBuy0  =                 0.36;
17615 +    P_TargetBuy1  =                 0.64;
17616 +    Q_TargetBuy0  =                 0.36;
17617 +    Q_TargetBuy1  =                 0.64;
17618 +    V_TargetBuy0  =     0.46511627906976;
17619 +    V_TargetBuy1  =     0.53488372093023;
17620 +    I_TargetBuy  = '1' ;
17621 +    U_TargetBuy  =                    1;
17622 +    END;
17623 +  ELSE DO;
17624 +    _NODE_  =                   19;
17625 +    _LEAF_  =                   19;
17626 +    P_TargetBuy0  =     0.61111111111111;
17627 +    P_TargetBuy1  =     0.38888888888888;
17628 +    Q_TargetBuy0  =     0.61111111111111;
17629 +    Q_TargetBuy1  =     0.38888888888888;
17630 +    V_TargetBuy0  =     0.64596273291925;
17631 +    V_TargetBuy1  =     0.35403726708074;
17632 +    I_TargetBuy  = '0' ;
17633 +    U_TargetBuy  =                    0;
17634 +    END;
17635 +  END;
17636 +
17637 +*****  RESIDUALS R_ *************;
17638 +IF  F_TargetBuy  NE '0'
17639 +AND F_TargetBuy  NE '1'  THEN DO;
17640 +        R_TargetBuy0  = .;
17641 +        R_TargetBuy1  = .;
17642 + END;
17643 + ELSE DO;
17644 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17645 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17646 +       SELECT( F_TargetBuy  );
17647 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17648 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17649 +       END;
17650 + END;
17651 +
17652 +****************************************************************;
17653 +******          END OF DECISION TREE SCORING CODE         ******;
17654 +****************************************************************;
17655 +
17656 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17657  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE5_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17658  quit;
17659  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17660  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas";
17661  *------------------------------------------------------------*;
17662  * Tree5: Scoring TEST data;
17663  *------------------------------------------------------------*;
17664  data EMWS1.Tree5_TEST
17665  / view=EMWS1.Tree5_TEST
17666  ;
17667  set EMWS1.Part_TEST
17668  ;
17669  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\ORGANICS2\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas.
17670 +****************************************************************;
17671 +******             DECISION TREE SCORING CODE             ******;
17672 +****************************************************************;
17673 +
17674 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17675 +LENGTH F_TargetBuy  $   12;
17676 +LENGTH I_TargetBuy  $   12;
17677 +LENGTH _WARN_  $    4;
17678 +
17679 +******              LABELS FOR NEW VARIABLES              ******;
17680 +label _NODE_ = 'Node' ;
17681 +label _LEAF_ = 'Leaf' ;
17682 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17683 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17684 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17685 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17686 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17687 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17688 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17689 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17690 +label F_TargetBuy = 'From: TargetBuy' ;
17691 +label I_TargetBuy = 'Into: TargetBuy' ;
17692 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17693 +label _WARN_ = 'Warnings' ;
17694 +
17695 +
17696 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17697 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17698 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17699 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17700 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17701 +
17702 +
17703 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17704 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17705 +
17706 +******             ASSIGN OBSERVATION TO NODE             ******;
17707 +IF  NOT MISSING(DemAge ) AND
17708 +  DemAge  <                 39.5 THEN DO;
17709 +  IF  NOT MISSING(DemAffl ) AND
17710 +    DemAffl  <                  6.5 THEN DO;
17711 +    _NODE_  =                    6;
17712 +    _LEAF_  =                    1;
17713 +    P_TargetBuy0  =      0.6593886462882;
17714 +    P_TargetBuy1  =     0.34061135371179;
17715 +    Q_TargetBuy0  =      0.6593886462882;
17716 +    Q_TargetBuy1  =     0.34061135371179;
17717 +    V_TargetBuy0  =     0.66009852216748;
17718 +    V_TargetBuy1  =     0.33990147783251;
17719 +    I_TargetBuy  = '0' ;
17720 +    U_TargetBuy  =                    0;
17721 +    END;
17722 +  ELSE IF  NOT MISSING(DemAffl ) AND
17723 +                     6.5 <= DemAffl  AND
17724 +    DemAffl  <                  9.5 THEN DO;
17725 +    _ARBFMT_1 = PUT( DemGender , $1.);
17726 +     %DMNORMIP( _ARBFMT_1);
17727 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17728 +      _NODE_  =                   21;
17729 +      _LEAF_  =                    2;
17730 +      P_TargetBuy0  =     0.38405797101449;
17731 +      P_TargetBuy1  =      0.6159420289855;
17732 +      Q_TargetBuy0  =     0.38405797101449;
17733 +      Q_TargetBuy1  =      0.6159420289855;
17734 +      V_TargetBuy0  =     0.41121495327102;
17735 +      V_TargetBuy1  =     0.58878504672897;
17736 +      I_TargetBuy  = '1' ;
17737 +      U_TargetBuy  =                    1;
17738 +      END;
17739 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17740 +      _NODE_  =                   22;
17741 +      _LEAF_  =                    3;
17742 +      P_TargetBuy0  =     0.58878504672897;
17743 +      P_TargetBuy1  =     0.41121495327102;
17744 +      Q_TargetBuy0  =     0.58878504672897;
17745 +      Q_TargetBuy1  =     0.41121495327102;
17746 +      V_TargetBuy0  =     0.59210526315789;
17747 +      V_TargetBuy1  =      0.4078947368421;
17748 +      I_TargetBuy  = '0' ;
17749 +      U_TargetBuy  =                    0;
17750 +      END;
17751 +    ELSE DO;
17752 +      _NODE_  =                   23;
17753 +      _LEAF_  =                    4;
17754 +      P_TargetBuy0  =     0.81395348837209;
17755 +      P_TargetBuy1  =      0.1860465116279;
17756 +      Q_TargetBuy0  =     0.81395348837209;
17757 +      Q_TargetBuy1  =      0.1860465116279;
17758 +      V_TargetBuy0  =     0.88679245283018;
17759 +      V_TargetBuy1  =     0.11320754716981;
17760 +      I_TargetBuy  = '0' ;
17761 +      U_TargetBuy  =                    0;
17762 +      END;
17763 +    END;
17764 +  ELSE IF  NOT MISSING(DemAffl ) AND
17765 +                    14.5 <= DemAffl  THEN DO;
17766 +    _NODE_  =                    9;
17767 +    _LEAF_  =                    8;
17768 +    P_TargetBuy0  =     0.06521739130434;
17769 +    P_TargetBuy1  =     0.93478260869565;
17770 +    Q_TargetBuy0  =     0.06521739130434;
17771 +    Q_TargetBuy1  =     0.93478260869565;
17772 +    V_TargetBuy0  =     0.03597122302158;
17773 +    V_TargetBuy1  =     0.96402877697841;
17774 +    I_TargetBuy  = '1' ;
17775 +    U_TargetBuy  =                    1;
17776 +    END;
17777 +  ELSE DO;
17778 +    _ARBFMT_1 = PUT( DemGender , $1.);
17779 +     %DMNORMIP( _ARBFMT_1);
17780 +    IF _ARBFMT_1 IN ('M' ) THEN DO;
17781 +      _NODE_  =                   25;
17782 +      _LEAF_  =                    6;
17783 +      P_TargetBuy0  =     0.41666666666666;
17784 +      P_TargetBuy1  =     0.58333333333333;
17785 +      Q_TargetBuy0  =     0.41666666666666;
17786 +      Q_TargetBuy1  =     0.58333333333333;
17787 +      V_TargetBuy0  =     0.55813953488372;
17788 +      V_TargetBuy1  =     0.44186046511627;
17789 +      I_TargetBuy  = '1' ;
17790 +      U_TargetBuy  =                    1;
17791 +      END;
17792 +    ELSE IF _ARBFMT_1 IN ('F' ) THEN DO;
17793 +      _NODE_  =                   26;
17794 +      _LEAF_  =                    7;
17795 +      P_TargetBuy0  =     0.21629213483146;
17796 +      P_TargetBuy1  =     0.78370786516853;
17797 +      Q_TargetBuy0  =     0.21629213483146;
17798 +      Q_TargetBuy1  =     0.78370786516853;
17799 +      V_TargetBuy0  =     0.19636363636363;
17800 +      V_TargetBuy1  =     0.80363636363636;
17801 +      I_TargetBuy  = '1' ;
17802 +      U_TargetBuy  =                    1;
17803 +      END;
17804 +    ELSE DO;
17805 +      _NODE_  =                   24;
17806 +      _LEAF_  =                    5;
17807 +      P_TargetBuy0  =     0.61224489795918;
17808 +      P_TargetBuy1  =     0.38775510204081;
17809 +      Q_TargetBuy0  =     0.61224489795918;
17810 +      Q_TargetBuy1  =     0.38775510204081;
17811 +      V_TargetBuy0  =     0.57894736842105;
17812 +      V_TargetBuy1  =     0.42105263157894;
17813 +      I_TargetBuy  = '0' ;
17814 +      U_TargetBuy  =                    0;
17815 +      END;
17816 +    END;
17817 +  END;
17818 +ELSE IF  NOT MISSING(DemAge ) AND
17819 +                  39.5 <= DemAge  AND
17820 +  DemAge  <                 44.5 THEN DO;
17821 +  IF  NOT MISSING(DemAffl ) AND
17822 +    DemAffl  <                  6.5 THEN DO;
17823 +    _NODE_  =                   10;
17824 +    _LEAF_  =                    9;
17825 +    P_TargetBuy0  =     0.80346820809248;
17826 +    P_TargetBuy1  =     0.19653179190751;
17827 +    Q_TargetBuy0  =     0.80346820809248;
17828 +    Q_TargetBuy1  =     0.19653179190751;
17829 +    V_TargetBuy0  =     0.78030303030303;
17830 +    V_TargetBuy1  =     0.21969696969696;
17831 +    I_TargetBuy  = '0' ;
17832 +    U_TargetBuy  =                    0;
17833 +    END;
17834 +  ELSE IF  NOT MISSING(DemAffl ) AND
17835 +                     6.5 <= DemAffl  AND
17836 +    DemAffl  <                  9.5 THEN DO;
17837 +    _NODE_  =                   11;
17838 +    _LEAF_  =                   10;
17839 +    P_TargetBuy0  =     0.67537313432835;
17840 +    P_TargetBuy1  =     0.32462686567164;
17841 +    Q_TargetBuy0  =     0.67537313432835;
17842 +    Q_TargetBuy1  =     0.32462686567164;
17843 +    V_TargetBuy0  =     0.68556701030927;
17844 +    V_TargetBuy1  =     0.31443298969072;
17845 +    I_TargetBuy  = '0' ;
17846 +    U_TargetBuy  =                    0;
17847 +    END;
17848 +  ELSE IF  NOT MISSING(DemAffl ) AND
17849 +                    11.5 <= DemAffl  THEN DO;
17850 +    _NODE_  =                   13;
17851 +    _LEAF_  =                   13;
17852 +    P_TargetBuy0  =     0.29050279329608;
17853 +    P_TargetBuy1  =     0.70949720670391;
17854 +    Q_TargetBuy0  =     0.29050279329608;
17855 +    Q_TargetBuy1  =     0.70949720670391;
17856 +    V_TargetBuy0  =     0.37007874015748;
17857 +    V_TargetBuy1  =     0.62992125984251;
17858 +    I_TargetBuy  = '1' ;
17859 +    U_TargetBuy  =                    1;
17860 +    END;
17861 +  ELSE DO;
17862 +    _ARBFMT_1 = PUT( DemGender , $1.);
17863 +     %DMNORMIP( _ARBFMT_1);
17864 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17865 +      _NODE_  =                   31;
17866 +      _LEAF_  =                   11;
17867 +      P_TargetBuy0  =     0.45762711864406;
17868 +      P_TargetBuy1  =     0.54237288135593;
17869 +      Q_TargetBuy0  =     0.45762711864406;
17870 +      Q_TargetBuy1  =     0.54237288135593;
17871 +      V_TargetBuy0  =     0.33783783783783;
17872 +      V_TargetBuy1  =     0.66216216216216;
17873 +      I_TargetBuy  = '1' ;
17874 +      U_TargetBuy  =                    1;
17875 +      END;
17876 +    ELSE DO;
17877 +      _NODE_  =                   32;
17878 +      _LEAF_  =                   12;
17879 +      P_TargetBuy0  =     0.71428571428571;
17880 +      P_TargetBuy1  =     0.28571428571428;
17881 +      Q_TargetBuy0  =     0.71428571428571;
17882 +      Q_TargetBuy1  =     0.28571428571428;
17883 +      V_TargetBuy0  =     0.68115942028985;
17884 +      V_TargetBuy1  =     0.31884057971014;
17885 +      I_TargetBuy  = '0' ;
17886 +      U_TargetBuy  =                    0;
17887 +      END;
17888 +    END;
17889 +  END;
17890 +ELSE IF  NOT MISSING(DemAge ) AND
17891 +                  44.5 <= DemAge  AND
17892 +  DemAge  <                 76.5 THEN DO;
17893 +  IF  NOT MISSING(DemAffl ) AND
17894 +    DemAffl  <                  8.5 THEN DO;
17895 +    _NODE_  =                   14;
17896 +    _LEAF_  =                   14;
17897 +    P_TargetBuy0  =     0.91972700682482;
17898 +    P_TargetBuy1  =     0.08027299317517;
17899 +    Q_TargetBuy0  =     0.91972700682482;
17900 +    Q_TargetBuy1  =     0.08027299317517;
17901 +    V_TargetBuy0  =     0.93264481365065;
17902 +    V_TargetBuy1  =     0.06735518634934;
17903 +    I_TargetBuy  = '0' ;
17904 +    U_TargetBuy  =                    0;
17905 +    END;
17906 +  ELSE IF  NOT MISSING(DemAffl ) AND
17907 +                    12.5 <= DemAffl  AND
17908 +    DemAffl  <                 16.5 THEN DO;
17909 +    _NODE_  =                   16;
17910 +    _LEAF_  =                   16;
17911 +    P_TargetBuy0  =     0.63956043956043;
17912 +    P_TargetBuy1  =     0.36043956043956;
17913 +    Q_TargetBuy0  =     0.63956043956043;
17914 +    Q_TargetBuy1  =     0.36043956043956;
17915 +    V_TargetBuy0  =     0.63513513513513;
17916 +    V_TargetBuy1  =     0.36486486486486;
17917 +    I_TargetBuy  = '0' ;
17918 +    U_TargetBuy  =                    0;
17919 +    END;
17920 +  ELSE IF  NOT MISSING(DemAffl ) AND
17921 +                    16.5 <= DemAffl  THEN DO;
17922 +    _NODE_  =                   17;
17923 +    _LEAF_  =                   17;
17924 +    P_TargetBuy0  =     0.22784810126582;
17925 +    P_TargetBuy1  =     0.77215189873417;
17926 +    Q_TargetBuy0  =     0.22784810126582;
17927 +    Q_TargetBuy1  =     0.77215189873417;
17928 +    V_TargetBuy0  =     0.28571428571428;
17929 +    V_TargetBuy1  =     0.71428571428571;
17930 +    I_TargetBuy  = '1' ;
17931 +    U_TargetBuy  =                    1;
17932 +    END;
17933 +  ELSE DO;
17934 +    _NODE_  =                   15;
17935 +    _LEAF_  =                   15;
17936 +    P_TargetBuy0  =     0.82864674868189;
17937 +    P_TargetBuy1  =      0.1713532513181;
17938 +    Q_TargetBuy0  =     0.82864674868189;
17939 +    Q_TargetBuy1  =      0.1713532513181;
17940 +    V_TargetBuy0  =     0.83093525179856;
17941 +    V_TargetBuy1  =     0.16906474820143;
17942 +    I_TargetBuy  = '0' ;
17943 +    U_TargetBuy  =                    0;
17944 +    END;
17945 +  END;
17946 +ELSE DO;
17947 +  IF  NOT MISSING(DemAffl ) AND
17948 +    DemAffl  <                 10.5 THEN DO;
17949 +    _NODE_  =                   18;
17950 +    _LEAF_  =                   18;
17951 +    P_TargetBuy0  =     0.82315112540192;
17952 +    P_TargetBuy1  =     0.17684887459807;
17953 +    Q_TargetBuy0  =     0.82315112540192;
17954 +    Q_TargetBuy1  =     0.17684887459807;
17955 +    V_TargetBuy0  =     0.82857142857142;
17956 +    V_TargetBuy1  =     0.17142857142857;
17957 +    I_TargetBuy  = '0' ;
17958 +    U_TargetBuy  =                    0;
17959 +    END;
17960 +  ELSE IF  NOT MISSING(DemAffl ) AND
17961 +                    13.5 <= DemAffl  THEN DO;
17962 +    _NODE_  =                   20;
17963 +    _LEAF_  =                   20;
17964 +    P_TargetBuy0  =                 0.36;
17965 +    P_TargetBuy1  =                 0.64;
17966 +    Q_TargetBuy0  =                 0.36;
17967 +    Q_TargetBuy1  =                 0.64;
17968 +    V_TargetBuy0  =     0.46511627906976;
17969 +    V_TargetBuy1  =     0.53488372093023;
17970 +    I_TargetBuy  = '1' ;
17971 +    U_TargetBuy  =                    1;
17972 +    END;
17973 +  ELSE DO;
17974 +    _NODE_  =                   19;
17975 +    _LEAF_  =                   19;
17976 +    P_TargetBuy0  =     0.61111111111111;
17977 +    P_TargetBuy1  =     0.38888888888888;
17978 +    Q_TargetBuy0  =     0.61111111111111;
17979 +    Q_TargetBuy1  =     0.38888888888888;
17980 +    V_TargetBuy0  =     0.64596273291925;
17981 +    V_TargetBuy1  =     0.35403726708074;
17982 +    I_TargetBuy  = '0' ;
17983 +    U_TargetBuy  =                    0;
17984 +    END;
17985 +  END;
17986 +
17987 +*****  RESIDUALS R_ *************;
17988 +IF  F_TargetBuy  NE '0'
17989 +AND F_TargetBuy  NE '1'  THEN DO;
17990 +        R_TargetBuy0  = .;
17991 +        R_TargetBuy1  = .;
17992 + END;
17993 + ELSE DO;
17994 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17995 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17996 +       SELECT( F_TargetBuy  );
17997 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17998 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17999 +       END;
18000 + END;
18001 +
18002 +****************************************************************;
18003 +******          END OF DECISION TREE SCORING CODE         ******;
18004 +****************************************************************;
18005 +
18006 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18007  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE5_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18008  quit;
18009  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE5_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
18011  proc sort data=WORK.EM_USER_REPORT;
18012  by ID VIEW;
18013  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18014  *------------------------------------------------------------*;
18015  * Tree5: Computing metadata for TRAIN data;
18016  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE5_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
18400  data WORK.MODELTEMP_INFO;
18401  set EMWS1.Tree5_EMINFO;
18402  where DATA='Tree5' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18403  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE5_EMINFO.
      WHERE (DATA='Tree5') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
18404  data EMWS1.Tree5_EMINFO;
18405  length TARGET KEY $32 DATA $43;
18406  input TARGET KEY DATA $;
18407  cards;
 
NOTE: The data set EMWS1.TREE5_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18411  run;
18412  data EMWS1.Tree5_EMINFO;
18413  set EMWS1.Tree5_EMINFO WORK.MODELTEMP_INFO;
18414  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE5_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE5_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18415  proc sort data = EMWS1.Tree5_EMINFO NOTHREADS;
18416  by TARGET KEY;
18417  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE5_EMINFO.
NOTE: The data set EMWS1.TREE5_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
18418  proc sort data = EMWS1.Ids2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18419  by TARGET KEY;
18420  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS2_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18421  proc sort data = EMWS1.Tree5_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18422  by TARGET KEY;
18423  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE5_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18424  data EMWS1.Tree5_EMINFO;
18425  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18426  by TARGET KEY;
18427  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE5_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18428  proc datasets lib=work nolist;
18429  delete TEMP_INFO SORTEDEMINFO;
18430  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18431  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE5_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE5_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.TREE5_TEST.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                March 26, 2016
Time:                23:46:11
*------------------------------------------------------------*
18455  data EMWS1.Tree5_EMOUTFIT;
18456  set EMWS1.Tree5_EMOUTFIT;
18457  length TargetLabel $200;
18458  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18459  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
18460  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE5_EMOUTFIT.
NOTE: The data set EMWS1.TREE5_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
18461  proc sort data=EMWS1.Tree5_EMREPORTFIT nothreads;
18462  by TARGET;
18463  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE5_EMREPORTFIT.
NOTE: The data set EMWS1.TREE5_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18464  %let _EMwarndup = 0;
18465  %let _EMtargetdup =;
18466  %let _EMASEtargetdup =;
18467  data _null_;
18468  set EMWS1.Tree5_EMOUTFIT;
18469  if .<_ASE_<0.000001 then do;
18470  call symput('_EMwarndup', '1');
18471  call symput('_EMtargetdup', target);
18472  call symput('_EMASEtargetdup', put(_ASE_, best.));
18473  end;
18474  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE5_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18475  %let EMEXCEPTIONSTRING=;
18476  *------------------------------------------------------------*;
18477  * REPORT: Tree5;
18478  *------------------------------------------------------------*;
18479  %let EM_ACTION = REPORT;
18480  %let syscc = 0;
18481  %macro main;
18482
18483    %if %upcase(&EM_ACTION) = CREATE %then %do;
18484      filename temp catalog 'sashelp.emmodl.tree_create.source';
18485      %include temp;
18486      filename temp;
18487
18488      %em_tree_create;
18489    %end;
18490
18491     %else
18492     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18493
18494         filename temp catalog 'sashelp.emmodl.tree_train.source';
18495         %include temp;
18496         filename temp;
18497         %em_tree_train;
18498     %end;
18499
18500    %else
18501    %if %upcase(&EM_ACTION) = SCORE %then %do;
18502      filename temp catalog 'sashelp.emmodl.tree_score.source';
18503      %include temp;
18504      filename temp;
18505
18506      %em_tree_score;
18507
18508    %end;
18509
18510    %else
18511    %if %upcase(&EM_ACTION) = REPORT %then %do;
18512
18513         filename temp catalog 'sashelp.emmodl.tree_report.source';
18514         %include temp;
18515         filename temp;
18516
18517         %em_tree_report;
18518     %end;
18519
18520    %else
18521    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18522
18523         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18524         %include temp;
18525         filename temp;
18526         %EM_TREE_OPENTREEVIEWER;
18527
18528     %end;
18529
18530    %else
18531    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18532
18533         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18534         %include temp;
18535         filename temp;
18536         %EM_TREE_CLOSETREEVIEWER;
18537
18538     %end;
18539
18540
18541     %doendm:
18542  %mend main;
18543
18544  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18546 +%macro em_tree_makePlotDs( multipleTar= );
18548 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18549 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18550 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18551 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18553 +  /* determine if validation statistics will be displayed */
18554 +  %let validflag=N;
18555 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18556 +    /* determine if validation data exists */
18557 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18558 +      %let validflag=Y;
18559 +    %end;
18560 +  %end;
18562 +   /* retrieve name of decmeta even in presence of multiple targets */
18563 +   %let decmeta = ;
18564 +   %if &EM_DEC_DECMETA eq %then %do;
18565 +     data _Target;
18566 +       set &em_data_variableset;
18567 +       where ROLE='TARGET' and USE in('D', 'Y');
18568 +       keep NAME;
18569 +     run;
18570 +     proc sort data=_Target;
18571 +       by NAME;
18572 +     run;
18573 +     proc sort data=EM_TARGETDECINFO;
18574 +       by TARGET;
18575 +     run;
18576 +     data _Target;
18577 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18578 +       by NAME;
18579 +       if _a then do;
18580 +         call symput('decmeta', trim(DECMETA));
18581 +       end;
18582 +     run;
18583 +     proc delete data=_Target;run;
18584 +   %end;
18585 +   %else %let decmeta = &EM_DEC_DECMETA;
18588 +  /* retrieve targetEvent from decmeta */
18589 +  %let targetEvent=;
18590 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18591 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18592 +      data _null_;
18593 +       set &DECMETA(where=(_TYPE_="TARGET"));
18594 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18595 +      run;
18596 +    %end;
18597 +  %end;
18599 +  /* retrieve predicted var for targetEvent from decmeta */
18600 +  %let predTarget=;
18601 +  %let predLvl=;
18602 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18603 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18604 +      data _null_;
18605 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18606 +       call symput('predTarget', strip(VARIABLE));
18607 +       call symput('predLvl', strip(LEVEL));
18608 +      run;
18609 +    %end;
18610 +  %end;
18611 +  %else %do;
18612 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18613 +      data _null_;
18614 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18615 +       call symput('predTarget', strip(VARIABLE));
18616 +      run;
18617 +    %end;
18618 +  %end;
18620 +  /* create BelowText value */
18621 +  data belowtext;
18622 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18623 +    keep node belowtext;
18624 +  run;
18626 +  /* relace belowtext with variable label if it exists */
18627 +  data belowtext2;
18628 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18629 +    keep node belowtextlbl;
18630 +  run;
18632 +  proc sort data=belowtext; by node; run;
18633 +  proc sort data=belowtext2; by node; run;
18635 +  data belowtext;
18636 +    merge belowtext belowtext2(in=_a);
18637 +    by node;
18638 +    if _a then belowtext=belowtextlbl;
18639 +    keep node belowtext;
18640 +  run;
18642 +  /* create AboveText value */
18643 +  data abovetext;
18644 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18645 +  run;
18646 +  proc sort data=abovetext; by node numeric_value; run;
18648 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18649 +  data abovetext;
18650 +    set abovetext(rename=(node=parent));
18651 +    by parent numeric_value;
18652 +    retain abovetext tempstring flag branch origval origchar ;
18653 +    length abovetext $256;
18654 +    length tempstring origchar $64;
18656 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18657 +      if first.parent then do;
18658 +        if missing(character_value) then do;
18659 +          numeric_value = round(numeric_value, &sp_precision);
18660 +          abovetext = "< "||strip(NUMERIC_VALUE);
18661 +          branch = 1;
18662 +          origval = numeric_value;
18663 +          output;
18664 +        end;
18665 +        else do;
18666 +          abovetext = "< "||strip(CHARACTER_VALUE);
18667 +          branch = 1;
18668 +          origchar = character_value;
18669 +          output;
18670 +        end;
18672 +        if first.parent AND last.parent then do;
18673 +          if missing(character_value) then do;
18674 +            numeric_value = round(numeric_value, &sp_precision);
18675 +            branch = branch + 1;
18676 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18677 +            output;
18678 +          end;
18679 +          else do;
18680 +            branch = branch + 1;
18681 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18682 +            output;
18683 +          end;
18684 +        end;
18685 +      end;
18686 +      else if last.parent then do;
18687 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18688 +          if missing(character_value) then do;
18689 +            numeric_value = round(numeric_value, &sp_precision);
18690 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18691 +          end;
18692 +          else do;
18693 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18694 +          end;
18695 +          branch = branch + 1;
18696 +          output;
18698 +          if missing(character_value) then do;
18699 +            numeric_value = round(numeric_value, &sp_precision);
18700 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18701 +          end;
18702 +          else do;
18703 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18704 +          end;
18705 +          branch = branch + 1;
18706 +          output;
18707 +        end;
18708 +        else do;
18709 +          if missing(character_value) then do;
18710 +            numeric_value = round(numeric_value, &sp_precision);
18711 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18712 +          end;
18713 +          else do;
18714 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18715 +          end;
18716 +          branch = branch + 1;
18717 +          output;
18718 +        end;
18719 +      end;
18720 +      else do;
18721 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18722 +          if missing(character_value) then do;
18723 +            numeric_value = round(numeric_value,&sp_precision);
18724 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18725 +            origval = numeric_value;
18726 +          end;
18727 +          else do;
18728 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18729 +            origchar = character_value;
18730 +          end;
18731 +          branch = branch + 1;
18732 +          output;
18734 +        end;
18735 +        else do;
18736 +          if missing(character_value) then do;
18737 +            numeric_value = round(numeric_value, &sp_precision);
18738 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18739 +            origval = numeric_value;
18740 +          end;
18741 +          else do;
18742 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18743 +            origval = character_value;
18744 +          end;
18745 +          branch = branch + 1;
18746 +          output;
18747 +        end;
18748 +      end;
18749 +    end;
18750 +    else do;
18751 +       if first.numeric_value then do;
18752 +         flag = 0;
18753 +         abovetext = strip(CHARACTER_VALUE);
18754 +         branch = numeric_value;
18755 +         if first.numeric_value AND last.numeric_value then do;
18756 +           output;
18757 +         end;
18758 +       end;
18759 +       else if last.numeric_value then do;
18760 +         if flag=0 then do;
18761 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18762 +           length = length(strip(tempstring));
18763 +           if length < 32 then do;
18764 +             abovetext = strip(tempstring);
18765 +           end;
18766 +           else do;
18767 +             abovetext = strip(abovetext)||", ...";
18768 +             flag = 1;
18769 +           end;
18770 +         end;
18771 +         branch = numeric_value;
18772 +         output;
18773 +       end;
18774 +       else do;
18775 +         if flag=0 then do;
18776 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18777 +           length = length(strip(tempstring));
18778 +           if length < 32 then do;
18779 +             abovetext = strip(tempstring);
18780 +           end;
18781 +           else do;
18782 +             abovetext = strip(abovetext)||", ...";
18783 +             flag=1;
18784 +           end;
18785 +         end;
18786 +         branch = numeric_value;
18787 +       end;
18788 +    end;
18789 +    keep parent branch abovetext;
18790 +  run;
18792 +  /* MIssing value to abovetext */
18793 +  data tempmissing;
18794 +    set &EM_USER_OUTRULES;
18795 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18796 +    rename node=parent numeric_value=branch character_value=misschar;
18797 +  run;
18800 +  proc sort data=abovetext; by parent branch; run;
18801 +  proc sort data=tempmissing; by parent branch; run;
18802 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18804 +  data tempoutnodes;
18805 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18806 +    by parent branch;
18807 +    length traintotal validtotal 8;
18808 +    retain traintotal validtotal;
18810 +    if _a then do;
18811 +      if ^MISSING(abovetext) then do;
18812 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18813 +      end;
18814 +      else do;
18815 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18816 +      end;
18817 +    end;
18818 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18820 +    if node=1 then do;
18821 +      traintotal = N;
18822 +      validtotal=VN;
18823 +    end;
18825 +    drop role rank stat misschar belowtext;
18826 +  run;
18827 +  proc sort data=tempoutnodes; by node; run;
18828 +  proc sort data=belowtext; by node; run;
18830 +  data tempoutnodes;
18831 +    merge tempoutnodes belowtext;
18832 +    by node;
18834 +  run;
18836 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18837 +  %let adjusted = N;
18838 +  %let npriors = 0;
18839 +  data _null_ ;
18840 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18841 +    if eof then do ;
18842 +      call symput("npriors" , strip(put(_N_,best.))) ;
18843 +    end;
18844 +  run;
18845 +  %if &npriors gt 0 %then %let adjusted=Y;
18848 +  /* create a table with targetUsed and targetLevel columns for each node */
18849 +  data temptarmeta;
18850 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18851 +    %if &multipleTar eq N %then %do;
18852 +      AND USE in ('D', 'Y')
18853 +    %end;
18854 +    ));
18855 +    length TARGET $32;
18856 +    Target=name;
18857 +    keep target level;
18858 +  run;
18860 +  %if &multipleTar eq Y %then %do;
18861 +    data temptargetused;
18862 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18863 +      keep node target;
18864 +    run;
18865 +    proc sort data=temptargetused; by target; run;
18866 +    proc sort data=temptarmeta; by target; run;
18867 +    data temptargetused;
18868 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18869 +      by target;
18870 +      if _a and _b;
18871 +    run;
18872 +  %end;
18873 +  %else %do;
18874 +    data temptargetused;
18875 +      set &EM_USER_OUTSTATS;
18876 +      length target $32 tarlevel $10;
18877 +      target="%EM_TARGET";
18878 +      tarlevel="%EM_TARGET_LEVEL";
18879 +      keep node target tarlevel;
18880 +    run;
18881 +    proc sort data=temptargetused nodupkey; by node; run;
18882 +  %end;
18884 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18885 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18886 +  proc sort data=temptargetused; by node; run;
18889 +  /* create tables for all interval targets as well as all class targets */
18890 +  data tempinterval tempclass;
18891 +    merge tempoutstats temptargetused( rename=(target=targetused));
18892 +    by node;
18893 +    %if "&multipleTar" eq "Y" %then %do;
18894 +      if ((missing(Target)) OR (target=targetused ));
18895 +    %end;
18897 +    if tarlevel="INTERVAL" then output tempinterval;
18898 +    else output tempclass;
18899 +  run;
18901 +  /* iniitalize intTarget and classTarget flags */
18902 +  %let em_intNobs =0;
18903 +  %let em_classNobs = 0;
18904 +  %let em_intTarget= N;
18905 +  %let em_classTarget= N;
18907 +  proc sql;
18908 +    reset noprint;
18909 +    select count(*) into :em_intNobs from tempinterval;
18910 +  quit;
18911 +  proc sql;
18912 +    reset noprint;
18913 +    select count(*) into :em_classNobs from tempclass;
18914 +  quit;
18916 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18917 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18919 +  /* retrieve all information for interval targets */
18920 +  %if &em_intTarget eq Y %then %do;
18922 +    /* determine if leaf variable exists */
18923 +    %let dsid=%sysfunc(open(tempinterval,i));
18924 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18925 +    %let rc=%sysfunc(close(&dsid));
18927 +    proc transpose data=tempinterval
18928 +      %if &leafexists %then %do;
18929 +        (drop=leaf)
18930 +      %end;
18931 +      %if &validexist %then %do;
18932 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18933 +      %end;
18934 +      %else %do;
18935 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18936 +      %end;
18937 +      by node;
18938 +      id statname;
18939 +    run;
18940 +    data tempinterval;
18941 +      set tempinterval;
18942 +      if missing(N) then delete;
18943 +    run;
18944 +  %end;
18946 +  /* retrieve all information for class targets */
18947 +  %if &em_classTarget eq Y %then %do;
18948 +    proc sort data=tempclass; by node category; run;
18949 +    %if &validflag eq N %then %do;
18950 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18951 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18952 +    %end;
18953 +    %else %do;
18954 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18955 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18956 +    %end;
18957 +      set tempclass;
18959 +      %if &validflag eq N %then %do;
18960 +        %if "&adjusted" eq "N" %then %do;
18961 +          if statname="N" then output tempn;
18962 +        %end;
18963 +        %else %do;
18964 +          if statname="NPRIORS" then output tempn;
18965 +        %end;
18966 +        else if statname="PREDICTION" then output temppredict;
18967 +        else if statname="PROBABILITY" then output tempprob;
18968 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18969 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18970 +      %end;
18971 +      %else %do;
18972 +        %if "&adjusted" eq "N" %then %do;
18973 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18974 +        %end;
18975 +        %else %do;
18976 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18977 +        %end;
18978 +        else if statname="PREDICTION" then output temppredict;
18979 +        else if statname="PROBABILITY" then output tempprob;
18980 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18981 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18982 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18983 +      %end;
18984 +    run;
18987 +    /* determine if profit/loss exists in tempprofit */
18988 +    %let em_profitflag=0;
18989 +    %let em_lossflag=0;
18990 +    proc sql;
18991 +      reset noprint;
18992 +      select count(*) into :em_profitflag from tempprofit;
18993 +    quit;
18994 +    proc sql;
18995 +      reset noprint;
18996 +      select count(*) into :em_lossflag from temploss;
18997 +    quit;
18999 +    %if &validFlag eq Y %then %do;
19000 +      proc transpose data=tempn
19001 +        %if "&adjusted" eq "N" %then %do;
19002 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19003 +        %end;
19004 +        %else %do;
19005 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19006 +        %end;
19007 +        by node;
19008 +        id statname;
19009 +      run;
19010 +      %if &em_profitflag ne 0 %then %do;
19011 +        proc transpose data=tempprofit out=tempprofit;
19012 +          by node category;
19013 +          id statname ;
19014 +        run;
19015 +      %end;
19016 +      %if &em_lossflag ne 0 %then %do;
19017 +        proc transpose data=temploss out=temploss;
19018 +          by node category;
19019 +          id statname ;
19020 +        run;
19021 +      %end;
19022 +      data tempprob;
19023 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19024 +        by node
19025 +        %if &multipleTar eq Y %then %do;
19026 +          target
19027 +        %end;
19028 +        category;
19029 +      run;
19030 +    %end;
19032 +    /* store percentcorrect value */
19033 +    data temppredict;
19034 +      merge tempprob temppredict(in=_a);
19035 +      by node category;
19036 +      if _a then do;
19037 +        percentCorrect = statvalue;
19038 +        %if &validFlag eq Y %then %do;
19039 +          vpercentCorrect= vstatvalue;
19040 +        %end;
19041 +      end;
19042 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19043 +      %if &validFlag eq Y %then %do;
19044 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19045 +      %end;
19046 +      ;
19047 +      if missing(percentCorrect) then delete;
19048 +      drop target;
19049 +    run;
19051 +    /* build profittext */
19052 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19053 +      data tempprofittext(keep= node profittext profitloss);
19054 +        length profittext $800 profitloss 8.;
19055 +        retain profittext profitloss;
19057 +        merge tempprob
19058 +        %if &em_profitflag ne 0 %then %do;
19059 +          tempprofit
19060 +        %end;
19061 +        %else %if &em_lossflag ne 0 %then %do;
19062 +          temploss
19063 +        %end;
19064 +        ;
19065 +        by node category;
19067 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19068 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19069 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19070 +          %let profittype = ALL;
19071 +        %end;
19073 +        /* create the profitloss variable for nodecolor if selected */
19074 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19076 +        %if "&profittype" eq "ALL" %then %do;
19077 +          if strip(CATEGORY)="&targetEvent" then do;
19078 +            profitloss=statvalue;
19079 +          end;
19080 +          if first.node then do;
19081 +            %if &validFlag eq N %then %do;
19082 +             %if &em_profitflag ne 0 %then %do;
19083 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19084 +             %end;
19085 +             %if &em_lossflag ne 0 %then %do;
19086 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19087 +             %end;
19088 +            %end;
19089 +            %else %do;
19090 +             %if &em_profitflag ne 0 %then %do;
19091 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19091!+;
19092 +             %end;
19093 +             %if &em_lossflag ne 0 %then %do;
19094 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19095 +             %end;
19096 +            %end;
19097 +          end;
19098 +          else if last.node then do;
19099 +            %if &validFlag eq N %then %do;
19100 +             %if &em_profitflag ne 0 %then %do;
19101 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19102 +             %end;
19103 +             %if &em_lossflag ne 0 %then %do;
19104 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19105 +             %end;
19106 +             /*if CATEGORY="&targetEvent" then do;
19107 +               profitloss=statvalue;
19108 +             end;*/
19109 +            %end;
19110 +            %else %do;
19111 +             %if &em_profitflag ne 0 %then %do;
19112 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19112!+14.&EM_PROPERTY_SPLITPRECISION);
19113 +                if CATEGORY="&targetEvent" then do;
19114 +                 profitloss=ALTERNATIVE_PROFIT;
19115 +                end;
19116 +             %end;
19117 +             %if &em_lossflag ne 0 %then %do;
19118 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19118!+14.&EM_PROPERTY_SPLITPRECISION);
19119 +                if CATEGORY="&targetEvent" then do;
19120 +                  profitloss=ALTERNATIVE_LOSS;
19121 +                end;
19122 +             %end;
19123 +            %end;
19124 +            output;
19125 +          end;
19126 +          else do;
19127 +            %if &validFlag eq N %then %do;
19128 +             %if &em_profitflag ne 0 %then %do;
19129 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19130 +             %end;
19131 +             %if &em_lossflag ne 0 %then %do;
19132 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19133 +             %end;
19134 +            %end;
19135 +            %else %do;
19136 +             %if &em_profitflag ne 0 %then %do;
19137 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19137!+14.&EM_PROPERTY_SPLITPRECISION);
19138 +             %end;
19139 +             %if &em_lossflag ne 0 %then %do;
19140 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19140!+14.&EM_PROPERTY_SPLITPRECISION);
19141 +             %end;
19142 +            %end;
19143 +          end;
19144 +        %end;
19145 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19146 +          if strip(CATEGORY) = "&targetevent" then do;
19147 +            %if &validFlag eq N %then %do;
19148 +             %if &em_profitflag ne 0 %then %do;
19149 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19150 +             %end;
19151 +             %if &em_lossflag ne 0 %then %do;
19152 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19153 +             %end;
19154 +             profitloss=statvalue;
19155 +            %end;
19156 +            %else %do;
19157 +             %if &em_profitflag ne 0 %then %do;
19158 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19158!+;
19159 +                profitloss=ALTERNATIVE_PROFIT;
19160 +             %end;
19161 +             %if &em_lossflag ne 0 %then %do;
19162 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19163 +                profitloss=ALTERNATIVE_LOSS;
19164 +             %end;
19165 +            %end;
19166 +            output;
19167 +          end;
19168 +        %end;
19169 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19170 +          if strip(CATEGORY) = "&targetevent" then do;
19171 +            %if &validFlag eq N %then %do;
19172 +             profitloss=statvalue;
19173 +            %end;
19174 +            %else %do;
19175 +             %if &em_profitflag ne 0 %then %do;
19176 +                profitloss=ALTERNATIVE_PROFIT;
19177 +             %end;
19178 +             %if &em_lossflag ne 0 %then %do;
19179 +                profitloss=ALTERNATIVE_LOSS;
19180 +             %end;
19181 +            %end;
19182 +            output;
19183 +          end;
19184 +        %end;
19185 +      run;
19186 +    %end;
19188 +    data tempprob(keep= node probtext);
19189 +      length probtext $800;
19190 +      retain probtext;
19191 +      set tempprob ;
19192 +      by node;
19194 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19195 +      %let probtype = &EM_PROPERTY_TARGET;
19196 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19197 +        %let probtype = ALL;
19198 +      %end;
19200 +      %if "&probtype" eq "ALL" %then %do;
19201 +        if first.node then do;
19202 +          %if &validFlag eq N %then %do;
19203 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19204 +          %end;
19205 +          %else %do;
19206 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19207 +          %end;
19208 +        end;
19209 +        else if last.node then do;
19210 +          %if &validFlag eq N %then %do;
19211 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19212 +          %end;
19213 +          %else %do;
19214 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19215 +          %end;
19216 +          output;
19217 +        end;
19218 +        else do;
19219 +          %if &validFlag eq N %then %do;
19220 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19221 +          %end;
19222 +          %else %do;
19223 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19224 +          %end;
19225 +        end;
19226 +      %end;
19227 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19228 +        if strip(CATEGORY) = "&targetevent" then do;
19229 +          %if &validFlag eq N %then %do;
19230 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19231 +          %end;
19232 +          %else %do;
19233 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19234 +          %end;
19235 +          output;
19236 +        end;
19237 +      %end;
19238 +      %else %if "&probtype" eq "NONE" %then %do;
19239 +        if last.node then do;
19240 +          output;
19241 +        end;
19242 +      %end;
19243 +    run;
19244 +  %end;
19246 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19248 +  %let oldexists=0;
19249 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19250 +     data old_tree_plot;
19251 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19252 +        rename nodecolor=oldnodecolor;
19253 +     run;
19255 +     proc sort data=old_tree_plot;
19256 +        by node;
19257 +     run;
19259 +     %let oldexists=1;
19260 +  %end;
19262 +  data &EM_USER_TREE_PLOT;
19263 +    length textall $800;
19264 +    merge tempoutnodes temptargetused
19266 +    %if &em_intTarget eq Y %then %do;
19267 +      tempinterval
19268 +    %end;
19270 +    %if &em_classTarget eq Y %then %do;
19272 +      %if &validFlag eq N %then %do;
19273 +        tempn(rename=(statvalue=N))
19274 +      %end;
19275 +      %else %do;
19276 +        tempn
19277 +      %end;
19279 +      temppredict tempprob
19281 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19282 +        tempprofittext
19283 +      %end;
19284 +    %end;
19285 +    ;
19286 +    by node;
19288 +    /* build nodetext based on user selection */
19289 +    textall="";
19291 +    %if &em_intTarget eq Y %then %do;
19292 +    if tarlevel="INTERVAL" then do;
19293 +      /* Nodeid */
19294 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19295 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19296 +      %end;
19298 +      /* Target identifier if multiple targets are used */
19299 +      %if "&multipleTar" eq "Y" %then %do;
19300 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19301 +      %end;
19303 +      %if &validFlag eq Y %then %do;
19304 +         /* Column labels displayed in validflag eq Y only */
19305 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19306 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19306!+noquote ))";
19307 +         %end;
19309 +         /* Average values */
19310 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19311 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19312 +         %end;
19314 +         /* RASE */
19315 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19316 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19317 +         %end;
19319 +         /* Count */
19320 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19321 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19322 +         %end;
19323 +      %end;
19324 +      %else %do;
19325 +         /* Average values */
19326 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19327 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19328 +         %end;
19330 +         /* RASE */
19331 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19332 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19333 +         %end;
19335 +         /* Count */
19336 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19337 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19338 +         %end;
19339 +      %end;
19341 +      /* nodecolor */
19342 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19343 +        nodecolor=PREDICTION;
19344 +      %end;
19345 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19346 +        nodecolor=RASE;
19347 +      %end;
19348 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19349 +        nodecolor=1;
19350 +      %end;
19352 +    end;
19353 +    %end;
19354 +    %if &em_classTarget eq Y %then %do;
19355 +    if tarlevel^="INTERVAL" then  do;
19357 +      /* Nodeid */
19358 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19359 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19360 +      %end;
19361 +      /* Target identifier if multiple targets are used */
19362 +      %if "&multipleTar" eq "Y" %then %do;
19363 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19364 +      %end;
19366 +      /* Predicted values */
19367 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19368 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19369 +      %end;
19371 +      /* Column labels displayed in validflag eq Y only */
19372 +      %if "&ValidFlag" eq "Y" %then %do;
19373 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19374 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19374!+noquote ))";
19375 +        %end;
19376 +      %end;
19378 +      /* Target Values */
19379 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19380 +        textall=strip(textall)||"0A"x||strip(probtext);
19381 +      %end;
19383 +      /* include profit or loss for all target levels */
19384 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19385 +        textall=strip(textall)||"0A"x||strip(profittext);
19386 +      %end;
19388 +      %if &validFlag eq N %then %do;
19389 +        /* Percent Correct */
19390 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19391 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19392 +        %end;
19394 +         /* Count */
19395 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19396 +          %if "&adjusted" eq "N" %then %do;
19397 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19398 +          %end;
19399 +          %else %do;
19400 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19401 +          %end;
19402 +         %end;
19403 +      %end;
19404 +      %else %do;
19405 +        /* Percent Correct */
19406 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19407 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19408 +        %end;
19410 +         /* Count */
19411 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19412 +          %if "&adjusted" eq "N" %then %do;
19413 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19414 +          %end;
19415 +          %else %do;
19416 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19417 +          %end;
19418 +         %end;
19419 +      %end;
19421 +      /* nodecolor */
19422 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19423 +       %if &multipleTar ne Y %then %do;
19424 +        nodecolor=&predTarget;
19425 +       %end;
19426 +       %else %do;
19427 +         nodecolor=percentcorrect;
19428 +       %end;
19429 +      %end;
19430 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19431 +        nodecolor=percentcorrect;
19432 +      %end;
19433 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19434 +        nodecolor=1;
19435 +      %end;
19436 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19437 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19438 +          nodecolor=percentcorrect;
19439 +        %end;
19440 +        %else %do;
19441 +          nodecolor=profitloss;
19442 +        %end;
19443 +      %end;
19445 +    end;
19446 +    %end;
19447 +    %if &em_intTarget eq Y %then %do;
19448 +     drop  PREDICTION  TARGET TARLEVEL
19449 +     %if &ValidFlag eq Y %then %do;
19450 +         VPREDICTION
19451 +     %end;
19452 +     ;
19453 +    %end;
19454 +    %if &em_classTarget eq Y %then %do;
19455 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19456 +     %if &ValidFlag eq Y %then %do;
19457 +         VSTATVALUE
19458 +     %end;
19459 +     ;
19460 +    %end;
19462 +  run;
19464 +  /* add leaf index information to plotds - based on primary target only*/
19465 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19466 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19467 +      set &EM_USER_OUTSTATS;
19468 +      if ((statname="PROBABILITY"
19469 +      %if &validexist %then %do;
19470 +       or statname="VALID: PROBABILITY"
19471 +      %end;
19472 +      ) AND (CATEGORY="&TARGETEVENT")
19473 +      %if "&multipleTar" eq "Y" %then %do;
19474 +        AND (Target="%EM_TARGET")
19475 +      %end;
19476 +      );
19477 +    run;
19479 +    %if &validexist %then %do;
19480 +      proc sort data=tempprob; by node; run;
19481 +      %let vpredTarget = V%substr(&predTarget, 2);
19482 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19483 +         by node;
19484 +         id statname;
19485 +      run;
19486 +    %end;
19487 +  %end;
19488 +  %else %do;
19489 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19490 +      set &EM_USER_OUTSTATS;
19491 +      if ((statname="PREDICTION"
19492 +      %if &validexist %then %do;
19493 +       or statname="VALID: PREDICTION"
19494 +      %end;
19495 +      )
19496 +      %if "&multipleTar" eq "Y" %then %do;
19497 +        AND (Target="%EM_TARGET")
19498 +      %end;
19499 +      );
19500 +    run;
19501 +    %if &validexist %then %do;
19502 +      proc sort data=tempprob; by node; run;
19503 +      %let vpredTarget = V%substr(&predTarget, 2);
19504 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19505 +         by node;
19506 +         id statname;
19507 +      run;
19508 +    %end;
19509 +  %end;
19511 +  proc sort data=tempprob; by node; run;
19512 +  data tempoutnodes;
19513 +    merge tempoutnodes tempprob;
19514 +    by node;
19515 +  run;
19517 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19518 +  data tempnodes;
19519 +    retain traintotal validtotal;
19520 +    set tempnodes(where=(leaf ne . ));
19521 +    tprob=round(&predTarget, .01);
19522 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19523 +      percevent_train=round(tprob*100, .01);
19524 +    %end;
19525 +    %else %do;
19526 +      percevent_train=tprob;
19527 +    %end;
19529 +    perc_train=round((n/traintotal)*100, 0.01);
19530 +    /* leafwidth already has a *10 multiplier */
19531 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19533 +    %if &validexist %then %do;
19534 +      %let vpredTarget = V%substr(&predTarget,2);
19535 +      vprob=round(&vpredTarget, .01);
19536 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19537 +        percevent_valid=round(vprob*100, .01);
19538 +      %end;
19539 +      %else %do;
19540 +        percevent_valid=vprob;
19541 +      %end;
19542 +      perc_valid=round((vn/validtotal)*100, .01);
19543 +    %end;
19545 +    index=_N_;
19546 +    keep node index tprob perc_train percevent_train
19547 +    %if &validexist %then %do;
19548 +        vprob percevent_valid perc_valid
19549 +    %end;
19550 +    ;
19551 +  run;
19552 +  proc sort data=tempnodes; by node; run;
19553 +  data &EM_USER_TREE_PLOT;
19554 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19555 +    by node;
19556 +    if missing(node) then delete;
19557 +    %if &oldexists %then %do;
19558 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19559 +      drop oldnodecolor;
19560 +    %end;
19561 +    abovetext = compbl(abovetext);
19563 +    /* add variable labels */
19564 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19565 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19566 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19567 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19568 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19569 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19571 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19572 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19573 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19574 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19575 +          %end;
19576 +          %else %do;
19577 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19578 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19579 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19580 +          %end;
19581 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19583 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19584 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19585 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19586 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19587 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19588 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19589 +          %end;
19590 +          %else %do;
19591 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19592 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19593 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19594 +          %end;
19595 +    ;
19596 +  run;
19598 +  /* delete temporary tables */
19599 +  proc datasets lib=work nolist;
19600 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19601 +  run;
19603 +%mend em_tree_makePlotDs;
19607 +%macro em_tree_report;
19609 +   /* report properties */
19610 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19611 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19612 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19613 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19614 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19615 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19616 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19617 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19618 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19619 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19620 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19621 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19622 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19624 +   %let validexist=0;
19625 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19626 +     %let validexist=1;
19627 +   %end;
19629 +   /* determine if multiple targets will be processed */
19630 +   %let em_tree_multipleTargets=N;
19631 +   %let em_tree_numTarget=1;
19632 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19633 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19634 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19635 +         %let em_tree_multipleTargets=N;
19636 +      %end;
19637 +      %else %do;
19638 +        data _null_;
19639 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19640 +          if eof then
19641 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19642 +        run;
19644 +        %if &em_tree_numTarget gt 1 %then %do;
19645 +           %let em_tree_multipleTargets=Y;
19646 +        %end;
19647 +     %end;
19648 +   %end;
19650 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19652 +   /* variable importance */
19653 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19654 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19656 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19657 +     /* and the columns may not be generated                                                                                 */
19658 +     %let em_tree_cvexists=;
19659 +     %let em_tree_surrexists=.;
19660 +     data _null_;
19661 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19662 +       if eof then do ;
19663 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19664 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19665 +       end;
19666 +     run;
19668 +     data &EM_USER_OUTIMPORT;
19669 +         set &EM_USER_OUTIMPORT;
19670 +         /* format columns based on Precison value specified */
19671 +         format importance 15.&EM_PROPERTY_PRECISION
19672 +              %if &validexist %then %do;
19673 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19674 +              %end;
19675 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19676 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19677 +              %end;
19678 +         ;
19679 +     run;
19681 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19682 +     proc print data=&EM_USER_OUTIMPORT
19683 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19684 +          (where=((nrules>0) OR (nsurrogates>0)))
19685 +        %end;
19686 +        %else %do;
19687 +           (where=(nrules>0))
19688 +        %end;
19689 +        label noobs
19690 +        ;
19691 +     run;
19692 +     title10;
19694 +   %end;
19696 +   /* Sequence */
19697 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19698 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19699 +   data _null_ ;
19700 +      set &EM_USER_outseq (obs=2) end=eof ;
19701 +      if eof then do ;
19702 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19703 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19704 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19705 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19706 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19707 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19708 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19709 +      end;
19710 +    run;
19712 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19713 +      data &EM_USER_OUTSEQ;
19714 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19715 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19716 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19717 +           _XMISC_=_VMISC_
19718 +        %end;
19719 +        %if "&em_tree_aprof" ne "."  %then %do;
19720 +           _XAPROF_=_VAPROF_
19721 +           _XPROF_ = _VPROF_
19722 +        %end;
19723 +        %if "&em_tree_aloss" ne "."  %then %do;
19724 +           _XALOSS_=_VALOSS_
19725 +        %end;
19726 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19727 +           _XPASE_ = _VPASE_
19728 +           _XPMISC_ = _VPMISC_
19729 +        %end;
19731 +        ));
19732 +     %end;
19733 +     %else %do;
19734 +        set &EM_USER_OUTSEQ;
19735 +     %end;
19737 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19738 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19739 +            _MISC_   15.&EM_PROPERTY_PRECISION
19740 +         %end;
19741 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19742 +            _PASE_  15.&EM_PROPERTY_PRECISION
19743 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19744 +         %end;
19745 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19746 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19747 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19748 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19749 +            %end;
19750 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19751 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19752 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19753 +            %end;
19754 +         %end;
19755 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19756 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19757 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19758 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19759 +            %end;
19760 +         %end;
19761 +         %if "&em_tree_seq" ne "." %then %do;
19762 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19763 +         %end;
19764 +         %if "&em_tree_vseq" ne "." %then %do;
19765 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19766 +         %end;
19767 +         %if "&em_tree_aprof" ne "." %then %do;
19768 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19769 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19770 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19771 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19772 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19773 +           %end;
19774 +         %end;
19775 +         %else %if "&em_tree_aloss" ne "." %then %do;
19776 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19777 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19778 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19779 +           %end;
19780 +         %end;
19781 +      ;
19782 +    run;
19783 +   %end;
19785 +   /* Observation Based Importance */
19786 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19788 +      /* need to check for 0 obs */
19789 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19790 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19791 +      %let rc=%sysfunc(close(&dsid));
19793 +      %if &onobs %then %do;
19794 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19795 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19797 +         data &EM_USER_OUTOBSIMP;
19798 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19799 +           if _a;
19800 +           by _INPUT1_;
19801 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19802 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19803 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19804 +                   %end;
19805 +                   ;
19806 +         run;
19807 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19808 +      %end;
19809 +   %end;
19811 +  %end;
19813 +  /* create dataset to support tree diagram and icicle plot */
19814 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19815 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19817 +  /* display tree diagram */
19818 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19819 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19821 +  /* display icicle diagram */
19822 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19823 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19825 +  /* Leaf Statistics Plot */
19826 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19828 +  /* print leaf information to output window */
19829 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19831 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19832 +       by descending N;
19833 +     run;
19835 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19836 +     %local vn;
19837 +     data _null_;
19838 +       set t (obs=2) end=eof;
19839 +       if eof then do;
19840 +         call symput("vn", strip(put(vn, best.)));
19841 +       end;
19842 +     run;
19844 +     data t;
19845 +       set t;
19846 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19847 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19848 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19849 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19850 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19851 +       %end;
19852 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19853 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19854 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19855 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19856 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19857 +          %end;
19858 +       %end;
19859 +       ;
19860 +     run;
19862 +     /* determine if rase is found in t */
19863 +    %let dsid=%sysfunc(open(t,i));
19864 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19865 +    %let rc=%sysfunc(close(&dsid));
19867 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19868 +     proc print data=t noobs label;
19869 +       where tprob ne .;
19870 +       var node depth N tprob
19871 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19872 +         %if "&vn" ne "." %then %do;
19873 +           VN
19874 +         %end;
19875 +         vprob
19876 +       %end;
19877 +       %if &raseexists %then %do;
19878 +            RASE
19879 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19880 +              VRASE
19881 +            %end;
19882 +       %end;
19883 +       ;
19884 +     run;
19885 +     title10;
19886 +  %end;
19888 +  /* create plots that are done during training of node */
19889 +  /* display iterative plot, including reference line */
19890 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19891 +   /* %if &nleaves eq  %then %do; */
19892 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19893 +      data _null_;
19894 +        set &EM_USER_OUTTOPOLOGY end=eof;
19895 +        if eof then do;
19896 +          call symput('nleaves', LEAF);
19897 +        end;
19898 +      run;
19899 +   /* %end; */
19901 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19902 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19903 +  %end;
19905 +  /* display leaf statistics */
19906 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19908 +  /* stats by node if multiple targets = Y */
19909 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19910 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19911 +    data &EM_USER_OUTSTATS;
19912 +      set &EM_USER_OUTSTATS;
19914 +     * if STATNAME="TARGET" then delete;
19915 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19916 +      drop leaf;
19917 +    run;
19918 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19920 +  %end;
19921 +  %else %do;
19922 +    /* add outstats and outdescribe to spk but not results */
19923 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19924 +  %end;
19926 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE5_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS1.TREE5_OUTIMPORT.
NOTE: The data set EMWS1.TREE5_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE5_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE5_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 32 observations read from the data set EMWS1.TREE5_OUTSEQ.
NOTE: The data set EMWS1.TREE5_OUTSEQ has 32 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS1.TREE5_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS1.TREE5_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS1.TREE5_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 23 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 23 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 27 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 225 observations read from the data set EMWS1.TREE5_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 8 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 8 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set EMWS1.TREE5_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 28 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 8 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 28 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 28 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 28 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE5_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE5_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 196 observations read from the data set EMWS1.TREE5_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 196 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 196 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 168 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 28 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 196 observations read from the data set EMWS1.TREE5_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 196 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 196 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 28 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 196 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 196 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 196 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 196 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 56 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 28 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 56 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 56 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 28 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPPROB.
NOTE: There were 56 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 56 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 56 observations read from the data set WORK.TEMPPROB.
NOTE: There were 28 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 28 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 28 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 28 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 28 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 28 observations read from the data set WORK.TEMPN.
NOTE: There were 28 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 28 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE5_TREE_PLOT has 28 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 196 observations read from the data set EMWS1.TREE5_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 56 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 56 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 28 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 28 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 28 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 28 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 28 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 20 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 20 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set EMWS1.TREE5_TREE_PLOT.
NOTE: There were 20 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE5_TREE_PLOT has 28 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 28 observations read from the data set EMWS1.TREE5_TREE_PLOT.
NOTE: The data set WORK.T has 28 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 28 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 28 observations read from the data set EMWS1.TREE5_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
19927
19928  *------------------------------------------------------------*;
19929  * End REPORT: Tree5;
19930  *------------------------------------------------------------*;
 
19931  /* Reset EM Options */
19932  options formchar="|----|+|---+=|-/\<>*";
19933  options nocenter ls=256 ps=10000;
19934  goptions reset=all device=GIF NODISPLAY;
 
19935  proc sort data=WORK.EM_USER_REPORT;
19936  by ID VIEW;
19937  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19938  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19939  by NAME;
19940  run;
 
NOTE: There were 14 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19941  proc sort data=EMWS1.Tree5_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19942  by NAME;
19943  run;
 
NOTE: There were 14 observations read from the data set EMWS1.TREE5_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19944  data WORK.ASSESS_META;
19945  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19946  by NAME;
19947  run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19948  data EM_temp_assessMeta;
19949  set EMWS1.Tree5_CMeta_TRAIN;
19950  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19951  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE5_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19952  data EM_temp_assessdata;
19953  set EMWS1.Tree5_TRAIN(keep=
19954  F_TargetBuy
19955  I_TargetBuy
19956  P_TargetBuy0
19957  P_TargetBuy1
19958  Q_TargetBuy0
19959  Q_TargetBuy1
19960  R_TargetBuy0
19961  R_TargetBuy1
19962  U_TargetBuy
19963  V_TargetBuy0
19964  V_TargetBuy1
19965  _WARN_
19966  TargetBuy
19967  );
19968  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE5_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 8889 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 8889 observations read from the data set EMWS1.TREE5_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 8889 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24253   data EM_temp_assessMeta;
24254   set EMWS1.Tree5_CMeta_TRAIN;
24255   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24256   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE5_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24257   data EM_temp_assessdata;
24258   set EMWS1.Tree5_VALIDATE(keep=
24259   F_TargetBuy
24260   I_TargetBuy
24261   P_TargetBuy0
24262   P_TargetBuy1
24263   Q_TargetBuy0
24264   Q_TargetBuy1
24265   R_TargetBuy0
24266   R_TargetBuy1
24267   U_TargetBuy
24268   V_TargetBuy0
24269   V_TargetBuy1
24270   _WARN_
24271   TargetBuy
24272   );
24273   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE5_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 6667 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 6667 observations read from the data set EMWS1.TREE5_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 6667 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28567   %let _cn = %sysfunc(getoption(CENTER));
28568   options nocenter;
28569   proc print data=EMWS1.Tree5_EMREPORTFIT noobs label;
28570   var STAT LABEL TRAIN
28571   VALIDATE
28572   TEST
28573   ;
28574   by TARGET TARGETLABEL;
28575   title9 ' ';
28576   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28577   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE5_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28578   title10;
28579   options &_cn;
 
28580   proc sort data=EMWS1.Tree5_EMCLASSIFICATION nothreads;
28581   by DATAROLE TARGET TARGETLABEL;
28582   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE5_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE5_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28583   %let _cn = %sysfunc(getoption(CENTER));
28584   options nocenter;
28585   proc print data=EMWS1.Tree5_EMCLASSIFICATION noobs label;
28586   var from into pct_row pct_col count percent
28587   ;
28588   by DATAROLE TARGET TARGETLABEL;
28589   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28590   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28591   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28592   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28593   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28594   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28595   where _TYPE_='PREDICTION';
28596   title9 ' ';
28597   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28598   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE5_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28599   title9;
28600   title10;
28601   options &_cn;
 
28602   %let _cn = %sysfunc(getoption(CENTER));
28603   options nocenter;
28604   data EMWS1.Tree5_EMEVENTREPORT;
28605   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28605 !  8;
28606   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28606 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28606 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28606 ! FALSEEVENT
28607   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28607 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28607 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28608      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28609   FALSEEVENT=0;
28610   FALSENEVENT=0;
28611   TRUEEVENT=0;
28612   TRUENEVENT=0;
28613   set EMWS1.Tree5_EMEVENTREPORT;
28614   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE5_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE5_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28615   proc print data=EMWS1.Tree5_EMEVENTREPORT noobs label;
28616   title9 ' ';
28617   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28618   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28619   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE5_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28620   title10;
28621   options &_cn;
 
28622   proc datasets library=EMWS1 nolist;
28623   modify Tree5_EMRANK;
28624   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28625   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28626   run;
 
NOTE: MODIFY was successful for EMWS1.TREE5_EMRANK.DATA.
28627   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28628   %let _cn = %sysfunc(getoption(CENTER));
28629   options nocenter;
28630   proc print data=EMWS1.Tree5_EMRANK label noobs;
28631   var
28632   decile gain lift liftc resp respc N _meanP_;
28633   by
28634   notsorted DATAROLE
28635   notsorted TARGET
28636   notsorted TARGETLABEL
28637   ;
28638   title9 ' ';
28639   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28640   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE5_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28641   title10;
28642   options &_cn;
 
28643   proc datasets library=EMWS1 nolist;
28644   modify Tree5_EMSCOREDIST;
28645   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28646   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28647   run;
 
NOTE: MODIFY was successful for EMWS1.TREE5_EMSCOREDIST.DATA.
28648   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
