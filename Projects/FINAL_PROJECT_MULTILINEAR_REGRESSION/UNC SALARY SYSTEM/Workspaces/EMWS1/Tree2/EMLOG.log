*------------------------------------------------------------*
User:                Intern Three
Date:                April 21, 2016
Time:                05:42:40
Site:                70085778
Platform:            X64_7HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 21, 2016
Time:                05:42:09
*------------------------------------------------------------*
14715  proc freq data=EMWS1.Tree2_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.Tree2META;
14717  run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.Tree2META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 8 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
"No decisions defined for target "totalsal"."
14726  proc print data = EMWS1.Ids_totalsal_DM noobs label;
14727  var _type_ variable label;
14728  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14729  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14730  title9 ' ';
14731  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14732  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14733  title10;
 
14734  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15257  *------------------------------------------------------------*;
15258  * Tree2: Generation of macros and macro variables;
15259  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15260  *------------------------------------------------------------*;
 
15261  %let EMEXCEPTIONSTRING=;
15262  *------------------------------------------------------------*;
15263  * TRAIN: Tree2;
15264  *------------------------------------------------------------*;
15265  %let EM_ACTION = TRAIN;
15266  %let syscc = 0;
15267  %macro main;
15268
15269    %if %upcase(&EM_ACTION) = CREATE %then %do;
15270      filename temp catalog 'sashelp.emmodl.tree_create.source';
15271      %include temp;
15272      filename temp;
15273
15274      %em_tree_create;
15275    %end;
15276
15277     %else
15278     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15279
15280         filename temp catalog 'sashelp.emmodl.tree_train.source';
15281         %include temp;
15282         filename temp;
15283         %em_tree_train;
15284     %end;
15285
15286    %else
15287    %if %upcase(&EM_ACTION) = SCORE %then %do;
15288      filename temp catalog 'sashelp.emmodl.tree_score.source';
15289      %include temp;
15290      filename temp;
15291
15292      %em_tree_score;
15293
15294    %end;
15295
15296    %else
15297    %if %upcase(&EM_ACTION) = REPORT %then %do;
15298
15299         filename temp catalog 'sashelp.emmodl.tree_report.source';
15300         %include temp;
15301         filename temp;
15302
15303         %em_tree_report;
15304     %end;
15305
15306    %else
15307    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15308
15309         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15310         %include temp;
15311         filename temp;
15312         %EM_TREE_OPENTREEVIEWER;
15313
15314     %end;
15315
15316    %else
15317    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15318
15319         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15320         %include temp;
15321         filename temp;
15322         %EM_TREE_CLOSETREEVIEWER;
15323
15324     %end;
15325
15326
15327     %doendm:
15328  %mend main;
15329
15330  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15332 +%macro em_tree_train;
15334 +   %if &EM_IMPORT_DATA eq %then %do;
15335 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15336 +       %put &em_codebar;
15337 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15338 +       %put &errormsg;
15339 +       %put &em_codebar;
15340 +       %goto doendm;
15341 +   %end;
15342 +   %else
15343 +       %let EMEXCEPTIONSTRING =;
15345 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15346 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15347 +        %put &em_codebar;
15348 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15349 +        %put &errormsg;
15350 +        %put &em_codebar;
15351 +        %goto doendm;
15352 +   %end;
15354 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15355 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15356 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15357 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15358 +        %put &em_codebar;
15359 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15360 +        %put &errormsg;
15361 +        %put &em_codebar;
15362 +        %goto doendm;
15363 +   %end;
15365 +   /* Initialize property macro variables */
15366 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15367 +   %include temp;
15368 +   filename temp;
15370 +   %EM_SetProperties;
15372 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15373 +   %EM_GETNAME(key=EMTREE, type=DATA);
15374 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15375 +     /* if import eq Y and no importtable defined, throw an exception */
15376 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15377 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15378 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15379 +         %put &em_codebar;
15380 +         %put &errmsg;
15381 +         %put &em_codebar;
15382 +         %goto doendm;
15383 +      %end;
15384 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15385 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15386 +         %put &em_codebar;
15387 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15388 +         %put &errormsg;
15389 +         %put &em_codebar;
15390 +         %goto doendm;
15391 +      %end;
15392 +      %else %do;
15393 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15394 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15395 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15396 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15397 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15398 +         %let dsid = %sysfunc(close(&dsid));
15399 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15400 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15401 +            %put &em_codebar;
15402 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15403 +            %put &errormsg;
15404 +            %put &em_codebar;
15405 +            %goto doendm;
15406 +         %end;
15407 +      %end;
15408 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15409 +         proc delete data=&EM_USER_EMTREE;
15410 +         run;
15411 +      %end;
15412 +   %end;
15413 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15414 +      proc delete data=&EM_USER_EMTREE;
15415 +      run;
15416 +   %end;
15418 +   /* load tree macros */
15419 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15420 +   %include temp;
15421 +   filename temp;
15423 +   /* data sets */
15424 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15425 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15426 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15428 +   /* files */
15429 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15431 +   /* check actual num of target levels */
15432 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15433 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15434 +                              nLevel=_nTargetLevel );
15435 +      %if &_nTargetLevel  > 2 %then %do;
15436 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15437 +        %put &em_codebar;
15438 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15439 +        %put &errormsg;
15440 +        %put &em_codebar;
15441 +        %goto doendm;
15442 +      %end;
15443 +   %end;
15445 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15446 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15447 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15448 +        %let costflag=0;
15449 +        data _null_;
15450 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15451 +          if eof then call symput("costflag", _N_);
15452 +        run;
15453 +        %if &costflag gt 0 %then %do;
15454 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15455 +          %put &em_codebar;
15456 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15457 +          %put &errormsg;
15458 +          %put &em_codebar;
15459 +          %goto doendm;
15460 +       %end;
15461 +     %end;
15462 +   %end;
15464 +   /* determine if multiple targets will be processed */
15465 +   %let em_tree_multipleTargets=N;
15466 +   %let em_tree_numTarget = 1;
15467 +   %let em_tree_targetVars=;
15469 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15470 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15471 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15472 +         %let em_tree_multipleTargets=N;
15473 +      %end;
15474 +      %else %do;
15475 +         /* create macro array of targets  */
15476 +         data _null_;
15477 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15478 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15479 +           if eof then
15480 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15481 +        run;
15483 +        %if &em_tree_numTarget gt 1 %then %do;
15484 +           %let em_tree_multipleTargets=Y;
15485 +        %end;
15486 +      %end;
15487 +   %end;
15489 +   /* create view of only necessary variable for performance reasons */
15490 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15491 +   data &tempData / view=&tempData;
15492 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15493 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15494 +       %EM_TARGET
15495 +     %end;
15496 +     %else %do;
15497 +       %if &em_tree_numTarget ne 0 %then %do;
15498 +         %do i=1 %to &em_tree_numTarget;
15499 +            &&em_tree_targetVars&i
15500 +         %end;
15501 +       %end;
15502 +     %end;
15503 +     );
15504 +   run;
15506 +   /* run Tree procedure */
15507 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15509 +   /* Check return code and throw exception if error is detected */
15510 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15511 +   %if &syserr %then %do;
15512 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15513 +     %goto doendm;
15514 +   %end;
15516 +   /* add decision score code if multiple targets are processed */
15517 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15518 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15519 +   %end;
15521 +   /* create outfit dataset if multiple score statements have been executed */
15522 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15524 +   /* create English Rules */
15525 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15526 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15527 +       %em_tree_makeEnglishRules;
15529 +       /* English Rules */
15530 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15532 +     %end;
15533 +   filename x;
15535 +   %doendm:
15536 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15537 +%macro EM_SetProperties;
15539 +   /* train properties */
15540 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15541 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15542 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15543 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15544 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15545 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15546 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15547 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15548 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15549 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15550 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15551 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15552 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15553 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15554 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15555 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15556 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15557 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15558 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15559 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15560 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15561 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15562 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15563 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15564 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15565 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15566 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15567 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15568 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15569 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15570 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15571 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15572 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15573 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15574 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15575 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15576 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15577 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15578 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15579 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15580 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15582 +   /* properties for interactive sample */
15583 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15584 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15585 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15588 +   /* report properties */
15589 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15603 +   /* score properties */
15604 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15607 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15609 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15610 +  %global &nLevel;
15611 +  proc dmdb batch data=&indata
15612 +    classout=_tmp_dmdbout;
15613 +    class &target;
15614 +  run;
15615 +  data _tmp_dmdbout;
15616 +    set _tmp_dmdbout;
15617 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15618 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15619 +  run;
15620 +  data _null_;
15621 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15622 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15623 +    %let dsid = %sysfunc(close(&dsid));
15624 +     call symput("&nLevel", put(&_obs, Best12.));
15625 +  run;
15627 +  proc datasets lib=work nolist;
15628 +     delete _tmp_dmdbout;
15629 +  run;
15630 +  quit;
15631 +%Mend EM_CheckBinaryTargetLevel;
15634 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15636 +  /* determine the number of obs in training data */
15637 +  proc sql;
15638 +    reset noprint;
15639 +    select count(*) into :em_nobs from &indata;
15640 +  quit;
15642 +  /* determine the number of input variables */
15643 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15644 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15646 +  /* retrieve targetEvent from decmeta */
15647 +  %let targetEvent=;
15648 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15649 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15650 +      data _null_;
15651 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15652 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15653 +      run;
15654 +    %end;
15655 +  %end;
15657 +  /* create targetTable if multipleTar eq Y */
15658 +  data temptarget;
15659 +    set &EM_DATA_VARIABLESET;
15660 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15661 +  run;
15663 + /* data sets */
15664 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15665 + %EM_GETNAME(key=EMTREE,        type=DATA);
15666 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15667 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15668 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15669 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15670 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15671 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15672 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15673 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15675 + /* files */
15676 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15677 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15679 + /* turn on pmml if requested */
15680 + %let nnpmml=0;
15681 + %if %symexist(EM_PMML) %then %do;
15682 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15683 +       %let nnpmml=1;
15685 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15686 +%end;
15688 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15690 + %if &nnpmml or &numClassTarget %then %do;
15692 +       /* create dmdb needed for pmml generation */
15693 +       %let tree_maxlevel = 512;
15694 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15695 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15696 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15697 +         %end;
15698 +       %end;
15699 +       %if &tree_maxlevel gt 0 %then %do;
15700 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15701 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15702 +       %end;
15704 +       %let targetOrderString =;
15705 +       %let targetString = ;
15706 +       data _null_;
15707 +          length orderString nameString $10000;
15708 +          retain orderString nameString;
15709 +          set &em_data_variableset end=eof;
15710 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15711 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15712 +          %end;
15713 +          %else %do;
15714 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15715 +          %end;          select(order);
15716 +            when('')        order ='DESC';
15717 +            when('FMTASC')  order='ASCFMT';
15718 +            when('FMTDESC') order='DESFMT';
15719 +            otherwise;
15720 +          end;
15721 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15722 +          nameString = trim(nameString)!!' '!!trim(NAME);
15724 +          if eof then do;
15725 +             call symput('targetOrderString', trim(orderString));
15726 +             call symput('targetString', trim(nameString));
15727 +          end;
15728 +       run;
15730 +       %let arborkluge= "work._treeDMDB";
15732 +       proc dmdb batch data=&indata
15733 +       %if &nnpmml %then %do;
15734 +           PMML
15735 +       %end;
15736 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15739 +   %if &nnpmml %then %do;
15740 +        %if "%EM_ID" ne "" %then %do;
15741 +          id %EM_ID;
15742 +        %end;
15743 +        %if &EM_NUM_CLASS gt 0 %then %do;
15744 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15745 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15746 +               &targetOrderString;
15747 +        %end;
15748 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15749 +          var %EM_INTERVAL;
15750 +        %end;
15751 +        target &targetString %EM_INTERVAL_TARGET;
15752 +        %if "%EM_FREQ" ne "" %then %do;
15753 +          freq %EM_FREQ;
15754 +        %end;
15755 +  %end;
15756 +  %else %do;
15757 +      class  &targetOrderString;
15758 +      target &targetString %EM_INTERVAL_TARGET;
15759 +  %end;
15760 +       run;
15761 +       quit;
15763 +       proc datasets lib=work nolist;
15764 +          delete classout varout;
15765 +       run;
15766 +       quit;
15768 +    %end;
15769 + %end;
15771 + /* run Arbor procedure */
15772 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15773 +  proc arbor data=&INDATA
15775 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15776 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15777 +  %end;
15779 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15780 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15781 +  %end;
15783 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15784 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15785 +  %end;
15787 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15788 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15789 +  %end;
15791 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15792 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15793 +  %end;
15795 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15796 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15797 +  %end;
15798 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15799 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15800 +  %end;
15801 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15802 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15803 +  %end;
15805 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15806 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15807 +      alpha = &EM_PROPERTY_SIGLEVEL
15808 +    %end;
15809 +  %end;
15811 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15812 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15813 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15814 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15815 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15817 +        padjust =
15818 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15819 +          &chaid
15820 +        %end;
15821 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15822 +          DEPTH
15823 +        %end;
15824 +      %end;
15825 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15826 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15827 +         pvars = &num_inputs
15828 +      %end;
15829 +    %end;
15830 +  %end;
15831 +  %else %do;
15832 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15833 +         padjust = NONE
15834 +      %end;
15835 +  %end;
15837 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15838 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15839 +    Maxrules = &num_nrules
15840 +  %end;
15842 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15843 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15844 +    Maxsurrs = &num_nsurrs
15845 +  %end;
15847 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15848 +     Missing=&EM_PROPERTY_MISSINGVALUE
15849 +  %end;
15851 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15852 +     USEVARONCE
15853 +  %end;
15855 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15856 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15857 +  %end;
15860 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15861 +    event = "&targetEvent"
15862 +  %end;
15864 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15865 +     DECSEARCH
15866 +  %end;
15868 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15869 +     PRIORSSEARCH
15870 +  %end;
15872 +  %if &arbor_1 ne %then %do;
15873 +    &arbor_1
15874 +  %end;
15876 +  %if &em_arbor ne %then %do;
15877 +     &em_arbor
15878 +  %end;
15879 +  ;
15880 + %end;
15881 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15882 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15883 +       interact;
15884 + %end;
15885 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15886 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15887 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15888 +    %put &em_codebar;
15889 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15890 +    %put &errormsg;
15891 +    %put &em_codebar;
15892 +    %goto doendm;
15893 +   %end;
15894 +   %else %do;
15895 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15896 +       interact;
15897 +   %end;
15898 + %end;
15900 + %else %do;
15901 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15902 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15903 +    %put &em_codebar;
15904 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15905 +    %put &errormsg;
15906 +    %put &em_codebar;
15907 +    %goto doendm;
15908 +   %end;
15909 +   %else %do;
15910 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15911 +        interact;
15912 +   %end;
15913 + %end;
15915 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15916 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15917 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15918 +    %end;
15920 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15921 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15922 +    %end;
15924 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15925 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15926 +    %end;
15928 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15929 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15930 +    %end;
15932 +    %if "%EM_FREQ" ne "" %then %do;
15933 +       freq %EM_FREQ;
15934 +    %end;
15936 +    %if "&multipleTar" eq "Y" %then %do;
15937 +       /* cycle through all target vars in variableset */
15938 +       %let tdsid = %sysfunc(open(temptarget));
15939 +       %if &tdsid %then %do;
15940 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15941 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15942 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15943 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15944 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15945 +             target &var / level = &lvl
15946 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15947 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15948 +             %end;
15949 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15950 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15951 +             %end;
15952 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15953 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15954 +             %end;
15955 +          %end;
15956 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
15957 +       %end;
15958 +       useTarget variable = %EM_TARGET;
15959 +    %end;
15960 +    %else %do;
15961 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
15962 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
15963 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
15964 +      %end;
15965 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15966 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
15967 +      %end;
15968 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15969 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
15970 +      %end;
15971 +    %end;
15973 +    %if "&multipleTar" eq "N" %then %do;
15974 +      &EM_DEC_STATEMENT;
15975 +    %end;
15977 +    Performance &EM_PROPERTY_PERFORMANCE
15978 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
15979 +      nodesize=&EM_PROPERTY_NODESAMPLE
15980 +    %end;
15981 +    ;
15983 +    %if "&intFlag" eq "Y" %then %do;
15984 +       INTERACT Largest;
15985 +       Train maxnewdepth=0;
15986 +    %end;
15988 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
15989 +         Assess
15990 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
15991 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
15992 +              %put &em_codebar;
15993 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
15994 +              %put &errormsg;
15995 +              %put &em_codebar;
15996 +            %end;
15997 +            %else %do;
15998 +               Validata=&EM_IMPORT_VALIDATE
15999 +            %end;
16000 +         %end;
16001 +         %else %do;
16002 +           NoValidata
16003 +         %end;
16004 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16005 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16006 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16007 +               %if &dsid %then %do;
16008 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16009 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16010 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16011 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16012 +                   %else %do;
16013 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16014 +                      %else %let measure= MISC;
16015 +                   %end;
16016 +                 %end;
16017 +               %end;
16018 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16019 +            %end;
16020 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16021 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16022 +                 %let measure=ASE;
16023 +              %end;
16024 +              %else %do;
16025 +                 %let measure=MISC;
16026 +              %end;
16027 +            %end;
16028 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16029 +              %let measure=ASE;
16030 +            %end;
16031 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16032 +               %let measure = LIFT;
16033 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16034 +               %if &dsid %then %do;
16035 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16036 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16037 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16038 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16039 +                 %end;
16040 +               %end;
16041 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16042 +            %end;
16043 +            measure=&measure
16044 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16045 +               event = "&targetEvent"
16046 +            %end;
16047 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16048 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16049 +            %end;
16050 +         %end;
16051 +         %if "&multipleTar" eq "N" %then %do;
16052 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16053 +               CV
16054 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16055 +                 CVNITer = &EM_PROPERTY_CVNITER
16056 +               %end;
16057 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16058 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16059 +               %end;
16060 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16061 +                 CVSeed = &EM_PROPERTY_CVSEED
16062 +               %end;
16063 +            %end;
16064 +         %end;
16065 +       %end;
16066 +      ;
16068 +      %if "&intFlag" ne "Y" %then %do;
16069 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16070 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16071 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16072 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16074 +          SUBTREE &subtree
16075 +          %if "&subtree" eq "NLEAVES" %then %do;
16076 +            =&EM_PROPERTY_NSUBTREE
16077 +          %end;
16078 +          ;
16079 +        %end;
16081 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16082 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16083 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16084 +          %end;
16085 +       %end;
16086 +      %end;
16087 + %end;
16090 + MakeMacro nleaves = nleaves;
16091 + save
16092 + %if "&EM_USER_EMTREE" ne "" %then %do;
16093 +   MODEL=&EM_USER_EMTREE
16094 + %end;
16095 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16096 +   SEQUENCE=&EM_USER_OUTSEQ
16097 + %end;
16098 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16099 +   IMPORTANCE=&EM_USER_OUTIMPORT
16100 + %end;
16101 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16102 +   NODESTAT=&EM_USER_OUTNODES
16103 + %end;
16104 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16105 +   SUMMARY=&EM_USER_OUTSUMMARY
16106 + %end;
16107 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16108 +   STATSBYNODE=&EM_USER_OUTSTATS
16109 + %end;
16110 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16111 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16112 + %end;
16113 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16114 +   Pathlistnonmissing=&EM_USER_OUTPATH
16115 + %end;
16116 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16117 +   RULES = &EM_USER_OUTRULES
16118 + %end;
16119 + ;
16121 + %if "&intFlag" ne "Y" %then %do;
16123 +   %let lookupString = ;
16124 +   %if ^%symexist(EM_OPTION) %then
16125 +      %let EM_OPTION=;
16127 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16128 +      %let lookupString = LOOKUP=SELECT;
16129 +   %end;
16131 +   %let codetext=;
16132 +   %let norescodetxt=;
16134 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16135 +     %let codetext=&codetext DUMMY;
16136 +     %let norescodetxt=&norescodetxt DUMMY;
16137 +   %end;
16138 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16139 +     %let codetext=&codetext NOLEAFID;
16140 +     %let norescodetxt=&norescodetxt NOLEAFID;
16141 +   %end;
16142 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16143 +     %let norescodetxt=&norescodetxt NOPRED;
16144 +   %end;
16146 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16147 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16149 +   %if &nnpmml %then %do;
16150 +     code pmml;
16151 +   %end;
16153 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16154 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16155 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16156 +   %end;
16157 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16158 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16159 +   %end;
16160 + %end;
16162 + run;
16163 + quit;
16165 + /*%em_checkerror(); */
16166 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16167 +   /* Delete DMDB catalog */
16168 +   proc datasets lib=work nolist;
16169 +       delete _treeDMDB / mt=cat;
16170 +  run;
16171 +  %end;
16173 + %if &nnpmml %then %do;
16174 +    ods pmml close;
16175 + %end;
16177 +  %doendm:
16179 +%mend em_tree_runTreeProcedure;
16181 +%macro em_tree_createFitStats( multipleTar= );
16184 +  /* create targetTable is multipleTar eq Y */
16185 +  data temptarget;
16186 +    set &EM_DATA_VARIABLESET;
16187 +    where ROLE="TARGET";
16188 +  run;
16190 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16191 +   data &EM_USER_EMOUTFIT;
16192 +     length target $32;
16193 +     merge work.fit_train
16194 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16195 +       work.fit_valid
16196 +     %end;
16197 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16198 +       work.fit_test
16199 +     %end;
16200 +     ;
16201 +     %if "&multipleTar" eq "N" %then %do;
16202 +       target="%EM_TARGET";
16203 +     %end;
16204 +     %else %do;
16205 +       target = _TARGET_;
16206 +     %end;
16207 +     drop _NW_ _SUMW_
16208 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16209 +        _VSUMW_
16210 +     %end;
16211 +     ;
16212 +   run;
16214 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16215 +     proc datasets library=work nolist;
16216 +       delete fit_valid;
16217 +     run;
16218 +   %end;
16219 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16220 +     proc datasets library=work nolist;
16221 +       delete fit_test;
16222 +     run;
16223 +   %end;
16225 +%mend em_tree_createFitStats;
16228 +%macro em_tree_makeEnglishRules;
16230 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16231 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16233 +  /* verify that necessary tables exist and if not, skip processing */
16234 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16235 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16236 +    %goto doendm;
16237 +  %end;
16238 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16239 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16240 +    %goto doendm;
16241 +  %end;
16243 +  /* determine length of variable in outpath dataset */
16244 +  %let vlength= ;
16245 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16246 +  %if &dsid ne %then %do;
16247 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16248 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16249 +  %end;
16250 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16252 +  data tempoutpath;
16253 +    length varname $&vlength;
16254 +    retain varname;
16255 +    set &EM_USER_OUTPATH;
16257 +    if ^missing(variable) then varname=variable;
16258 +    else if ^missing(var_name) then varname=var_name;
16259 +    output;
16260 +  run;
16262 +  /* create an array of generated predicted variable names */
16263 +  %let tree_pred_vars = ;
16264 +  %let tree_pred_label = ;
16265 +  %let numpred= 0;
16266 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16268 +    data _null_;
16269 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16270 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16271 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16272 +     if eof then
16273 +       call symput('numpred', strip(put(_N_, BEST.)));
16274 +    run;
16275 +  %end;
16277 +  /* determine if NPRIORS exists in outnodes  */
16278 +  %local nprior_flag;
16279 +  data _null_;
16280 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16281 +    if eof then do;
16282 +      call symput('nprior_flag', strip(put(npriors, best.)));
16283 +    end;
16284 +  run;
16286 +  proc sort data=tempoutpath; by node; run;
16287 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16289 +  data tempoutpath;
16290 +    merge tempoutpath(in=_a) outnodes(keep= node
16291 +    %if "&nprior_flag" ne "." %then %do;
16292 +      NPRIORS
16293 +    %end;
16294 +    %else %do;
16295 +      N
16296 +    %end;
16297 +    %if &numpred gt 0 %then %do;
16298 +      %do i=1 %to &numpred;
16299 +        &&tree_pred_vars&i
16300 +      %end;
16301 +    %end;
16302 +    );
16303 +    by node;
16304 +    if _a;
16305 +  run;
16307 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16309 +  data _null_;
16310 +    file x;
16311 +    set tempoutpath;
16312 +    by node descending varname;
16313 +    retain origvar oldnode string;
16314 +    length origvar $32 oldnode 8 string $200;
16316 +    if _N_ = 1 then do;
16317 +      origvar = varname;
16318 +      oldnode = node;
16319 +    end;
16321 +    if first.node then do;
16322 +       put "&EM_CODEBAR";
16323 +       put " Node = " node;
16324 +       put "&EM_CODEBAR";
16325 +    end;
16327 +      if first.varname then do;
16328 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16329 +            if MISSING(CHARACTER_VALUE) then do;
16330 +             if NUMERIC_VALUE ne .  then do;
16331 +              if ^first.node then do;
16332 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16333 +              end;
16334 +              else do;
16335 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16336 +              end;
16337 +             end;
16338 +            end;
16339 +            else do;
16340 +              if ^first.node then do;
16341 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16342 +              end;
16343 +              else do;
16344 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16345 +              end;
16346 +             end;
16347 +         end;
16348 +         else if RELATION in ("=") then do;
16349 +            if ^first.node then do;
16350 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16351 +            end;
16352 +            else do;
16353 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16354 +            end;
16355 +         end;
16356 +         else if RELATION in ("ISMISSING") then do;
16357 +            if ^first.node then do;
16358 +              string = " AND "|| strip(varname) || " equals Missing";
16359 +            end;
16360 +            else do;
16361 +              string = "if "|| strip(varname) ||" equals Missing";
16362 +            end;
16363 +         end;
16364 +         else if RELATION in ("ISNOTMISSING") then do;
16365 +            if ^first.node then do;
16366 +              string = " AND "|| strip(varname) || " equals All Values";
16367 +            end;
16368 +            else do;
16369 +              string = "if "|| strip(varname) ||" equals All Values";
16370 +            end;
16371 +         end;
16372 +         if ^missing(varname) then origvar = varname;
16373 +         oldnode=node;
16375 +      end;
16376 +      else do;
16377 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16378 +          if MISSING(CHARACTER_VALUE) then do;
16379 +           if  NUMERIC_VALUE ne .  then do;
16380 +            if ^MISSING(string) then
16381 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16382 +            else
16383 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16384 +           end;
16385 +          end;
16386 +          else do;
16387 +            if ^MISSING(string) then
16388 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16389 +            else
16390 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16391 +          end;
16393 +         end;
16394 +         else if RELATION in ("=") then do;
16395 +           string = strip(string)||", "||strip(character_value);
16396 +         end;
16397 +         else if RELATION in ("ISMISSING") then do;
16399 +         end;
16400 +         if ^missing(varname) then origvar = varname;
16401 +         oldnode=node;
16402 +      end;
16403 +      if last.varname then do;
16404 +         if RELATION in ("ISMISSING") then do;
16405 +           if ^first.varname then do;
16406 +             string = strip(string) || " or MISSING";
16407 +           end;
16408 +         end;
16409 +         put string;
16410 +         if ^missing(varname) then origvar = varname;
16411 +         oldnode=node;
16412 +      end;
16414 +      if last.node then do;
16415 +         put "then ";
16416 +         put " Tree Node Identifier   = " node;
16418 +         %if "&nprior_flag" ne "." %then %do;
16419 +           put " Number of Observations = " NPRIORS;
16420 +         %end;
16421 +         %else %do;
16422 +           put " Number of Observations = " N;
16423 +         %end;
16425 +         %if &numpred gt 0 %then %do;
16426 +           %do i=1 %to &numpred;
16427 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16428 +           %end;
16429 +         %end;
16431 +         put " ";
16432 +         if ^missing(varname) then origvar = varname;
16433 +         oldnode=node;
16434 +      end;
16436 +  run;
16438 +  proc datasets lib=work nolist;
16439 +    delete tempoutpath outnodes;
16440 +  run;
16442 +  %doendm:
16443 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596892 kilobytes of physical memory.
NOTE: Will use 6616 out of 6616 training cases.
NOTE: Using memory pool with 146240512 bytes.
NOTE: Will not search for split on variable campus.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 12 times.
NOTE: Training used 2181040 bytes of work memory.
NOTE: The subtree sequence contains 46 subtrees. The largest has 91 nodes and 46 leaves.
NOTE: Using subtree with 87 nodes and 44 leaves.
NOTE: Using subtree with 87 nodes and 44 leaves.
NOTE: Created macro variable NLEAVES equal to 44.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 12 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_EMTREE has 4324 observations and 4 variables.
NOTE: The data set EMWS1.TREE2_OUTNODES has 87 observations and 16 variables.
NOTE: The data set EMWS1.TREE2_OUTPATH has 222 observations and 7 variables.
NOTE: The data set EMWS1.TREE2_OUTRULES has 1871 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 46 observations and 18 variables.
NOTE: The data set EMWS1.TREE2_OUTSTATS has 522 observations and 4 variables.
NOTE: The data set EMWS1.TREE2_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE2_OUTTOPOLOGY has 87 observations and 5 variables.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\TREEFLOW.sas opened.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
 
 
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.55 seconds
      cpu time            0.54 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 6616 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.56 seconds
      cpu time            0.56 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 222 observations read from the data set EMWS1.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 222 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 222 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 222 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 87 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 222 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 87 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 222 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 222 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 222 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:16,
      Create Time=21Apr2016:05:42:16
 
NOTE: 437 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 222 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
NOTE: Fileref X has been deassigned.
16445
16446  *------------------------------------------------------------*;
16447  * End TRAIN: Tree2;
16448  *------------------------------------------------------------*;
 
16449  *------------------------------------------------------------*;
16450  * Close any missing semi colons;
16451  *------------------------------------------------------------*;
16452  ;
16453  ;
16454  ;
16455  ;
16456  quit;
16457  *------------------------------------------------------------*;
16458  * Close any unbalanced quotes;
16459  *------------------------------------------------------------*;
16460  /*; *"; *'; */
16461  ;
16462  run;
16463  quit;
16464  /* Reset EM Options */
16465  options formchar="|----|+|---+=|-/\<>*";
16466  options nocenter ls=256 ps=10000;
16467  goptions reset=all device=GIF NODISPLAY;
 
16468  proc sort data=WORK.EM_USER_REPORT;
16469  by ID VIEW;
16470  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 21, 2016
Time:                05:42:17
*------------------------------------------------------------*
16572  %let EMEXCEPTIONSTRING=;
16573  *------------------------------------------------------------*;
16574  * SCORE: Tree2;
16575  *------------------------------------------------------------*;
16576  %let EM_ACTION = SCORE;
16577  %let syscc = 0;
16578  %macro main;
16579
16580    %if %upcase(&EM_ACTION) = CREATE %then %do;
16581      filename temp catalog 'sashelp.emmodl.tree_create.source';
16582      %include temp;
16583      filename temp;
16584
16585      %em_tree_create;
16586    %end;
16587
16588     %else
16589     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16590
16591         filename temp catalog 'sashelp.emmodl.tree_train.source';
16592         %include temp;
16593         filename temp;
16594         %em_tree_train;
16595     %end;
16596
16597    %else
16598    %if %upcase(&EM_ACTION) = SCORE %then %do;
16599      filename temp catalog 'sashelp.emmodl.tree_score.source';
16600      %include temp;
16601      filename temp;
16602
16603      %em_tree_score;
16604
16605    %end;
16606
16607    %else
16608    %if %upcase(&EM_ACTION) = REPORT %then %do;
16609
16610         filename temp catalog 'sashelp.emmodl.tree_report.source';
16611         %include temp;
16612         filename temp;
16613
16614         %em_tree_report;
16615     %end;
16616
16617    %else
16618    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16619
16620         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16621         %include temp;
16622         filename temp;
16623         %EM_TREE_OPENTREEVIEWER;
16624
16625     %end;
16626
16627    %else
16628    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16629
16630         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16631         %include temp;
16632         filename temp;
16633         %EM_TREE_CLOSETREEVIEWER;
16634
16635     %end;
16636
16637
16638     %doendm:
16639  %mend main;
16640
16641  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16643 +%macro em_tree_score;
16645 +   /* determine if multiple targets will be processed */
16646 +   %let em_tree_multipleTargets=N;
16647 +   %let em_tree_numTarget=1;
16648 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16649 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16650 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16651 +         %let em_tree_multipleTargets=N;
16652 +      %end;
16653 +      %else %do;
16654 +         /* create macro array of targets  */
16655 +         data _null_;
16656 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16657 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16658 +           if eof then
16659 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16660 +        run;
16662 +        %if &em_tree_numTarget gt 1 %then %do;
16663 +           %let em_tree_multipleTargets=Y;
16664 +        %end;
16665 +      %end;
16666 +   %end;
16668 +   /* build flow and publish scoring code */
16669 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16670 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16672 +   filename treeflow "&EM_USER_TREEFLOW";
16673 +   filename treepub "&EM_USER_TREEPUBLISH";
16675 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16676 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16678 +   %em_copyfile(infref=treeflow, outfref=flowref);
16679 +   %em_copyfile(infref=treepub, outfref=pubref);
16681 +   filename treeflow;
16682 +   filename treepub;
16684 +   /* if priors are used, add code to generate unadjusted residuals in export */
16685 +   %let useAdjPriors = N;
16686 +   data _null_;
16687 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16688 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16689 +   run;
16690 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16691 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16692 +      %include temp;
16693 +      filename temp;
16695 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16696 +      filename adjref "&EM_USER_adjResidualCode";
16697 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16699 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16701 +      filename adjref;
16702 +   %end;
16704 +   /* LEAF */
16705 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16706 +      data _null_;
16707 +        file flowref mod;
16708 +        put 'drop _LEAF_;';
16709 +      run;
16711 +      data _null_;
16712 +        file pubref mod;
16713 +        put 'drop _LEAF_;';
16714 +      run;
16716 +   %end;
16718 +   filename flowref;
16719 +   filename pubref;
16721 +   /* em_metachange code */
16722 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16723 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16724 +   %end;
16726 +   /* variable selection based on importance stat    */
16727 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16728 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16729 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16730 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16731 +     %let obs = %sysfunc(fetch(&dsid));
16732 +     %do %while(&obs=0);
16733 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16734 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16735 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16736 +       %let obs = %sysfunc(fetch(&dsid));
16737 +     %end;
16738 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16739 +   %end;
16741 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16742 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16743 +    %let tree_pred_vars = ;
16744 +    %let tree_pred_lvl =;
16745 +    %let numpred= 0;
16747 +    data _null_;
16748 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16749 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16750 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16751 +     if eof then
16752 +       call symput('numpred', strip(put(_N_, BEST.)));
16753 +    run;
16754 +   %end;
16756 +   %if &numpred ne 0 %then %do;
16757 +    %do i=1 %to &numpred;
16758 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16759 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16760 +    %end;
16761 +   %end;
16763 +   /* determine if multiple targets will be processed */
16764 +   %let em_tree_multipleTargets=N;
16765 +   %let em_tree_numTarget=1;
16766 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16767 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16768 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16769 +         %let em_tree_multipleTargets=N;
16770 +      %end;
16771 +      %else %do;
16772 +        data _null_;
16773 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16774 +          if eof then
16775 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16776 +        run;
16778 +        %if &em_tree_numTarget gt 1 %then %do;
16779 +           %let em_tree_multipleTargets=Y;
16780 +        %end;
16781 +     %end;
16782 +   %end;
16784 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16785 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16787 +      /* variable importance */
16788 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16789 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16791 +         %let validexist=0;
16792 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16793 +           %let validexist=1;
16794 +         %end;
16796 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16797 +         /* and the columns may not be generated                                                                                 */
16798 +         %let em_tree_cvexists=;
16799 +         %let em_tree_surrexists=.;
16800 +         data _null_;
16801 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16802 +            if eof then do ;
16803 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16804 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16805 +            end;
16806 +         run;
16808 +         data &EM_USER_OUTIMPORT;
16809 +            set &EM_USER_OUTIMPORT;
16811 +            /* format columns based on Precison value specified */
16812 +            format importance 15.&EM_PROPERTY_PRECISION
16813 +                 %if &validexist %then %do;
16814 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16815 +                 %end;
16816 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16817 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16818 +                 %end;
16819 +            ;
16820 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16821 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16822 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16823 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16824 +                 %if "&em_tree_surrexists" ne "" %then %do;
16825 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16826 +                 %end;
16827 +                 %if &validexist %then %do;
16828 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16829 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16830 +                 %end;
16831 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16832 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16833 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16834 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16835 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16836 +                 %end;
16837 +            ;
16838 +         run;
16840 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16841 +      %end;
16842 +   %end;
16844 +   %doendm:
16845 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:16,
      Create Time=21Apr2016:05:42:16
 
NOTE: 418 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:16,
      Create Time=21Apr2016:05:42:16
 
NOTE: 413 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=15221,
      Last Modified=21Apr2016:05:42:16,
      Create Time=21Apr2016:05:42:16
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=15048,
      Last Modified=21Apr2016:05:42:16,
      Create Time=21Apr2016:05:42:16
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 12 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
16846
16847  *------------------------------------------------------------*;
16848  * End SCORE: Tree2;
16849  *------------------------------------------------------------*;
 
16850  proc sort data=WORK.EM_METACHANGE;
16851  by key uname;
16852  run;
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16853  filename x "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas";
16854  data _null_;
16855  file x;
16856  put 'if upcase(NAME) = "AGE" then do;';
16857  put 'ROLE = "REJECTED";';
16858  put 'end;';
16859  put 'else ';
16860  put 'if upcase(NAME) = "CAMPUS" then do;';
16861  put 'ROLE = "REJECTED";';
16862  put 'end;';
16863  put 'else ';
16864  put 'if upcase(NAME) = "DEPT" then do;';
16865  put 'ROLE = "REJECTED";';
16866  put 'end;';
16867  put 'else ';
16868  put 'if upcase(NAME) = "EMPLOYED" then do;';
16869  put 'ROLE = "REJECTED";';
16870  put 'end;';
16871  put 'else ';
16872  put 'if upcase(NAME) = "EXEMPT2" then do;';
16873  put 'ROLE = "REJECTED";';
16874  put 'end;';
16875  put 'else ';
16876  put 'if upcase(NAME) = "FTE" then do;';
16877  put 'ROLE = "REJECTED";';
16878  put 'end;';
16879  put 'else ';
16880  put 'if upcase(NAME) = "GENDER" then do;';
16881  put 'ROLE = "REJECTED";';
16882  put 'end;';
16883  put 'else ';
16884  put 'if upcase(NAME) = "POSITION" then do;';
16885  put 'ROLE = "REJECTED";';
16886  put 'end;';
16887  put 'else ';
16888  put 'if upcase(NAME) = "Q_TOTALSAL" then do;';
16889  put 'ROLE = "ASSESS";';
16890  put 'end;';
16891  put 'else ';
16892  put 'if upcase(NAME) = "STATUS" then do;';
16893  put 'ROLE = "REJECTED";';
16894  put 'end;';
16895  put 'else ';
16896  put 'if upcase(NAME) = "STSERVYR" then do;';
16897  put 'ROLE = "REJECTED";';
16898  put 'end;';
16899  put 'else ';
16900  put 'if upcase(NAME) = "_NODE_" then do;';
16901  put 'ROLE = "SEGMENT";';
16902  put 'LEVEL = "NOMINAL";';
16903  put 'end;';
16904  run;
 
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:19,
      Create Time=20Apr2016:22:20:26
 
NOTE: 48 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16905  filename x;
NOTE: Fileref X has been deassigned.
 
16906  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
16907  *------------------------------------------------------------*;
16908  * Tree2: Scoring DATA data;
16909  *------------------------------------------------------------*;
16910  data EMWS1.Tree2_TRAIN
16911  / view=EMWS1.Tree2_TRAIN
16912  ;
16913  set EMWS1.Part_TRAIN
16914  ;
16915  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
16916 +****************************************************************;
16917 +******             DECISION TREE SCORING CODE             ******;
16918 +****************************************************************;
16919 +
16920 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16921 +LENGTH _WARN_  $    4;
16922 +
16923 +******              LABELS FOR NEW VARIABLES              ******;
16924 +label _NODE_ = 'Node' ;
16925 +label _LEAF_ = 'Leaf' ;
16926 +label P_totalsal = 'Predicted: totalsal' ;
16927 +label V_totalsal = 'Validated: totalsal' ;
16928 +label R_totalsal = 'Residual: totalsal' ;
16929 +label _WARN_ = 'Warnings' ;
16930 +
16931 +
16932 +
16933 +******             ASSIGN OBSERVATION TO NODE             ******;
16934 +IF  NOT MISSING(nonstsal ) AND
16935 +                115051 <= nonstsal  THEN DO;
16936 +  IF  NOT MISSING(nonstsal ) AND
16937 +                257529.5 <= nonstsal  THEN DO;
16938 +    IF  NOT MISSING(nonstsal ) AND
16939 +                  372771.5 <= nonstsal  THEN DO;
16940 +      IF  NOT MISSING(nonstsal ) AND
16941 +                    512979.5 <= nonstsal  THEN DO;
16942 +        _NODE_  =                   31;
16943 +        _LEAF_  =                   44;
16944 +        P_totalsal  =            582917.75;
16945 +        V_totalsal  =     596384.333333333;
16946 +        END;
16947 +      ELSE DO;
16948 +        _NODE_  =                   30;
16949 +        _LEAF_  =                   43;
16950 +        P_totalsal  =     449206.769230769;
16951 +        V_totalsal  =            420689.75;
16952 +        END;
16953 +      END;
16954 +    ELSE DO;
16955 +      IF  NOT MISSING(nonstsal ) AND
16956 +                    315230.5 <= nonstsal  THEN DO;
16957 +        _NODE_  =                   29;
16958 +        _LEAF_  =                   42;
16959 +        P_totalsal  =            347255.75;
16960 +        V_totalsal  =               341249;
16961 +        END;
16962 +      ELSE DO;
16963 +        IF  NOT MISSING(statesal ) AND
16964 +                         70181 <= statesal  THEN DO;
16965 +          _NODE_  =                   55;
16966 +          _LEAF_  =                   41;
16967 +          P_totalsal  =     385892.666666666;
16968 +          V_totalsal  =               371409;
16969 +          END;
16970 +        ELSE DO;
16971 +          IF  NOT MISSING(nonstsal ) AND
16972 +                          285730 <= nonstsal  THEN DO;
16973 +            _NODE_  =                   91;
16974 +            _LEAF_  =                   40;
16975 +            P_totalsal  =     305890.966666666;
16976 +            V_totalsal  =     301179.555555555;
16977 +            END;
16978 +          ELSE DO;
16979 +            _NODE_  =                   90;
16980 +            _LEAF_  =                   39;
16981 +            P_totalsal  =     274289.210526315;
16982 +            V_totalsal  =     277074.631578947;
16983 +            END;
16984 +          END;
16985 +        END;
16986 +      END;
16987 +    END;
16988 +  ELSE DO;
16989 +    IF  NOT MISSING(nonstsal ) AND
16990 +                    180203 <= nonstsal  THEN DO;
16991 +      IF  NOT MISSING(statesal ) AND
16992 +                     51060.5 <= statesal  THEN DO;
16993 +        _NODE_  =                   27;
16994 +        _LEAF_  =                   38;
16995 +        P_totalsal  =     309176.928571428;
16996 +        V_totalsal  =     310101.888888888;
16997 +        END;
16998 +      ELSE DO;
16999 +        IF  NOT MISSING(nonstsal ) AND
17000 +                        223651 <= nonstsal  THEN DO;
17001 +          IF  NOT MISSING(nonstsal ) AND
17002 +                        241883.5 <= nonstsal  THEN DO;
17003 +            _NODE_  =                   89;
17004 +            _LEAF_  =                   37;
17005 +            P_totalsal  =     253022.555555555;
17006 +            V_totalsal  =           250817.875;
17007 +            END;
17008 +          ELSE DO;
17009 +            _NODE_  =                   88;
17010 +            _LEAF_  =                   36;
17011 +            P_totalsal  =            235625.56;
17012 +            V_totalsal  =            239422.15;
17013 +            END;
17014 +          END;
17015 +        ELSE DO;
17016 +          IF  NOT MISSING(statesal ) AND
17017 +                           27296 <= statesal  THEN DO;
17018 +            _NODE_  =                   87;
17019 +            _LEAF_  =                   35;
17020 +            P_totalsal  =             237379.8;
17021 +            V_totalsal  =               220000;
17022 +            END;
17023 +          ELSE DO;
17024 +            _NODE_  =                   86;
17025 +            _LEAF_  =                   34;
17026 +            P_totalsal  =     202236.918367347;
17027 +            V_totalsal  =             200073.6;
17028 +            END;
17029 +          END;
17030 +        END;
17031 +      END;
17032 +    ELSE DO;
17033 +      IF  NOT MISSING(statesal ) AND
17034 +                     69813.5 <= statesal  THEN DO;
17035 +        IF  NOT MISSING(statesal ) AND
17036 +                      118874.5 <= statesal  THEN DO;
17037 +          _NODE_  =                   51;
17038 +          _LEAF_  =                   33;
17039 +          P_totalsal  =            320843.75;
17040 +          V_totalsal  =             305409.5;
17041 +          END;
17042 +        ELSE DO;
17043 +          _NODE_  =                   50;
17044 +          _LEAF_  =                   32;
17045 +          P_totalsal  =      228098.23076923;
17046 +          V_totalsal  =     237538.666666666;
17047 +          END;
17048 +        END;
17049 +      ELSE DO;
17050 +        IF  NOT MISSING(nonstsal ) AND
17051 +          nonstsal  <             140119.5 THEN DO;
17052 +          IF  NOT MISSING(statesal ) AND
17053 +                           36550 <= statesal  THEN DO;
17054 +            _NODE_  =                   83;
17055 +            _LEAF_  =                   29;
17056 +            P_totalsal  =     184263.533333333;
17057 +            V_totalsal  =     171906.142857142;
17058 +            END;
17059 +          ELSE DO;
17060 +            _NODE_  =                   82;
17061 +            _LEAF_  =                   28;
17062 +            P_totalsal  =     130354.704347826;
17063 +            V_totalsal  =     133023.814814814;
17064 +            END;
17065 +          END;
17066 +        ELSE DO;
17067 +          IF  NOT MISSING(statesal ) AND
17068 +                         16167.5 <= statesal  THEN DO;
17069 +            _NODE_  =                   85;
17070 +            _LEAF_  =                   31;
17071 +            P_totalsal  =     187574.903225806;
17072 +            V_totalsal  =     189994.285714285;
17073 +            END;
17074 +          ELSE DO;
17075 +            _NODE_  =                   84;
17076 +            _LEAF_  =                   30;
17077 +            P_totalsal  =            161803.34;
17078 +            V_totalsal  =     161883.142857142;
17079 +            END;
17080 +          END;
17081 +        END;
17082 +      END;
17083 +    END;
17084 +  END;
17085 +ELSE DO;
17086 +  IF  NOT MISSING(statesal ) AND
17087 +                   87510 <= statesal  THEN DO;
17088 +    IF  NOT MISSING(statesal ) AND
17089 +                    157105 <= statesal  THEN DO;
17090 +      IF  NOT MISSING(statesal ) AND
17091 +                    217772.5 <= statesal  THEN DO;
17092 +        IF  NOT MISSING(statesal ) AND
17093 +                      300737.5 <= statesal  THEN DO;
17094 +          _NODE_  =                   47;
17095 +          _LEAF_  =                   27;
17096 +          P_totalsal  =            371259.25;
17097 +          V_totalsal  =     385116.666666666;
17098 +          END;
17099 +        ELSE DO;
17100 +          _NODE_  =                   46;
17101 +          _LEAF_  =                   26;
17102 +          P_totalsal  =     270754.181818181;
17103 +          V_totalsal  =     292902.833333333;
17104 +          END;
17105 +        END;
17106 +      ELSE DO;
17107 +        IF  NOT MISSING(nonstsal ) AND
17108 +                         53207 <= nonstsal  THEN DO;
17109 +          _NODE_  =                   45;
17110 +          _LEAF_  =                   25;
17111 +          P_totalsal  =               259173;
17112 +          V_totalsal  =     242883.142857142;
17113 +          END;
17114 +        ELSE DO;
17115 +          IF  NOT MISSING(statesal ) AND
17116 +                        193022.5 <= statesal  THEN DO;
17117 +            _NODE_  =                   81;
17118 +            _LEAF_  =                   24;
17119 +            P_totalsal  =            212712.05;
17120 +            V_totalsal  =     216177.153846153;
17121 +            END;
17122 +          ELSE DO;
17123 +            _NODE_  =                   80;
17124 +            _LEAF_  =                   23;
17125 +            P_totalsal  =     181393.888888888;
17126 +            V_totalsal  =             186975.5;
17127 +            END;
17128 +          END;
17129 +        END;
17130 +      END;
17131 +    ELSE DO;
17132 +      IF  NOT MISSING(nonstsal ) AND
17133 +                     23033.5 <= nonstsal  THEN DO;
17134 +        IF  NOT MISSING(nonstsal ) AND
17135 +                       75175.5 <= nonstsal  THEN DO;
17136 +          _NODE_  =                   43;
17137 +          _LEAF_  =                   22;
17138 +          P_totalsal  =     209111.866666666;
17139 +          V_totalsal  =     217810.166666666;
17140 +          END;
17141 +        ELSE DO;
17142 +          IF  NOT MISSING(statesal ) AND
17143 +                          115253 <= statesal  THEN DO;
17144 +            _NODE_  =                   79;
17145 +            _LEAF_  =                   21;
17146 +            P_totalsal  =     169171.775510204;
17147 +            V_totalsal  =     176223.142857142;
17148 +            END;
17149 +          ELSE DO;
17150 +            _NODE_  =                   78;
17151 +            _LEAF_  =                   20;
17152 +            P_totalsal  =     143113.525423728;
17153 +            V_totalsal  =     141255.652173913;
17154 +            END;
17155 +          END;
17156 +        END;
17157 +      ELSE DO;
17158 +        IF  NOT MISSING(statesal ) AND
17159 +                      117576.5 <= statesal  THEN DO;
17160 +          IF  NOT MISSING(statesal ) AND
17161 +                          136441 <= statesal  THEN DO;
17162 +            _NODE_  =                   77;
17163 +            _LEAF_  =                   19;
17164 +            P_totalsal  =     149342.807017543;
17165 +            V_totalsal  =     150521.045454545;
17166 +            END;
17167 +          ELSE DO;
17168 +            _NODE_  =                   76;
17169 +            _LEAF_  =                   18;
17170 +            P_totalsal  =     131039.036144578;
17171 +            V_totalsal  =         128212.84375;
17172 +            END;
17173 +          END;
17174 +        ELSE DO;
17175 +          IF  NOT MISSING(statesal ) AND
17176 +                        101772.5 <= statesal  THEN DO;
17177 +            _NODE_  =                   75;
17178 +            _LEAF_  =                   17;
17179 +            P_totalsal  =     113273.963503649;
17180 +            V_totalsal  =     111954.901639344;
17181 +            END;
17182 +          ELSE DO;
17183 +            _NODE_  =                   74;
17184 +            _LEAF_  =                   16;
17185 +            P_totalsal  =     95764.0754716981;
17186 +            V_totalsal  =      95716.012987013;
17187 +            END;
17188 +          END;
17189 +        END;
17190 +      END;
17191 +    END;
17192 +  ELSE DO;
17193 +    IF  NOT MISSING(nonstsal ) AND
17194 +                     68358 <= nonstsal  THEN DO;
17195 +      IF  NOT MISSING(statesal ) AND
17196 +                       27171 <= statesal  THEN DO;
17197 +        IF  NOT MISSING(statesal ) AND
17198 +                       61462.5 <= statesal  THEN DO;
17199 +          _NODE_  =                   39;
17200 +          _LEAF_  =                   15;
17201 +          P_totalsal  =             158219.4;
17202 +          V_totalsal  =             156590.2;
17203 +          END;
17204 +        ELSE DO;
17205 +          IF  NOT MISSING(nonstsal ) AND
17206 +            nonstsal  <                88475 THEN DO;
17207 +            _NODE_  =                   70;
17208 +            _LEAF_  =                   13;
17209 +            P_totalsal  =     119892.210526315;
17210 +            V_totalsal  =     122956.166666666;
17211 +            END;
17212 +          ELSE DO;
17213 +            _NODE_  =                   71;
17214 +            _LEAF_  =                   14;
17215 +            P_totalsal  =     143362.045454545;
17216 +            V_totalsal  =             146798.3;
17217 +            END;
17218 +          END;
17219 +        END;
17220 +      ELSE DO;
17221 +        IF  NOT MISSING(nonstsal ) AND
17222 +                       89303.5 <= nonstsal  THEN DO;
17223 +          IF  NOT MISSING(nonstsal ) AND
17224 +                        102882.5 <= nonstsal  THEN DO;
17225 +            _NODE_  =                   69;
17226 +            _LEAF_  =                   12;
17227 +            P_totalsal  =          111508.4125;
17228 +            V_totalsal  =     113460.117647058;
17229 +            END;
17230 +          ELSE DO;
17231 +            _NODE_  =                   68;
17232 +            _LEAF_  =                   11;
17233 +            P_totalsal  =             96066.02;
17234 +            V_totalsal  =     96570.5555555555;
17235 +            END;
17236 +          END;
17237 +        ELSE DO;
17238 +          IF  NOT MISSING(nonstsal ) AND
17239 +                           79396 <= nonstsal  THEN DO;
17240 +            _NODE_  =                   67;
17241 +            _LEAF_  =                   10;
17242 +            P_totalsal  =     84476.4926108374;
17243 +            V_totalsal  =      84804.922077922;
17244 +            END;
17245 +          ELSE DO;
17246 +            _NODE_  =                   66;
17247 +            _LEAF_  =                    9;
17248 +            P_totalsal  =     74945.5723905724;
17249 +            V_totalsal  =     74261.4083333333;
17250 +            END;
17251 +          END;
17252 +        END;
17253 +      END;
17254 +    ELSE DO;
17255 +      IF  NOT MISSING(statesal ) AND
17256 +                     51742.5 <= statesal  THEN DO;
17257 +        IF  NOT MISSING(nonstsal ) AND
17258 +                       18694.5 <= nonstsal  THEN DO;
17259 +          IF  NOT MISSING(nonstsal ) AND
17260 +                           38297 <= nonstsal  THEN DO;
17261 +            _NODE_  =                   65;
17262 +            _LEAF_  =                    8;
17263 +            P_totalsal  =     116668.477272727;
17264 +            V_totalsal  =     123298.826086956;
17265 +            END;
17266 +          ELSE DO;
17267 +            _NODE_  =                   64;
17268 +            _LEAF_  =                    7;
17269 +            P_totalsal  =     96360.9090909091;
17270 +            V_totalsal  =     101708.111111111;
17271 +            END;
17272 +          END;
17273 +        ELSE DO;
17274 +          IF  NOT MISSING(statesal ) AND
17275 +            statesal  <              66247.5 THEN DO;
17276 +            _NODE_  =                   62;
17277 +            _LEAF_  =                    5;
17278 +            P_totalsal  =     60063.9938650306;
17279 +            V_totalsal  =      59998.981595092;
17280 +            END;
17281 +          ELSE DO;
17282 +            _NODE_  =                   63;
17283 +            _LEAF_  =                    6;
17284 +            P_totalsal  =            77416.455;
17285 +            V_totalsal  =     78184.9333333333;
17286 +            END;
17287 +          END;
17288 +        END;
17289 +      ELSE DO;
17290 +        IF  NOT MISSING(nonstsal ) AND
17291 +                       47236.5 <= nonstsal  THEN DO;
17292 +          IF  NOT MISSING(statesal ) AND
17293 +                         12307.5 <= statesal  THEN DO;
17294 +            _NODE_  =                   61;
17295 +            _LEAF_  =                    4;
17296 +            P_totalsal  =     85280.3333333333;
17297 +            V_totalsal  =     84780.2105263158;
17298 +            END;
17299 +          ELSE DO;
17300 +            _NODE_  =                   60;
17301 +            _LEAF_  =                    3;
17302 +            P_totalsal  =     56825.5541535226;
17303 +            V_totalsal  =     56393.1634146341;
17304 +            END;
17305 +          END;
17306 +        ELSE DO;
17307 +          IF  NOT MISSING(statesal ) AND
17308 +                         39899.5 <= statesal  THEN DO;
17309 +            _NODE_  =                   59;
17310 +            _LEAF_  =                    2;
17311 +            P_totalsal  =     48164.7592920354;
17312 +            V_totalsal  =     48515.8536585365;
17313 +            END;
17314 +          ELSE DO;
17315 +            _NODE_  =                   58;
17316 +            _LEAF_  =                    1;
17317 +            P_totalsal  =      36420.600973236;
17318 +            V_totalsal  =     36209.7162471395;
17319 +            END;
17320 +          END;
17321 +        END;
17322 +      END;
17323 +    END;
17324 +  END;
17325 +
17326 +*****  RESIDUALS R_ *************;
17327 +IF MISSING( totalsal ) THEN R_totalsal  = .;
17328 +ELSE R_totalsal  = totalsal  - P_totalsal ;
17329 +
17330 +****************************************************************;
17331 +******          END OF DECISION TREE SCORING CODE         ******;
17332 +****************************************************************;
17333 +
17334 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17335  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17336  quit;
17337  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17338  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
17339  *------------------------------------------------------------*;
17340  * Tree2: Scoring VALIDATE data;
17341  *------------------------------------------------------------*;
17342  data EMWS1.Tree2_VALIDATE
17343  / view=EMWS1.Tree2_VALIDATE
17344  ;
17345  set EMWS1.Part_VALIDATE
17346  ;
17347  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
17348 +****************************************************************;
17349 +******             DECISION TREE SCORING CODE             ******;
17350 +****************************************************************;
17351 +
17352 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17353 +LENGTH _WARN_  $    4;
17354 +
17355 +******              LABELS FOR NEW VARIABLES              ******;
17356 +label _NODE_ = 'Node' ;
17357 +label _LEAF_ = 'Leaf' ;
17358 +label P_totalsal = 'Predicted: totalsal' ;
17359 +label V_totalsal = 'Validated: totalsal' ;
17360 +label R_totalsal = 'Residual: totalsal' ;
17361 +label _WARN_ = 'Warnings' ;
17362 +
17363 +
17364 +
17365 +******             ASSIGN OBSERVATION TO NODE             ******;
17366 +IF  NOT MISSING(nonstsal ) AND
17367 +                115051 <= nonstsal  THEN DO;
17368 +  IF  NOT MISSING(nonstsal ) AND
17369 +                257529.5 <= nonstsal  THEN DO;
17370 +    IF  NOT MISSING(nonstsal ) AND
17371 +                  372771.5 <= nonstsal  THEN DO;
17372 +      IF  NOT MISSING(nonstsal ) AND
17373 +                    512979.5 <= nonstsal  THEN DO;
17374 +        _NODE_  =                   31;
17375 +        _LEAF_  =                   44;
17376 +        P_totalsal  =            582917.75;
17377 +        V_totalsal  =     596384.333333333;
17378 +        END;
17379 +      ELSE DO;
17380 +        _NODE_  =                   30;
17381 +        _LEAF_  =                   43;
17382 +        P_totalsal  =     449206.769230769;
17383 +        V_totalsal  =            420689.75;
17384 +        END;
17385 +      END;
17386 +    ELSE DO;
17387 +      IF  NOT MISSING(nonstsal ) AND
17388 +                    315230.5 <= nonstsal  THEN DO;
17389 +        _NODE_  =                   29;
17390 +        _LEAF_  =                   42;
17391 +        P_totalsal  =            347255.75;
17392 +        V_totalsal  =               341249;
17393 +        END;
17394 +      ELSE DO;
17395 +        IF  NOT MISSING(statesal ) AND
17396 +                         70181 <= statesal  THEN DO;
17397 +          _NODE_  =                   55;
17398 +          _LEAF_  =                   41;
17399 +          P_totalsal  =     385892.666666666;
17400 +          V_totalsal  =               371409;
17401 +          END;
17402 +        ELSE DO;
17403 +          IF  NOT MISSING(nonstsal ) AND
17404 +                          285730 <= nonstsal  THEN DO;
17405 +            _NODE_  =                   91;
17406 +            _LEAF_  =                   40;
17407 +            P_totalsal  =     305890.966666666;
17408 +            V_totalsal  =     301179.555555555;
17409 +            END;
17410 +          ELSE DO;
17411 +            _NODE_  =                   90;
17412 +            _LEAF_  =                   39;
17413 +            P_totalsal  =     274289.210526315;
17414 +            V_totalsal  =     277074.631578947;
17415 +            END;
17416 +          END;
17417 +        END;
17418 +      END;
17419 +    END;
17420 +  ELSE DO;
17421 +    IF  NOT MISSING(nonstsal ) AND
17422 +                    180203 <= nonstsal  THEN DO;
17423 +      IF  NOT MISSING(statesal ) AND
17424 +                     51060.5 <= statesal  THEN DO;
17425 +        _NODE_  =                   27;
17426 +        _LEAF_  =                   38;
17427 +        P_totalsal  =     309176.928571428;
17428 +        V_totalsal  =     310101.888888888;
17429 +        END;
17430 +      ELSE DO;
17431 +        IF  NOT MISSING(nonstsal ) AND
17432 +                        223651 <= nonstsal  THEN DO;
17433 +          IF  NOT MISSING(nonstsal ) AND
17434 +                        241883.5 <= nonstsal  THEN DO;
17435 +            _NODE_  =                   89;
17436 +            _LEAF_  =                   37;
17437 +            P_totalsal  =     253022.555555555;
17438 +            V_totalsal  =           250817.875;
17439 +            END;
17440 +          ELSE DO;
17441 +            _NODE_  =                   88;
17442 +            _LEAF_  =                   36;
17443 +            P_totalsal  =            235625.56;
17444 +            V_totalsal  =            239422.15;
17445 +            END;
17446 +          END;
17447 +        ELSE DO;
17448 +          IF  NOT MISSING(statesal ) AND
17449 +                           27296 <= statesal  THEN DO;
17450 +            _NODE_  =                   87;
17451 +            _LEAF_  =                   35;
17452 +            P_totalsal  =             237379.8;
17453 +            V_totalsal  =               220000;
17454 +            END;
17455 +          ELSE DO;
17456 +            _NODE_  =                   86;
17457 +            _LEAF_  =                   34;
17458 +            P_totalsal  =     202236.918367347;
17459 +            V_totalsal  =             200073.6;
17460 +            END;
17461 +          END;
17462 +        END;
17463 +      END;
17464 +    ELSE DO;
17465 +      IF  NOT MISSING(statesal ) AND
17466 +                     69813.5 <= statesal  THEN DO;
17467 +        IF  NOT MISSING(statesal ) AND
17468 +                      118874.5 <= statesal  THEN DO;
17469 +          _NODE_  =                   51;
17470 +          _LEAF_  =                   33;
17471 +          P_totalsal  =            320843.75;
17472 +          V_totalsal  =             305409.5;
17473 +          END;
17474 +        ELSE DO;
17475 +          _NODE_  =                   50;
17476 +          _LEAF_  =                   32;
17477 +          P_totalsal  =      228098.23076923;
17478 +          V_totalsal  =     237538.666666666;
17479 +          END;
17480 +        END;
17481 +      ELSE DO;
17482 +        IF  NOT MISSING(nonstsal ) AND
17483 +          nonstsal  <             140119.5 THEN DO;
17484 +          IF  NOT MISSING(statesal ) AND
17485 +                           36550 <= statesal  THEN DO;
17486 +            _NODE_  =                   83;
17487 +            _LEAF_  =                   29;
17488 +            P_totalsal  =     184263.533333333;
17489 +            V_totalsal  =     171906.142857142;
17490 +            END;
17491 +          ELSE DO;
17492 +            _NODE_  =                   82;
17493 +            _LEAF_  =                   28;
17494 +            P_totalsal  =     130354.704347826;
17495 +            V_totalsal  =     133023.814814814;
17496 +            END;
17497 +          END;
17498 +        ELSE DO;
17499 +          IF  NOT MISSING(statesal ) AND
17500 +                         16167.5 <= statesal  THEN DO;
17501 +            _NODE_  =                   85;
17502 +            _LEAF_  =                   31;
17503 +            P_totalsal  =     187574.903225806;
17504 +            V_totalsal  =     189994.285714285;
17505 +            END;
17506 +          ELSE DO;
17507 +            _NODE_  =                   84;
17508 +            _LEAF_  =                   30;
17509 +            P_totalsal  =            161803.34;
17510 +            V_totalsal  =     161883.142857142;
17511 +            END;
17512 +          END;
17513 +        END;
17514 +      END;
17515 +    END;
17516 +  END;
17517 +ELSE DO;
17518 +  IF  NOT MISSING(statesal ) AND
17519 +                   87510 <= statesal  THEN DO;
17520 +    IF  NOT MISSING(statesal ) AND
17521 +                    157105 <= statesal  THEN DO;
17522 +      IF  NOT MISSING(statesal ) AND
17523 +                    217772.5 <= statesal  THEN DO;
17524 +        IF  NOT MISSING(statesal ) AND
17525 +                      300737.5 <= statesal  THEN DO;
17526 +          _NODE_  =                   47;
17527 +          _LEAF_  =                   27;
17528 +          P_totalsal  =            371259.25;
17529 +          V_totalsal  =     385116.666666666;
17530 +          END;
17531 +        ELSE DO;
17532 +          _NODE_  =                   46;
17533 +          _LEAF_  =                   26;
17534 +          P_totalsal  =     270754.181818181;
17535 +          V_totalsal  =     292902.833333333;
17536 +          END;
17537 +        END;
17538 +      ELSE DO;
17539 +        IF  NOT MISSING(nonstsal ) AND
17540 +                         53207 <= nonstsal  THEN DO;
17541 +          _NODE_  =                   45;
17542 +          _LEAF_  =                   25;
17543 +          P_totalsal  =               259173;
17544 +          V_totalsal  =     242883.142857142;
17545 +          END;
17546 +        ELSE DO;
17547 +          IF  NOT MISSING(statesal ) AND
17548 +                        193022.5 <= statesal  THEN DO;
17549 +            _NODE_  =                   81;
17550 +            _LEAF_  =                   24;
17551 +            P_totalsal  =            212712.05;
17552 +            V_totalsal  =     216177.153846153;
17553 +            END;
17554 +          ELSE DO;
17555 +            _NODE_  =                   80;
17556 +            _LEAF_  =                   23;
17557 +            P_totalsal  =     181393.888888888;
17558 +            V_totalsal  =             186975.5;
17559 +            END;
17560 +          END;
17561 +        END;
17562 +      END;
17563 +    ELSE DO;
17564 +      IF  NOT MISSING(nonstsal ) AND
17565 +                     23033.5 <= nonstsal  THEN DO;
17566 +        IF  NOT MISSING(nonstsal ) AND
17567 +                       75175.5 <= nonstsal  THEN DO;
17568 +          _NODE_  =                   43;
17569 +          _LEAF_  =                   22;
17570 +          P_totalsal  =     209111.866666666;
17571 +          V_totalsal  =     217810.166666666;
17572 +          END;
17573 +        ELSE DO;
17574 +          IF  NOT MISSING(statesal ) AND
17575 +                          115253 <= statesal  THEN DO;
17576 +            _NODE_  =                   79;
17577 +            _LEAF_  =                   21;
17578 +            P_totalsal  =     169171.775510204;
17579 +            V_totalsal  =     176223.142857142;
17580 +            END;
17581 +          ELSE DO;
17582 +            _NODE_  =                   78;
17583 +            _LEAF_  =                   20;
17584 +            P_totalsal  =     143113.525423728;
17585 +            V_totalsal  =     141255.652173913;
17586 +            END;
17587 +          END;
17588 +        END;
17589 +      ELSE DO;
17590 +        IF  NOT MISSING(statesal ) AND
17591 +                      117576.5 <= statesal  THEN DO;
17592 +          IF  NOT MISSING(statesal ) AND
17593 +                          136441 <= statesal  THEN DO;
17594 +            _NODE_  =                   77;
17595 +            _LEAF_  =                   19;
17596 +            P_totalsal  =     149342.807017543;
17597 +            V_totalsal  =     150521.045454545;
17598 +            END;
17599 +          ELSE DO;
17600 +            _NODE_  =                   76;
17601 +            _LEAF_  =                   18;
17602 +            P_totalsal  =     131039.036144578;
17603 +            V_totalsal  =         128212.84375;
17604 +            END;
17605 +          END;
17606 +        ELSE DO;
17607 +          IF  NOT MISSING(statesal ) AND
17608 +                        101772.5 <= statesal  THEN DO;
17609 +            _NODE_  =                   75;
17610 +            _LEAF_  =                   17;
17611 +            P_totalsal  =     113273.963503649;
17612 +            V_totalsal  =     111954.901639344;
17613 +            END;
17614 +          ELSE DO;
17615 +            _NODE_  =                   74;
17616 +            _LEAF_  =                   16;
17617 +            P_totalsal  =     95764.0754716981;
17618 +            V_totalsal  =      95716.012987013;
17619 +            END;
17620 +          END;
17621 +        END;
17622 +      END;
17623 +    END;
17624 +  ELSE DO;
17625 +    IF  NOT MISSING(nonstsal ) AND
17626 +                     68358 <= nonstsal  THEN DO;
17627 +      IF  NOT MISSING(statesal ) AND
17628 +                       27171 <= statesal  THEN DO;
17629 +        IF  NOT MISSING(statesal ) AND
17630 +                       61462.5 <= statesal  THEN DO;
17631 +          _NODE_  =                   39;
17632 +          _LEAF_  =                   15;
17633 +          P_totalsal  =             158219.4;
17634 +          V_totalsal  =             156590.2;
17635 +          END;
17636 +        ELSE DO;
17637 +          IF  NOT MISSING(nonstsal ) AND
17638 +            nonstsal  <                88475 THEN DO;
17639 +            _NODE_  =                   70;
17640 +            _LEAF_  =                   13;
17641 +            P_totalsal  =     119892.210526315;
17642 +            V_totalsal  =     122956.166666666;
17643 +            END;
17644 +          ELSE DO;
17645 +            _NODE_  =                   71;
17646 +            _LEAF_  =                   14;
17647 +            P_totalsal  =     143362.045454545;
17648 +            V_totalsal  =             146798.3;
17649 +            END;
17650 +          END;
17651 +        END;
17652 +      ELSE DO;
17653 +        IF  NOT MISSING(nonstsal ) AND
17654 +                       89303.5 <= nonstsal  THEN DO;
17655 +          IF  NOT MISSING(nonstsal ) AND
17656 +                        102882.5 <= nonstsal  THEN DO;
17657 +            _NODE_  =                   69;
17658 +            _LEAF_  =                   12;
17659 +            P_totalsal  =          111508.4125;
17660 +            V_totalsal  =     113460.117647058;
17661 +            END;
17662 +          ELSE DO;
17663 +            _NODE_  =                   68;
17664 +            _LEAF_  =                   11;
17665 +            P_totalsal  =             96066.02;
17666 +            V_totalsal  =     96570.5555555555;
17667 +            END;
17668 +          END;
17669 +        ELSE DO;
17670 +          IF  NOT MISSING(nonstsal ) AND
17671 +                           79396 <= nonstsal  THEN DO;
17672 +            _NODE_  =                   67;
17673 +            _LEAF_  =                   10;
17674 +            P_totalsal  =     84476.4926108374;
17675 +            V_totalsal  =      84804.922077922;
17676 +            END;
17677 +          ELSE DO;
17678 +            _NODE_  =                   66;
17679 +            _LEAF_  =                    9;
17680 +            P_totalsal  =     74945.5723905724;
17681 +            V_totalsal  =     74261.4083333333;
17682 +            END;
17683 +          END;
17684 +        END;
17685 +      END;
17686 +    ELSE DO;
17687 +      IF  NOT MISSING(statesal ) AND
17688 +                     51742.5 <= statesal  THEN DO;
17689 +        IF  NOT MISSING(nonstsal ) AND
17690 +                       18694.5 <= nonstsal  THEN DO;
17691 +          IF  NOT MISSING(nonstsal ) AND
17692 +                           38297 <= nonstsal  THEN DO;
17693 +            _NODE_  =                   65;
17694 +            _LEAF_  =                    8;
17695 +            P_totalsal  =     116668.477272727;
17696 +            V_totalsal  =     123298.826086956;
17697 +            END;
17698 +          ELSE DO;
17699 +            _NODE_  =                   64;
17700 +            _LEAF_  =                    7;
17701 +            P_totalsal  =     96360.9090909091;
17702 +            V_totalsal  =     101708.111111111;
17703 +            END;
17704 +          END;
17705 +        ELSE DO;
17706 +          IF  NOT MISSING(statesal ) AND
17707 +            statesal  <              66247.5 THEN DO;
17708 +            _NODE_  =                   62;
17709 +            _LEAF_  =                    5;
17710 +            P_totalsal  =     60063.9938650306;
17711 +            V_totalsal  =      59998.981595092;
17712 +            END;
17713 +          ELSE DO;
17714 +            _NODE_  =                   63;
17715 +            _LEAF_  =                    6;
17716 +            P_totalsal  =            77416.455;
17717 +            V_totalsal  =     78184.9333333333;
17718 +            END;
17719 +          END;
17720 +        END;
17721 +      ELSE DO;
17722 +        IF  NOT MISSING(nonstsal ) AND
17723 +                       47236.5 <= nonstsal  THEN DO;
17724 +          IF  NOT MISSING(statesal ) AND
17725 +                         12307.5 <= statesal  THEN DO;
17726 +            _NODE_  =                   61;
17727 +            _LEAF_  =                    4;
17728 +            P_totalsal  =     85280.3333333333;
17729 +            V_totalsal  =     84780.2105263158;
17730 +            END;
17731 +          ELSE DO;
17732 +            _NODE_  =                   60;
17733 +            _LEAF_  =                    3;
17734 +            P_totalsal  =     56825.5541535226;
17735 +            V_totalsal  =     56393.1634146341;
17736 +            END;
17737 +          END;
17738 +        ELSE DO;
17739 +          IF  NOT MISSING(statesal ) AND
17740 +                         39899.5 <= statesal  THEN DO;
17741 +            _NODE_  =                   59;
17742 +            _LEAF_  =                    2;
17743 +            P_totalsal  =     48164.7592920354;
17744 +            V_totalsal  =     48515.8536585365;
17745 +            END;
17746 +          ELSE DO;
17747 +            _NODE_  =                   58;
17748 +            _LEAF_  =                    1;
17749 +            P_totalsal  =      36420.600973236;
17750 +            V_totalsal  =     36209.7162471395;
17751 +            END;
17752 +          END;
17753 +        END;
17754 +      END;
17755 +    END;
17756 +  END;
17757 +
17758 +*****  RESIDUALS R_ *************;
17759 +IF MISSING( totalsal ) THEN R_totalsal  = .;
17760 +ELSE R_totalsal  = totalsal  - P_totalsal ;
17761 +
17762 +****************************************************************;
17763 +******          END OF DECISION TREE SCORING CODE         ******;
17764 +****************************************************************;
17765 +
17766 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17767  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17768  quit;
17769  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17770  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
17771  *------------------------------------------------------------*;
17772  * Tree2: Scoring TEST data;
17773  *------------------------------------------------------------*;
17774  data EMWS1.Tree2_TEST
17775  / view=EMWS1.Tree2_TEST
17776  ;
17777  set EMWS1.Part_TEST
17778  ;
17779  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
17780 +****************************************************************;
17781 +******             DECISION TREE SCORING CODE             ******;
17782 +****************************************************************;
17783 +
17784 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17785 +LENGTH _WARN_  $    4;
17786 +
17787 +******              LABELS FOR NEW VARIABLES              ******;
17788 +label _NODE_ = 'Node' ;
17789 +label _LEAF_ = 'Leaf' ;
17790 +label P_totalsal = 'Predicted: totalsal' ;
17791 +label V_totalsal = 'Validated: totalsal' ;
17792 +label R_totalsal = 'Residual: totalsal' ;
17793 +label _WARN_ = 'Warnings' ;
17794 +
17795 +
17796 +
17797 +******             ASSIGN OBSERVATION TO NODE             ******;
17798 +IF  NOT MISSING(nonstsal ) AND
17799 +                115051 <= nonstsal  THEN DO;
17800 +  IF  NOT MISSING(nonstsal ) AND
17801 +                257529.5 <= nonstsal  THEN DO;
17802 +    IF  NOT MISSING(nonstsal ) AND
17803 +                  372771.5 <= nonstsal  THEN DO;
17804 +      IF  NOT MISSING(nonstsal ) AND
17805 +                    512979.5 <= nonstsal  THEN DO;
17806 +        _NODE_  =                   31;
17807 +        _LEAF_  =                   44;
17808 +        P_totalsal  =            582917.75;
17809 +        V_totalsal  =     596384.333333333;
17810 +        END;
17811 +      ELSE DO;
17812 +        _NODE_  =                   30;
17813 +        _LEAF_  =                   43;
17814 +        P_totalsal  =     449206.769230769;
17815 +        V_totalsal  =            420689.75;
17816 +        END;
17817 +      END;
17818 +    ELSE DO;
17819 +      IF  NOT MISSING(nonstsal ) AND
17820 +                    315230.5 <= nonstsal  THEN DO;
17821 +        _NODE_  =                   29;
17822 +        _LEAF_  =                   42;
17823 +        P_totalsal  =            347255.75;
17824 +        V_totalsal  =               341249;
17825 +        END;
17826 +      ELSE DO;
17827 +        IF  NOT MISSING(statesal ) AND
17828 +                         70181 <= statesal  THEN DO;
17829 +          _NODE_  =                   55;
17830 +          _LEAF_  =                   41;
17831 +          P_totalsal  =     385892.666666666;
17832 +          V_totalsal  =               371409;
17833 +          END;
17834 +        ELSE DO;
17835 +          IF  NOT MISSING(nonstsal ) AND
17836 +                          285730 <= nonstsal  THEN DO;
17837 +            _NODE_  =                   91;
17838 +            _LEAF_  =                   40;
17839 +            P_totalsal  =     305890.966666666;
17840 +            V_totalsal  =     301179.555555555;
17841 +            END;
17842 +          ELSE DO;
17843 +            _NODE_  =                   90;
17844 +            _LEAF_  =                   39;
17845 +            P_totalsal  =     274289.210526315;
17846 +            V_totalsal  =     277074.631578947;
17847 +            END;
17848 +          END;
17849 +        END;
17850 +      END;
17851 +    END;
17852 +  ELSE DO;
17853 +    IF  NOT MISSING(nonstsal ) AND
17854 +                    180203 <= nonstsal  THEN DO;
17855 +      IF  NOT MISSING(statesal ) AND
17856 +                     51060.5 <= statesal  THEN DO;
17857 +        _NODE_  =                   27;
17858 +        _LEAF_  =                   38;
17859 +        P_totalsal  =     309176.928571428;
17860 +        V_totalsal  =     310101.888888888;
17861 +        END;
17862 +      ELSE DO;
17863 +        IF  NOT MISSING(nonstsal ) AND
17864 +                        223651 <= nonstsal  THEN DO;
17865 +          IF  NOT MISSING(nonstsal ) AND
17866 +                        241883.5 <= nonstsal  THEN DO;
17867 +            _NODE_  =                   89;
17868 +            _LEAF_  =                   37;
17869 +            P_totalsal  =     253022.555555555;
17870 +            V_totalsal  =           250817.875;
17871 +            END;
17872 +          ELSE DO;
17873 +            _NODE_  =                   88;
17874 +            _LEAF_  =                   36;
17875 +            P_totalsal  =            235625.56;
17876 +            V_totalsal  =            239422.15;
17877 +            END;
17878 +          END;
17879 +        ELSE DO;
17880 +          IF  NOT MISSING(statesal ) AND
17881 +                           27296 <= statesal  THEN DO;
17882 +            _NODE_  =                   87;
17883 +            _LEAF_  =                   35;
17884 +            P_totalsal  =             237379.8;
17885 +            V_totalsal  =               220000;
17886 +            END;
17887 +          ELSE DO;
17888 +            _NODE_  =                   86;
17889 +            _LEAF_  =                   34;
17890 +            P_totalsal  =     202236.918367347;
17891 +            V_totalsal  =             200073.6;
17892 +            END;
17893 +          END;
17894 +        END;
17895 +      END;
17896 +    ELSE DO;
17897 +      IF  NOT MISSING(statesal ) AND
17898 +                     69813.5 <= statesal  THEN DO;
17899 +        IF  NOT MISSING(statesal ) AND
17900 +                      118874.5 <= statesal  THEN DO;
17901 +          _NODE_  =                   51;
17902 +          _LEAF_  =                   33;
17903 +          P_totalsal  =            320843.75;
17904 +          V_totalsal  =             305409.5;
17905 +          END;
17906 +        ELSE DO;
17907 +          _NODE_  =                   50;
17908 +          _LEAF_  =                   32;
17909 +          P_totalsal  =      228098.23076923;
17910 +          V_totalsal  =     237538.666666666;
17911 +          END;
17912 +        END;
17913 +      ELSE DO;
17914 +        IF  NOT MISSING(nonstsal ) AND
17915 +          nonstsal  <             140119.5 THEN DO;
17916 +          IF  NOT MISSING(statesal ) AND
17917 +                           36550 <= statesal  THEN DO;
17918 +            _NODE_  =                   83;
17919 +            _LEAF_  =                   29;
17920 +            P_totalsal  =     184263.533333333;
17921 +            V_totalsal  =     171906.142857142;
17922 +            END;
17923 +          ELSE DO;
17924 +            _NODE_  =                   82;
17925 +            _LEAF_  =                   28;
17926 +            P_totalsal  =     130354.704347826;
17927 +            V_totalsal  =     133023.814814814;
17928 +            END;
17929 +          END;
17930 +        ELSE DO;
17931 +          IF  NOT MISSING(statesal ) AND
17932 +                         16167.5 <= statesal  THEN DO;
17933 +            _NODE_  =                   85;
17934 +            _LEAF_  =                   31;
17935 +            P_totalsal  =     187574.903225806;
17936 +            V_totalsal  =     189994.285714285;
17937 +            END;
17938 +          ELSE DO;
17939 +            _NODE_  =                   84;
17940 +            _LEAF_  =                   30;
17941 +            P_totalsal  =            161803.34;
17942 +            V_totalsal  =     161883.142857142;
17943 +            END;
17944 +          END;
17945 +        END;
17946 +      END;
17947 +    END;
17948 +  END;
17949 +ELSE DO;
17950 +  IF  NOT MISSING(statesal ) AND
17951 +                   87510 <= statesal  THEN DO;
17952 +    IF  NOT MISSING(statesal ) AND
17953 +                    157105 <= statesal  THEN DO;
17954 +      IF  NOT MISSING(statesal ) AND
17955 +                    217772.5 <= statesal  THEN DO;
17956 +        IF  NOT MISSING(statesal ) AND
17957 +                      300737.5 <= statesal  THEN DO;
17958 +          _NODE_  =                   47;
17959 +          _LEAF_  =                   27;
17960 +          P_totalsal  =            371259.25;
17961 +          V_totalsal  =     385116.666666666;
17962 +          END;
17963 +        ELSE DO;
17964 +          _NODE_  =                   46;
17965 +          _LEAF_  =                   26;
17966 +          P_totalsal  =     270754.181818181;
17967 +          V_totalsal  =     292902.833333333;
17968 +          END;
17969 +        END;
17970 +      ELSE DO;
17971 +        IF  NOT MISSING(nonstsal ) AND
17972 +                         53207 <= nonstsal  THEN DO;
17973 +          _NODE_  =                   45;
17974 +          _LEAF_  =                   25;
17975 +          P_totalsal  =               259173;
17976 +          V_totalsal  =     242883.142857142;
17977 +          END;
17978 +        ELSE DO;
17979 +          IF  NOT MISSING(statesal ) AND
17980 +                        193022.5 <= statesal  THEN DO;
17981 +            _NODE_  =                   81;
17982 +            _LEAF_  =                   24;
17983 +            P_totalsal  =            212712.05;
17984 +            V_totalsal  =     216177.153846153;
17985 +            END;
17986 +          ELSE DO;
17987 +            _NODE_  =                   80;
17988 +            _LEAF_  =                   23;
17989 +            P_totalsal  =     181393.888888888;
17990 +            V_totalsal  =             186975.5;
17991 +            END;
17992 +          END;
17993 +        END;
17994 +      END;
17995 +    ELSE DO;
17996 +      IF  NOT MISSING(nonstsal ) AND
17997 +                     23033.5 <= nonstsal  THEN DO;
17998 +        IF  NOT MISSING(nonstsal ) AND
17999 +                       75175.5 <= nonstsal  THEN DO;
18000 +          _NODE_  =                   43;
18001 +          _LEAF_  =                   22;
18002 +          P_totalsal  =     209111.866666666;
18003 +          V_totalsal  =     217810.166666666;
18004 +          END;
18005 +        ELSE DO;
18006 +          IF  NOT MISSING(statesal ) AND
18007 +                          115253 <= statesal  THEN DO;
18008 +            _NODE_  =                   79;
18009 +            _LEAF_  =                   21;
18010 +            P_totalsal  =     169171.775510204;
18011 +            V_totalsal  =     176223.142857142;
18012 +            END;
18013 +          ELSE DO;
18014 +            _NODE_  =                   78;
18015 +            _LEAF_  =                   20;
18016 +            P_totalsal  =     143113.525423728;
18017 +            V_totalsal  =     141255.652173913;
18018 +            END;
18019 +          END;
18020 +        END;
18021 +      ELSE DO;
18022 +        IF  NOT MISSING(statesal ) AND
18023 +                      117576.5 <= statesal  THEN DO;
18024 +          IF  NOT MISSING(statesal ) AND
18025 +                          136441 <= statesal  THEN DO;
18026 +            _NODE_  =                   77;
18027 +            _LEAF_  =                   19;
18028 +            P_totalsal  =     149342.807017543;
18029 +            V_totalsal  =     150521.045454545;
18030 +            END;
18031 +          ELSE DO;
18032 +            _NODE_  =                   76;
18033 +            _LEAF_  =                   18;
18034 +            P_totalsal  =     131039.036144578;
18035 +            V_totalsal  =         128212.84375;
18036 +            END;
18037 +          END;
18038 +        ELSE DO;
18039 +          IF  NOT MISSING(statesal ) AND
18040 +                        101772.5 <= statesal  THEN DO;
18041 +            _NODE_  =                   75;
18042 +            _LEAF_  =                   17;
18043 +            P_totalsal  =     113273.963503649;
18044 +            V_totalsal  =     111954.901639344;
18045 +            END;
18046 +          ELSE DO;
18047 +            _NODE_  =                   74;
18048 +            _LEAF_  =                   16;
18049 +            P_totalsal  =     95764.0754716981;
18050 +            V_totalsal  =      95716.012987013;
18051 +            END;
18052 +          END;
18053 +        END;
18054 +      END;
18055 +    END;
18056 +  ELSE DO;
18057 +    IF  NOT MISSING(nonstsal ) AND
18058 +                     68358 <= nonstsal  THEN DO;
18059 +      IF  NOT MISSING(statesal ) AND
18060 +                       27171 <= statesal  THEN DO;
18061 +        IF  NOT MISSING(statesal ) AND
18062 +                       61462.5 <= statesal  THEN DO;
18063 +          _NODE_  =                   39;
18064 +          _LEAF_  =                   15;
18065 +          P_totalsal  =             158219.4;
18066 +          V_totalsal  =             156590.2;
18067 +          END;
18068 +        ELSE DO;
18069 +          IF  NOT MISSING(nonstsal ) AND
18070 +            nonstsal  <                88475 THEN DO;
18071 +            _NODE_  =                   70;
18072 +            _LEAF_  =                   13;
18073 +            P_totalsal  =     119892.210526315;
18074 +            V_totalsal  =     122956.166666666;
18075 +            END;
18076 +          ELSE DO;
18077 +            _NODE_  =                   71;
18078 +            _LEAF_  =                   14;
18079 +            P_totalsal  =     143362.045454545;
18080 +            V_totalsal  =             146798.3;
18081 +            END;
18082 +          END;
18083 +        END;
18084 +      ELSE DO;
18085 +        IF  NOT MISSING(nonstsal ) AND
18086 +                       89303.5 <= nonstsal  THEN DO;
18087 +          IF  NOT MISSING(nonstsal ) AND
18088 +                        102882.5 <= nonstsal  THEN DO;
18089 +            _NODE_  =                   69;
18090 +            _LEAF_  =                   12;
18091 +            P_totalsal  =          111508.4125;
18092 +            V_totalsal  =     113460.117647058;
18093 +            END;
18094 +          ELSE DO;
18095 +            _NODE_  =                   68;
18096 +            _LEAF_  =                   11;
18097 +            P_totalsal  =             96066.02;
18098 +            V_totalsal  =     96570.5555555555;
18099 +            END;
18100 +          END;
18101 +        ELSE DO;
18102 +          IF  NOT MISSING(nonstsal ) AND
18103 +                           79396 <= nonstsal  THEN DO;
18104 +            _NODE_  =                   67;
18105 +            _LEAF_  =                   10;
18106 +            P_totalsal  =     84476.4926108374;
18107 +            V_totalsal  =      84804.922077922;
18108 +            END;
18109 +          ELSE DO;
18110 +            _NODE_  =                   66;
18111 +            _LEAF_  =                    9;
18112 +            P_totalsal  =     74945.5723905724;
18113 +            V_totalsal  =     74261.4083333333;
18114 +            END;
18115 +          END;
18116 +        END;
18117 +      END;
18118 +    ELSE DO;
18119 +      IF  NOT MISSING(statesal ) AND
18120 +                     51742.5 <= statesal  THEN DO;
18121 +        IF  NOT MISSING(nonstsal ) AND
18122 +                       18694.5 <= nonstsal  THEN DO;
18123 +          IF  NOT MISSING(nonstsal ) AND
18124 +                           38297 <= nonstsal  THEN DO;
18125 +            _NODE_  =                   65;
18126 +            _LEAF_  =                    8;
18127 +            P_totalsal  =     116668.477272727;
18128 +            V_totalsal  =     123298.826086956;
18129 +            END;
18130 +          ELSE DO;
18131 +            _NODE_  =                   64;
18132 +            _LEAF_  =                    7;
18133 +            P_totalsal  =     96360.9090909091;
18134 +            V_totalsal  =     101708.111111111;
18135 +            END;
18136 +          END;
18137 +        ELSE DO;
18138 +          IF  NOT MISSING(statesal ) AND
18139 +            statesal  <              66247.5 THEN DO;
18140 +            _NODE_  =                   62;
18141 +            _LEAF_  =                    5;
18142 +            P_totalsal  =     60063.9938650306;
18143 +            V_totalsal  =      59998.981595092;
18144 +            END;
18145 +          ELSE DO;
18146 +            _NODE_  =                   63;
18147 +            _LEAF_  =                    6;
18148 +            P_totalsal  =            77416.455;
18149 +            V_totalsal  =     78184.9333333333;
18150 +            END;
18151 +          END;
18152 +        END;
18153 +      ELSE DO;
18154 +        IF  NOT MISSING(nonstsal ) AND
18155 +                       47236.5 <= nonstsal  THEN DO;
18156 +          IF  NOT MISSING(statesal ) AND
18157 +                         12307.5 <= statesal  THEN DO;
18158 +            _NODE_  =                   61;
18159 +            _LEAF_  =                    4;
18160 +            P_totalsal  =     85280.3333333333;
18161 +            V_totalsal  =     84780.2105263158;
18162 +            END;
18163 +          ELSE DO;
18164 +            _NODE_  =                   60;
18165 +            _LEAF_  =                    3;
18166 +            P_totalsal  =     56825.5541535226;
18167 +            V_totalsal  =     56393.1634146341;
18168 +            END;
18169 +          END;
18170 +        ELSE DO;
18171 +          IF  NOT MISSING(statesal ) AND
18172 +                         39899.5 <= statesal  THEN DO;
18173 +            _NODE_  =                   59;
18174 +            _LEAF_  =                    2;
18175 +            P_totalsal  =     48164.7592920354;
18176 +            V_totalsal  =     48515.8536585365;
18177 +            END;
18178 +          ELSE DO;
18179 +            _NODE_  =                   58;
18180 +            _LEAF_  =                    1;
18181 +            P_totalsal  =      36420.600973236;
18182 +            V_totalsal  =     36209.7162471395;
18183 +            END;
18184 +          END;
18185 +        END;
18186 +      END;
18187 +    END;
18188 +  END;
18189 +
18190 +*****  RESIDUALS R_ *************;
18191 +IF MISSING( totalsal ) THEN R_totalsal  = .;
18192 +ELSE R_totalsal  = totalsal  - P_totalsal ;
18193 +
18194 +****************************************************************;
18195 +******          END OF DECISION TREE SCORING CODE         ******;
18196 +****************************************************************;
18197 +
18198 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18199  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18200  quit;
18201  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
18203  proc sort data=WORK.EM_USER_REPORT;
18204  by ID VIEW;
18205  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
18206  *------------------------------------------------------------*;
18207  * Tree2: Computing metadata for TRAIN data;
18208  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
18603  data WORK.MODELTEMP_INFO;
18604  set EMWS1.Tree2_EMINFO;
18605  where DATA='Tree2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18606  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_EMINFO.
      WHERE (DATA='Tree2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18607  data EMWS1.Tree2_EMINFO;
18608  length TARGET KEY $32 DATA $43;
18609  input TARGET KEY DATA $;
18610  cards;
 
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18614  run;
18615  data EMWS1.Tree2_EMINFO;
18616  set EMWS1.Tree2_EMINFO WORK.MODELTEMP_INFO;
18617  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18618  proc sort data = EMWS1.Tree2_EMINFO NOTHREADS;
18619  by TARGET KEY;
18620  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18621  proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18622  by TARGET KEY;
18623  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18624  proc sort data = EMWS1.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18625  by TARGET KEY;
18626  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18627  data EMWS1.Tree2_EMINFO;
18628  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18629  by TARGET KEY;
18630  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18631  proc datasets lib=work nolist;
18632  delete TEMP_INFO SORTEDEMINFO;
18633  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18634  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.TREE2_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 21, 2016
Time:                05:42:22
*------------------------------------------------------------*
18658  data EMWS1.Tree2_EMOUTFIT;
18659  set EMWS1.Tree2_EMOUTFIT;
18660  length TargetLabel $200;
18661  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18662  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18663  proc sort data=EMWS1.Tree2_EMREPORTFIT nothreads;
18664  by TARGET;
18665  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The data set EMWS1.TREE2_EMREPORTFIT has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18666  %let _EMwarndup = 0;
18667  %let _EMtargetdup =;
18668  %let _EMASEtargetdup =;
18669  data _null_;
18670  set EMWS1.Tree2_EMOUTFIT;
18671  if .<_ASE_<0.000001 then do;
18672  call symput('_EMwarndup', '1');
18673  call symput('_EMtargetdup', target);
18674  call symput('_EMASEtargetdup', put(_ASE_, best.));
18675  end;
18676  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
18677  %let EMEXCEPTIONSTRING=;
18678  *------------------------------------------------------------*;
18679  * REPORT: Tree2;
18680  *------------------------------------------------------------*;
18681  %let EM_ACTION = REPORT;
18682  %let syscc = 0;
18683  %macro main;
18684
18685    %if %upcase(&EM_ACTION) = CREATE %then %do;
18686      filename temp catalog 'sashelp.emmodl.tree_create.source';
18687      %include temp;
18688      filename temp;
18689
18690      %em_tree_create;
18691    %end;
18692
18693     %else
18694     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18695
18696         filename temp catalog 'sashelp.emmodl.tree_train.source';
18697         %include temp;
18698         filename temp;
18699         %em_tree_train;
18700     %end;
18701
18702    %else
18703    %if %upcase(&EM_ACTION) = SCORE %then %do;
18704      filename temp catalog 'sashelp.emmodl.tree_score.source';
18705      %include temp;
18706      filename temp;
18707
18708      %em_tree_score;
18709
18710    %end;
18711
18712    %else
18713    %if %upcase(&EM_ACTION) = REPORT %then %do;
18714
18715         filename temp catalog 'sashelp.emmodl.tree_report.source';
18716         %include temp;
18717         filename temp;
18718
18719         %em_tree_report;
18720     %end;
18721
18722    %else
18723    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18724
18725         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18726         %include temp;
18727         filename temp;
18728         %EM_TREE_OPENTREEVIEWER;
18729
18730     %end;
18731
18732    %else
18733    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18734
18735         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18736         %include temp;
18737         filename temp;
18738         %EM_TREE_CLOSETREEVIEWER;
18739
18740     %end;
18741
18742
18743     %doendm:
18744  %mend main;
18745
18746  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18748 +%macro em_tree_makePlotDs( multipleTar= );
18750 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18751 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18752 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18753 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18755 +  /* determine if validation statistics will be displayed */
18756 +  %let validflag=N;
18757 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18758 +    /* determine if validation data exists */
18759 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18760 +      %let validflag=Y;
18761 +    %end;
18762 +  %end;
18764 +   /* retrieve name of decmeta even in presence of multiple targets */
18765 +   %let decmeta = ;
18766 +   %if &EM_DEC_DECMETA eq %then %do;
18767 +     data _Target;
18768 +       set &em_data_variableset;
18769 +       where ROLE='TARGET' and USE in('D', 'Y');
18770 +       keep NAME;
18771 +     run;
18772 +     proc sort data=_Target;
18773 +       by NAME;
18774 +     run;
18775 +     proc sort data=EM_TARGETDECINFO;
18776 +       by TARGET;
18777 +     run;
18778 +     data _Target;
18779 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18780 +       by NAME;
18781 +       if _a then do;
18782 +         call symput('decmeta', trim(DECMETA));
18783 +       end;
18784 +     run;
18785 +     proc delete data=_Target;run;
18786 +   %end;
18787 +   %else %let decmeta = &EM_DEC_DECMETA;
18790 +  /* retrieve targetEvent from decmeta */
18791 +  %let targetEvent=;
18792 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18793 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18794 +      data _null_;
18795 +       set &DECMETA(where=(_TYPE_="TARGET"));
18796 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18797 +      run;
18798 +    %end;
18799 +  %end;
18801 +  /* retrieve predicted var for targetEvent from decmeta */
18802 +  %let predTarget=;
18803 +  %let predLvl=;
18804 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18805 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18806 +      data _null_;
18807 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18808 +       call symput('predTarget', strip(VARIABLE));
18809 +       call symput('predLvl', strip(LEVEL));
18810 +      run;
18811 +    %end;
18812 +  %end;
18813 +  %else %do;
18814 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18815 +      data _null_;
18816 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18817 +       call symput('predTarget', strip(VARIABLE));
18818 +      run;
18819 +    %end;
18820 +  %end;
18822 +  /* create BelowText value */
18823 +  data belowtext;
18824 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18825 +    keep node belowtext;
18826 +  run;
18828 +  /* relace belowtext with variable label if it exists */
18829 +  data belowtext2;
18830 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18831 +    keep node belowtextlbl;
18832 +  run;
18834 +  proc sort data=belowtext; by node; run;
18835 +  proc sort data=belowtext2; by node; run;
18837 +  data belowtext;
18838 +    merge belowtext belowtext2(in=_a);
18839 +    by node;
18840 +    if _a then belowtext=belowtextlbl;
18841 +    keep node belowtext;
18842 +  run;
18844 +  /* create AboveText value */
18845 +  data abovetext;
18846 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18847 +  run;
18848 +  proc sort data=abovetext; by node numeric_value; run;
18850 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18851 +  data abovetext;
18852 +    set abovetext(rename=(node=parent));
18853 +    by parent numeric_value;
18854 +    retain abovetext tempstring flag branch origval origchar ;
18855 +    length abovetext $256;
18856 +    length tempstring origchar $64;
18858 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18859 +      if first.parent then do;
18860 +        if missing(character_value) then do;
18861 +          numeric_value = round(numeric_value, &sp_precision);
18862 +          abovetext = "< "||strip(NUMERIC_VALUE);
18863 +          branch = 1;
18864 +          origval = numeric_value;
18865 +          output;
18866 +        end;
18867 +        else do;
18868 +          abovetext = "< "||strip(CHARACTER_VALUE);
18869 +          branch = 1;
18870 +          origchar = character_value;
18871 +          output;
18872 +        end;
18874 +        if first.parent AND last.parent then do;
18875 +          if missing(character_value) then do;
18876 +            numeric_value = round(numeric_value, &sp_precision);
18877 +            branch = branch + 1;
18878 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18879 +            output;
18880 +          end;
18881 +          else do;
18882 +            branch = branch + 1;
18883 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18884 +            output;
18885 +          end;
18886 +        end;
18887 +      end;
18888 +      else if last.parent then do;
18889 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18890 +          if missing(character_value) then do;
18891 +            numeric_value = round(numeric_value, &sp_precision);
18892 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18893 +          end;
18894 +          else do;
18895 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18896 +          end;
18897 +          branch = branch + 1;
18898 +          output;
18900 +          if missing(character_value) then do;
18901 +            numeric_value = round(numeric_value, &sp_precision);
18902 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18903 +          end;
18904 +          else do;
18905 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18906 +          end;
18907 +          branch = branch + 1;
18908 +          output;
18909 +        end;
18910 +        else do;
18911 +          if missing(character_value) then do;
18912 +            numeric_value = round(numeric_value, &sp_precision);
18913 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18914 +          end;
18915 +          else do;
18916 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18917 +          end;
18918 +          branch = branch + 1;
18919 +          output;
18920 +        end;
18921 +      end;
18922 +      else do;
18923 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18924 +          if missing(character_value) then do;
18925 +            numeric_value = round(numeric_value,&sp_precision);
18926 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18927 +            origval = numeric_value;
18928 +          end;
18929 +          else do;
18930 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18931 +            origchar = character_value;
18932 +          end;
18933 +          branch = branch + 1;
18934 +          output;
18936 +        end;
18937 +        else do;
18938 +          if missing(character_value) then do;
18939 +            numeric_value = round(numeric_value, &sp_precision);
18940 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18941 +            origval = numeric_value;
18942 +          end;
18943 +          else do;
18944 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18945 +            origval = character_value;
18946 +          end;
18947 +          branch = branch + 1;
18948 +          output;
18949 +        end;
18950 +      end;
18951 +    end;
18952 +    else do;
18953 +       if first.numeric_value then do;
18954 +         flag = 0;
18955 +         abovetext = strip(CHARACTER_VALUE);
18956 +         branch = numeric_value;
18957 +         if first.numeric_value AND last.numeric_value then do;
18958 +           output;
18959 +         end;
18960 +       end;
18961 +       else if last.numeric_value then do;
18962 +         if flag=0 then do;
18963 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18964 +           length = length(strip(tempstring));
18965 +           if length < 32 then do;
18966 +             abovetext = strip(tempstring);
18967 +           end;
18968 +           else do;
18969 +             abovetext = strip(abovetext)||", ...";
18970 +             flag = 1;
18971 +           end;
18972 +         end;
18973 +         branch = numeric_value;
18974 +         output;
18975 +       end;
18976 +       else do;
18977 +         if flag=0 then do;
18978 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18979 +           length = length(strip(tempstring));
18980 +           if length < 32 then do;
18981 +             abovetext = strip(tempstring);
18982 +           end;
18983 +           else do;
18984 +             abovetext = strip(abovetext)||", ...";
18985 +             flag=1;
18986 +           end;
18987 +         end;
18988 +         branch = numeric_value;
18989 +       end;
18990 +    end;
18991 +    keep parent branch abovetext;
18992 +  run;
18994 +  /* MIssing value to abovetext */
18995 +  data tempmissing;
18996 +    set &EM_USER_OUTRULES;
18997 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18998 +    rename node=parent numeric_value=branch character_value=misschar;
18999 +  run;
19002 +  proc sort data=abovetext; by parent branch; run;
19003 +  proc sort data=tempmissing; by parent branch; run;
19004 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19006 +  data tempoutnodes;
19007 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19008 +    by parent branch;
19009 +    length traintotal validtotal 8;
19010 +    retain traintotal validtotal;
19012 +    if _a then do;
19013 +      if ^MISSING(abovetext) then do;
19014 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19015 +      end;
19016 +      else do;
19017 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19018 +      end;
19019 +    end;
19020 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19022 +    if node=1 then do;
19023 +      traintotal = N;
19024 +      validtotal=VN;
19025 +    end;
19027 +    drop role rank stat misschar belowtext;
19028 +  run;
19029 +  proc sort data=tempoutnodes; by node; run;
19030 +  proc sort data=belowtext; by node; run;
19032 +  data tempoutnodes;
19033 +    merge tempoutnodes belowtext;
19034 +    by node;
19036 +  run;
19038 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19039 +  %let adjusted = N;
19040 +  %let npriors = 0;
19041 +  data _null_ ;
19042 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19043 +    if eof then do ;
19044 +      call symput("npriors" , strip(put(_N_,best.))) ;
19045 +    end;
19046 +  run;
19047 +  %if &npriors gt 0 %then %let adjusted=Y;
19050 +  /* create a table with targetUsed and targetLevel columns for each node */
19051 +  data temptarmeta;
19052 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19053 +    %if &multipleTar eq N %then %do;
19054 +      AND USE in ('D', 'Y')
19055 +    %end;
19056 +    ));
19057 +    length TARGET $32;
19058 +    Target=name;
19059 +    keep target level;
19060 +  run;
19062 +  %if &multipleTar eq Y %then %do;
19063 +    data temptargetused;
19064 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19065 +      keep node target;
19066 +    run;
19067 +    proc sort data=temptargetused; by target; run;
19068 +    proc sort data=temptarmeta; by target; run;
19069 +    data temptargetused;
19070 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19071 +      by target;
19072 +      if _a and _b;
19073 +    run;
19074 +  %end;
19075 +  %else %do;
19076 +    data temptargetused;
19077 +      set &EM_USER_OUTSTATS;
19078 +      length target $32 tarlevel $10;
19079 +      target="%EM_TARGET";
19080 +      tarlevel="%EM_TARGET_LEVEL";
19081 +      keep node target tarlevel;
19082 +    run;
19083 +    proc sort data=temptargetused nodupkey; by node; run;
19084 +  %end;
19086 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
19087 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19088 +  proc sort data=temptargetused; by node; run;
19091 +  /* create tables for all interval targets as well as all class targets */
19092 +  data tempinterval tempclass;
19093 +    merge tempoutstats temptargetused( rename=(target=targetused));
19094 +    by node;
19095 +    %if "&multipleTar" eq "Y" %then %do;
19096 +      if ((missing(Target)) OR (target=targetused ));
19097 +    %end;
19099 +    if tarlevel="INTERVAL" then output tempinterval;
19100 +    else output tempclass;
19101 +  run;
19103 +  /* iniitalize intTarget and classTarget flags */
19104 +  %let em_intNobs =0;
19105 +  %let em_classNobs = 0;
19106 +  %let em_intTarget= N;
19107 +  %let em_classTarget= N;
19109 +  proc sql;
19110 +    reset noprint;
19111 +    select count(*) into :em_intNobs from tempinterval;
19112 +  quit;
19113 +  proc sql;
19114 +    reset noprint;
19115 +    select count(*) into :em_classNobs from tempclass;
19116 +  quit;
19118 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19119 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19121 +  /* retrieve all information for interval targets */
19122 +  %if &em_intTarget eq Y %then %do;
19124 +    /* determine if leaf variable exists */
19125 +    %let dsid=%sysfunc(open(tempinterval,i));
19126 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19127 +    %let rc=%sysfunc(close(&dsid));
19129 +    proc transpose data=tempinterval
19130 +      %if &leafexists %then %do;
19131 +        (drop=leaf)
19132 +      %end;
19133 +      %if &validexist %then %do;
19134 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19135 +      %end;
19136 +      %else %do;
19137 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19138 +      %end;
19139 +      by node;
19140 +      id statname;
19141 +    run;
19142 +    data tempinterval;
19143 +      set tempinterval;
19144 +      if missing(N) then delete;
19145 +    run;
19146 +  %end;
19148 +  /* retrieve all information for class targets */
19149 +  %if &em_classTarget eq Y %then %do;
19150 +    proc sort data=tempclass; by node category; run;
19151 +    %if &validflag eq N %then %do;
19152 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19153 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19154 +    %end;
19155 +    %else %do;
19156 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19157 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19158 +    %end;
19159 +      set tempclass;
19161 +      %if &validflag eq N %then %do;
19162 +        %if "&adjusted" eq "N" %then %do;
19163 +          if statname="N" then output tempn;
19164 +        %end;
19165 +        %else %do;
19166 +          if statname="NPRIORS" then output tempn;
19167 +        %end;
19168 +        else if statname="PREDICTION" then output temppredict;
19169 +        else if statname="PROBABILITY" then output tempprob;
19170 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19171 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19172 +      %end;
19173 +      %else %do;
19174 +        %if "&adjusted" eq "N" %then %do;
19175 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19176 +        %end;
19177 +        %else %do;
19178 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19179 +        %end;
19180 +        else if statname="PREDICTION" then output temppredict;
19181 +        else if statname="PROBABILITY" then output tempprob;
19182 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19183 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19184 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19185 +      %end;
19186 +    run;
19189 +    /* determine if profit/loss exists in tempprofit */
19190 +    %let em_profitflag=0;
19191 +    %let em_lossflag=0;
19192 +    proc sql;
19193 +      reset noprint;
19194 +      select count(*) into :em_profitflag from tempprofit;
19195 +    quit;
19196 +    proc sql;
19197 +      reset noprint;
19198 +      select count(*) into :em_lossflag from temploss;
19199 +    quit;
19201 +    %if &validFlag eq Y %then %do;
19202 +      proc transpose data=tempn
19203 +        %if "&adjusted" eq "N" %then %do;
19204 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19205 +        %end;
19206 +        %else %do;
19207 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19208 +        %end;
19209 +        by node;
19210 +        id statname;
19211 +      run;
19212 +      %if &em_profitflag ne 0 %then %do;
19213 +        proc transpose data=tempprofit out=tempprofit;
19214 +          by node category;
19215 +          id statname ;
19216 +        run;
19217 +      %end;
19218 +      %if &em_lossflag ne 0 %then %do;
19219 +        proc transpose data=temploss out=temploss;
19220 +          by node category;
19221 +          id statname ;
19222 +        run;
19223 +      %end;
19224 +      data tempprob;
19225 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19226 +        by node
19227 +        %if &multipleTar eq Y %then %do;
19228 +          target
19229 +        %end;
19230 +        category;
19231 +      run;
19232 +    %end;
19234 +    /* store percentcorrect value */
19235 +    data temppredict;
19236 +      merge tempprob temppredict(in=_a);
19237 +      by node category;
19238 +      if _a then do;
19239 +        percentCorrect = statvalue;
19240 +        %if &validFlag eq Y %then %do;
19241 +          vpercentCorrect= vstatvalue;
19242 +        %end;
19243 +      end;
19244 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19245 +      %if &validFlag eq Y %then %do;
19246 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19247 +      %end;
19248 +      ;
19249 +      if missing(percentCorrect) then delete;
19250 +      drop target;
19251 +    run;
19253 +    /* build profittext */
19254 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19255 +      data tempprofittext(keep= node profittext profitloss);
19256 +        length profittext $800 profitloss 8.;
19257 +        retain profittext profitloss;
19259 +        merge tempprob
19260 +        %if &em_profitflag ne 0 %then %do;
19261 +          tempprofit
19262 +        %end;
19263 +        %else %if &em_lossflag ne 0 %then %do;
19264 +          temploss
19265 +        %end;
19266 +        ;
19267 +        by node category;
19269 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19270 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19271 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19272 +          %let profittype = ALL;
19273 +        %end;
19275 +        /* create the profitloss variable for nodecolor if selected */
19276 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19278 +        %if "&profittype" eq "ALL" %then %do;
19279 +          if strip(CATEGORY)="&targetEvent" then do;
19280 +            profitloss=statvalue;
19281 +          end;
19282 +          if first.node then do;
19283 +            %if &validFlag eq N %then %do;
19284 +             %if &em_profitflag ne 0 %then %do;
19285 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19286 +             %end;
19287 +             %if &em_lossflag ne 0 %then %do;
19288 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19289 +             %end;
19290 +            %end;
19291 +            %else %do;
19292 +             %if &em_profitflag ne 0 %then %do;
19293 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19293!+;
19294 +             %end;
19295 +             %if &em_lossflag ne 0 %then %do;
19296 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19297 +             %end;
19298 +            %end;
19299 +          end;
19300 +          else if last.node then do;
19301 +            %if &validFlag eq N %then %do;
19302 +             %if &em_profitflag ne 0 %then %do;
19303 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19304 +             %end;
19305 +             %if &em_lossflag ne 0 %then %do;
19306 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19307 +             %end;
19308 +             /*if CATEGORY="&targetEvent" then do;
19309 +               profitloss=statvalue;
19310 +             end;*/
19311 +            %end;
19312 +            %else %do;
19313 +             %if &em_profitflag ne 0 %then %do;
19314 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19314!+14.&EM_PROPERTY_SPLITPRECISION);
19315 +                if CATEGORY="&targetEvent" then do;
19316 +                 profitloss=ALTERNATIVE_PROFIT;
19317 +                end;
19318 +             %end;
19319 +             %if &em_lossflag ne 0 %then %do;
19320 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19320!+14.&EM_PROPERTY_SPLITPRECISION);
19321 +                if CATEGORY="&targetEvent" then do;
19322 +                  profitloss=ALTERNATIVE_LOSS;
19323 +                end;
19324 +             %end;
19325 +            %end;
19326 +            output;
19327 +          end;
19328 +          else do;
19329 +            %if &validFlag eq N %then %do;
19330 +             %if &em_profitflag ne 0 %then %do;
19331 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19332 +             %end;
19333 +             %if &em_lossflag ne 0 %then %do;
19334 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19335 +             %end;
19336 +            %end;
19337 +            %else %do;
19338 +             %if &em_profitflag ne 0 %then %do;
19339 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19339!+14.&EM_PROPERTY_SPLITPRECISION);
19340 +             %end;
19341 +             %if &em_lossflag ne 0 %then %do;
19342 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19342!+14.&EM_PROPERTY_SPLITPRECISION);
19343 +             %end;
19344 +            %end;
19345 +          end;
19346 +        %end;
19347 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19348 +          if strip(CATEGORY) = "&targetevent" then do;
19349 +            %if &validFlag eq N %then %do;
19350 +             %if &em_profitflag ne 0 %then %do;
19351 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19352 +             %end;
19353 +             %if &em_lossflag ne 0 %then %do;
19354 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19355 +             %end;
19356 +             profitloss=statvalue;
19357 +            %end;
19358 +            %else %do;
19359 +             %if &em_profitflag ne 0 %then %do;
19360 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19360!+;
19361 +                profitloss=ALTERNATIVE_PROFIT;
19362 +             %end;
19363 +             %if &em_lossflag ne 0 %then %do;
19364 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19365 +                profitloss=ALTERNATIVE_LOSS;
19366 +             %end;
19367 +            %end;
19368 +            output;
19369 +          end;
19370 +        %end;
19371 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19372 +          if strip(CATEGORY) = "&targetevent" then do;
19373 +            %if &validFlag eq N %then %do;
19374 +             profitloss=statvalue;
19375 +            %end;
19376 +            %else %do;
19377 +             %if &em_profitflag ne 0 %then %do;
19378 +                profitloss=ALTERNATIVE_PROFIT;
19379 +             %end;
19380 +             %if &em_lossflag ne 0 %then %do;
19381 +                profitloss=ALTERNATIVE_LOSS;
19382 +             %end;
19383 +            %end;
19384 +            output;
19385 +          end;
19386 +        %end;
19387 +      run;
19388 +    %end;
19390 +    data tempprob(keep= node probtext);
19391 +      length probtext $800;
19392 +      retain probtext;
19393 +      set tempprob ;
19394 +      by node;
19396 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19397 +      %let probtype = &EM_PROPERTY_TARGET;
19398 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19399 +        %let probtype = ALL;
19400 +      %end;
19402 +      %if "&probtype" eq "ALL" %then %do;
19403 +        if first.node then do;
19404 +          %if &validFlag eq N %then %do;
19405 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19406 +          %end;
19407 +          %else %do;
19408 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19409 +          %end;
19410 +        end;
19411 +        else if last.node then do;
19412 +          %if &validFlag eq N %then %do;
19413 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19414 +          %end;
19415 +          %else %do;
19416 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19417 +          %end;
19418 +          output;
19419 +        end;
19420 +        else do;
19421 +          %if &validFlag eq N %then %do;
19422 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19423 +          %end;
19424 +          %else %do;
19425 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19426 +          %end;
19427 +        end;
19428 +      %end;
19429 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19430 +        if strip(CATEGORY) = "&targetevent" then do;
19431 +          %if &validFlag eq N %then %do;
19432 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19433 +          %end;
19434 +          %else %do;
19435 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19436 +          %end;
19437 +          output;
19438 +        end;
19439 +      %end;
19440 +      %else %if "&probtype" eq "NONE" %then %do;
19441 +        if last.node then do;
19442 +          output;
19443 +        end;
19444 +      %end;
19445 +    run;
19446 +  %end;
19448 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19450 +  %let oldexists=0;
19451 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19452 +     data old_tree_plot;
19453 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19454 +        rename nodecolor=oldnodecolor;
19455 +     run;
19457 +     proc sort data=old_tree_plot;
19458 +        by node;
19459 +     run;
19461 +     %let oldexists=1;
19462 +  %end;
19464 +  data &EM_USER_TREE_PLOT;
19465 +    length textall $800;
19466 +    merge tempoutnodes temptargetused
19468 +    %if &em_intTarget eq Y %then %do;
19469 +      tempinterval
19470 +    %end;
19472 +    %if &em_classTarget eq Y %then %do;
19474 +      %if &validFlag eq N %then %do;
19475 +        tempn(rename=(statvalue=N))
19476 +      %end;
19477 +      %else %do;
19478 +        tempn
19479 +      %end;
19481 +      temppredict tempprob
19483 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19484 +        tempprofittext
19485 +      %end;
19486 +    %end;
19487 +    ;
19488 +    by node;
19490 +    /* build nodetext based on user selection */
19491 +    textall="";
19493 +    %if &em_intTarget eq Y %then %do;
19494 +    if tarlevel="INTERVAL" then do;
19495 +      /* Nodeid */
19496 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19497 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19498 +      %end;
19500 +      /* Target identifier if multiple targets are used */
19501 +      %if "&multipleTar" eq "Y" %then %do;
19502 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19503 +      %end;
19505 +      %if &validFlag eq Y %then %do;
19506 +         /* Column labels displayed in validflag eq Y only */
19507 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19508 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19508!+noquote ))";
19509 +         %end;
19511 +         /* Average values */
19512 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19513 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19514 +         %end;
19516 +         /* RASE */
19517 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19518 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19519 +         %end;
19521 +         /* Count */
19522 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19523 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19524 +         %end;
19525 +      %end;
19526 +      %else %do;
19527 +         /* Average values */
19528 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19529 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19530 +         %end;
19532 +         /* RASE */
19533 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19534 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19535 +         %end;
19537 +         /* Count */
19538 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19539 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19540 +         %end;
19541 +      %end;
19543 +      /* nodecolor */
19544 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19545 +        nodecolor=PREDICTION;
19546 +      %end;
19547 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19548 +        nodecolor=RASE;
19549 +      %end;
19550 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19551 +        nodecolor=1;
19552 +      %end;
19554 +    end;
19555 +    %end;
19556 +    %if &em_classTarget eq Y %then %do;
19557 +    if tarlevel^="INTERVAL" then  do;
19559 +      /* Nodeid */
19560 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19561 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19562 +      %end;
19563 +      /* Target identifier if multiple targets are used */
19564 +      %if "&multipleTar" eq "Y" %then %do;
19565 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19566 +      %end;
19568 +      /* Predicted values */
19569 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19570 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19571 +      %end;
19573 +      /* Column labels displayed in validflag eq Y only */
19574 +      %if "&ValidFlag" eq "Y" %then %do;
19575 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19576 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19576!+noquote ))";
19577 +        %end;
19578 +      %end;
19580 +      /* Target Values */
19581 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19582 +        textall=strip(textall)||"0A"x||strip(probtext);
19583 +      %end;
19585 +      /* include profit or loss for all target levels */
19586 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19587 +        textall=strip(textall)||"0A"x||strip(profittext);
19588 +      %end;
19590 +      %if &validFlag eq N %then %do;
19591 +        /* Percent Correct */
19592 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19593 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19594 +        %end;
19596 +         /* Count */
19597 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19598 +          %if "&adjusted" eq "N" %then %do;
19599 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19600 +          %end;
19601 +          %else %do;
19602 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19603 +          %end;
19604 +         %end;
19605 +      %end;
19606 +      %else %do;
19607 +        /* Percent Correct */
19608 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19609 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19610 +        %end;
19612 +         /* Count */
19613 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19614 +          %if "&adjusted" eq "N" %then %do;
19615 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19616 +          %end;
19617 +          %else %do;
19618 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19619 +          %end;
19620 +         %end;
19621 +      %end;
19623 +      /* nodecolor */
19624 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19625 +       %if &multipleTar ne Y %then %do;
19626 +        nodecolor=&predTarget;
19627 +       %end;
19628 +       %else %do;
19629 +         nodecolor=percentcorrect;
19630 +       %end;
19631 +      %end;
19632 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19633 +        nodecolor=percentcorrect;
19634 +      %end;
19635 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19636 +        nodecolor=1;
19637 +      %end;
19638 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19639 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19640 +          nodecolor=percentcorrect;
19641 +        %end;
19642 +        %else %do;
19643 +          nodecolor=profitloss;
19644 +        %end;
19645 +      %end;
19647 +    end;
19648 +    %end;
19649 +    %if &em_intTarget eq Y %then %do;
19650 +     drop  PREDICTION  TARGET TARLEVEL
19651 +     %if &ValidFlag eq Y %then %do;
19652 +         VPREDICTION
19653 +     %end;
19654 +     ;
19655 +    %end;
19656 +    %if &em_classTarget eq Y %then %do;
19657 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19658 +     %if &ValidFlag eq Y %then %do;
19659 +         VSTATVALUE
19660 +     %end;
19661 +     ;
19662 +    %end;
19664 +  run;
19666 +  /* add leaf index information to plotds - based on primary target only*/
19667 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19668 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19669 +      set &EM_USER_OUTSTATS;
19670 +      if ((statname="PROBABILITY"
19671 +      %if &validexist %then %do;
19672 +       or statname="VALID: PROBABILITY"
19673 +      %end;
19674 +      ) AND (CATEGORY="&TARGETEVENT")
19675 +      %if "&multipleTar" eq "Y" %then %do;
19676 +        AND (Target="%EM_TARGET")
19677 +      %end;
19678 +      );
19679 +    run;
19681 +    %if &validexist %then %do;
19682 +      proc sort data=tempprob; by node; run;
19683 +      %let vpredTarget = V%substr(&predTarget, 2);
19684 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19685 +         by node;
19686 +         id statname;
19687 +      run;
19688 +    %end;
19689 +  %end;
19690 +  %else %do;
19691 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19692 +      set &EM_USER_OUTSTATS;
19693 +      if ((statname="PREDICTION"
19694 +      %if &validexist %then %do;
19695 +       or statname="VALID: PREDICTION"
19696 +      %end;
19697 +      )
19698 +      %if "&multipleTar" eq "Y" %then %do;
19699 +        AND (Target="%EM_TARGET")
19700 +      %end;
19701 +      );
19702 +    run;
19703 +    %if &validexist %then %do;
19704 +      proc sort data=tempprob; by node; run;
19705 +      %let vpredTarget = V%substr(&predTarget, 2);
19706 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19707 +         by node;
19708 +         id statname;
19709 +      run;
19710 +    %end;
19711 +  %end;
19713 +  proc sort data=tempprob; by node; run;
19714 +  data tempoutnodes;
19715 +    merge tempoutnodes tempprob;
19716 +    by node;
19717 +  run;
19719 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19720 +  data tempnodes;
19721 +    retain traintotal validtotal;
19722 +    set tempnodes(where=(leaf ne . ));
19723 +    tprob=round(&predTarget, .01);
19724 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19725 +      percevent_train=round(tprob*100, .01);
19726 +    %end;
19727 +    %else %do;
19728 +      percevent_train=tprob;
19729 +    %end;
19731 +    perc_train=round((n/traintotal)*100, 0.01);
19732 +    /* leafwidth already has a *10 multiplier */
19733 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19735 +    %if &validexist %then %do;
19736 +      %let vpredTarget = V%substr(&predTarget,2);
19737 +      vprob=round(&vpredTarget, .01);
19738 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19739 +        percevent_valid=round(vprob*100, .01);
19740 +      %end;
19741 +      %else %do;
19742 +        percevent_valid=vprob;
19743 +      %end;
19744 +      perc_valid=round((vn/validtotal)*100, .01);
19745 +    %end;
19747 +    index=_N_;
19748 +    keep node index tprob perc_train percevent_train
19749 +    %if &validexist %then %do;
19750 +        vprob percevent_valid perc_valid
19751 +    %end;
19752 +    ;
19753 +  run;
19754 +  proc sort data=tempnodes; by node; run;
19755 +  data &EM_USER_TREE_PLOT;
19756 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19757 +    by node;
19758 +    if missing(node) then delete;
19759 +    %if &oldexists %then %do;
19760 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19761 +      drop oldnodecolor;
19762 +    %end;
19763 +    abovetext = compbl(abovetext);
19765 +    /* add variable labels */
19766 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19767 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19768 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19769 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19770 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19771 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19773 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19774 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19775 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19776 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19777 +          %end;
19778 +          %else %do;
19779 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19780 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19781 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19782 +          %end;
19783 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19785 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19786 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19787 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19788 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19789 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19790 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19791 +          %end;
19792 +          %else %do;
19793 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19794 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19795 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19796 +          %end;
19797 +    ;
19798 +  run;
19800 +  /* delete temporary tables */
19801 +  proc datasets lib=work nolist;
19802 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19803 +  run;
19805 +%mend em_tree_makePlotDs;
19809 +%macro em_tree_report;
19811 +   /* report properties */
19812 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19813 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19814 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19815 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19816 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19817 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19818 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19819 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19820 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19821 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19822 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19823 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19824 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19826 +   %let validexist=0;
19827 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19828 +     %let validexist=1;
19829 +   %end;
19831 +   /* determine if multiple targets will be processed */
19832 +   %let em_tree_multipleTargets=N;
19833 +   %let em_tree_numTarget=1;
19834 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19835 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19836 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19837 +         %let em_tree_multipleTargets=N;
19838 +      %end;
19839 +      %else %do;
19840 +        data _null_;
19841 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19842 +          if eof then
19843 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19844 +        run;
19846 +        %if &em_tree_numTarget gt 1 %then %do;
19847 +           %let em_tree_multipleTargets=Y;
19848 +        %end;
19849 +     %end;
19850 +   %end;
19852 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19854 +   /* variable importance */
19855 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19856 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19858 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19859 +     /* and the columns may not be generated                                                                                 */
19860 +     %let em_tree_cvexists=;
19861 +     %let em_tree_surrexists=.;
19862 +     data _null_;
19863 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19864 +       if eof then do ;
19865 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19866 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19867 +       end;
19868 +     run;
19870 +     data &EM_USER_OUTIMPORT;
19871 +         set &EM_USER_OUTIMPORT;
19872 +         /* format columns based on Precison value specified */
19873 +         format importance 15.&EM_PROPERTY_PRECISION
19874 +              %if &validexist %then %do;
19875 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19876 +              %end;
19877 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19878 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19879 +              %end;
19880 +         ;
19881 +     run;
19883 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19884 +     proc print data=&EM_USER_OUTIMPORT
19885 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19886 +          (where=((nrules>0) OR (nsurrogates>0)))
19887 +        %end;
19888 +        %else %do;
19889 +           (where=(nrules>0))
19890 +        %end;
19891 +        label noobs
19892 +        ;
19893 +     run;
19894 +     title10;
19896 +   %end;
19898 +   /* Sequence */
19899 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19900 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19901 +   data _null_ ;
19902 +      set &EM_USER_outseq (obs=2) end=eof ;
19903 +      if eof then do ;
19904 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19905 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19906 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19907 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19908 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19909 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19910 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19911 +      end;
19912 +    run;
19914 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19915 +      data &EM_USER_OUTSEQ;
19916 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19917 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19918 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19919 +           _XMISC_=_VMISC_
19920 +        %end;
19921 +        %if "&em_tree_aprof" ne "."  %then %do;
19922 +           _XAPROF_=_VAPROF_
19923 +           _XPROF_ = _VPROF_
19924 +        %end;
19925 +        %if "&em_tree_aloss" ne "."  %then %do;
19926 +           _XALOSS_=_VALOSS_
19927 +        %end;
19928 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19929 +           _XPASE_ = _VPASE_
19930 +           _XPMISC_ = _VPMISC_
19931 +        %end;
19933 +        ));
19934 +     %end;
19935 +     %else %do;
19936 +        set &EM_USER_OUTSEQ;
19937 +     %end;
19939 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19940 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19941 +            _MISC_   15.&EM_PROPERTY_PRECISION
19942 +         %end;
19943 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19944 +            _PASE_  15.&EM_PROPERTY_PRECISION
19945 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19946 +         %end;
19947 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19948 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19949 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19950 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19951 +            %end;
19952 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19953 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19954 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19955 +            %end;
19956 +         %end;
19957 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19958 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19959 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19960 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19961 +            %end;
19962 +         %end;
19963 +         %if "&em_tree_seq" ne "." %then %do;
19964 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19965 +         %end;
19966 +         %if "&em_tree_vseq" ne "." %then %do;
19967 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19968 +         %end;
19969 +         %if "&em_tree_aprof" ne "." %then %do;
19970 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19971 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19972 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19973 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19974 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19975 +           %end;
19976 +         %end;
19977 +         %else %if "&em_tree_aloss" ne "." %then %do;
19978 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19979 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19980 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19981 +           %end;
19982 +         %end;
19983 +      ;
19984 +    run;
19985 +   %end;
19987 +   /* Observation Based Importance */
19988 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19990 +      /* need to check for 0 obs */
19991 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19992 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19993 +      %let rc=%sysfunc(close(&dsid));
19995 +      %if &onobs %then %do;
19996 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19997 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19999 +         data &EM_USER_OUTOBSIMP;
20000 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20001 +           if _a;
20002 +           by _INPUT1_;
20003 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20004 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20005 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20006 +                   %end;
20007 +                   ;
20008 +         run;
20009 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20010 +      %end;
20011 +   %end;
20013 +  %end;
20015 +  /* create dataset to support tree diagram and icicle plot */
20016 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20017 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20019 +  /* display tree diagram */
20020 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20021 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20023 +  /* display icicle diagram */
20024 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20025 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20027 +  /* Leaf Statistics Plot */
20028 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20030 +  /* print leaf information to output window */
20031 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20033 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20034 +       by descending N;
20035 +     run;
20037 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20038 +     %local vn;
20039 +     data _null_;
20040 +       set t (obs=2) end=eof;
20041 +       if eof then do;
20042 +         call symput("vn", strip(put(vn, best.)));
20043 +       end;
20044 +     run;
20046 +     data t;
20047 +       set t;
20048 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20049 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20050 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20051 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20052 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20053 +       %end;
20054 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20055 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20056 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20057 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20058 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20059 +          %end;
20060 +       %end;
20061 +       ;
20062 +     run;
20064 +     /* determine if rase is found in t */
20065 +    %let dsid=%sysfunc(open(t,i));
20066 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20067 +    %let rc=%sysfunc(close(&dsid));
20069 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20070 +     proc print data=t noobs label;
20071 +       where tprob ne .;
20072 +       var node depth N tprob
20073 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20074 +         %if "&vn" ne "." %then %do;
20075 +           VN
20076 +         %end;
20077 +         vprob
20078 +       %end;
20079 +       %if &raseexists %then %do;
20080 +            RASE
20081 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20082 +              VRASE
20083 +            %end;
20084 +       %end;
20085 +       ;
20086 +     run;
20087 +     title10;
20088 +  %end;
20090 +  /* create plots that are done during training of node */
20091 +  /* display iterative plot, including reference line */
20092 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20093 +   /* %if &nleaves eq  %then %do; */
20094 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20095 +      data _null_;
20096 +        set &EM_USER_OUTTOPOLOGY end=eof;
20097 +        if eof then do;
20098 +          call symput('nleaves', LEAF);
20099 +        end;
20100 +      run;
20101 +   /* %end; */
20103 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20104 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20105 +  %end;
20107 +  /* display leaf statistics */
20108 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20110 +  /* stats by node if multiple targets = Y */
20111 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20112 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20113 +    data &EM_USER_OUTSTATS;
20114 +      set &EM_USER_OUTSTATS;
20116 +     * if STATNAME="TARGET" then delete;
20117 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20118 +      drop leaf;
20119 +    run;
20120 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20122 +  %end;
20123 +  %else %do;
20124 +    /* add outstats and outdescribe to spk but not results */
20125 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20126 +  %end;
20128 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 46 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 43 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 43 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 43 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 43 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 43 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 43 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 43 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      155:103   204:136   247:102   247:125   279:104   313:104   355:103   355:126   398:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      414:99
NOTE: There were 43 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 86 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1871 observations read from the data set EMWS1.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 43 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 86 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 86 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 43 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 87 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 86 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 43 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 87 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 87 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 43 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 43 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 87 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 522 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 522 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 522 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 435 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 87 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 522 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 522 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 522 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 87 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 522 observations and 6 variables.
NOTE: The data set WORK.TEMPCLASS has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 522 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 87 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 87 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 87 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      942:196   958:204   958:221
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 87 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 87 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 87 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 522 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 174 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 174 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 174 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 174 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 87 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 87 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 87 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 87 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 87 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 44 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 44 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: There were 44 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 87 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 87 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 87 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 87 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      316:141
NOTE: There were 87 observations read from the data set EMWS1.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
20129
20130  *------------------------------------------------------------*;
20131  * End REPORT: Tree2;
20132  *------------------------------------------------------------*;
 
20133  /* Reset EM Options */
20134  options formchar="|----|+|---+=|-/\<>*";
20135  options nocenter ls=256 ps=10000;
20136  goptions reset=all device=GIF NODISPLAY;
 
20137  proc sort data=WORK.EM_USER_REPORT;
20138  by ID VIEW;
20139  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20140  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20141  by NAME;
20142  run;
 
NOTE: There were 16 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 16 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
20143  proc sort data=EMWS1.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20144  by NAME;
20145  run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 16 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20146  data WORK.ASSESS_META;
20147  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20148  by NAME;
20149  run;
 
NOTE: There were 16 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 16 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 16 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20150  data EM_temp_assessMeta;
20151  set EMWS1.Tree2_CMeta_TRAIN;
20152  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20153  run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
20154  data EM_temp_assessdata;
20155  set EMWS1.Tree2_TRAIN(keep=
20156  P_totalsal
20157  R_totalsal
20158  V_totalsal
20159  _WARN_
20160  totalsal
20161  );
20162  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 6616 observations read from the data set EMWS1.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 6616 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
 
 
 
 
 
 
24493   data EM_temp_assessMeta;
24494   set EMWS1.Tree2_CMeta_TRAIN;
24495   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24496   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
24497   data EM_temp_assessdata;
24498   set EMWS1.Tree2_VALIDATE(keep=
24499   P_totalsal
24500   R_totalsal
24501   V_totalsal
24502   _WARN_
24503   totalsal
24504   );
24505   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2835 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 2835 observations read from the data set EMWS1.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2835 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
28846   %let _cn = %sysfunc(getoption(CENTER));
28847   options nocenter;
28848   proc print data=EMWS1.Tree2_EMREPORTFIT noobs label;
28849   var STAT LABEL TRAIN
28850   VALIDATE
28851   TEST
28852   ;
28853   by TARGET TARGETLABEL;
28854   title9 ' ';
28855   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28856   run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28857   title10;
28858   options &_cn;
 
28859   proc datasets library=EMWS1 nolist;
28860   modify Tree2_EMRANK;
28861   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28862   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28863   run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMRANK.DATA.
28864   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
 
 
28865   %let _cn = %sysfunc(getoption(CENTER));
28866   options nocenter;
28867   proc print data=EMWS1.Tree2_EMRANK label noobs;
28868   var
28869   decile N _targetMean_ _meanP_;
28870   by
28871   notsorted DATAROLE
28872   notsorted TARGET
28873   notsorted TARGETLABEL
28874   ;
28875   title9 ' ';
28876   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28877   run;
 
NOTE: There were 23 observations read from the data set EMWS1.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28878   title10;
28879   options &_cn;
 
28880   proc datasets library=EMWS1 nolist;
28881   modify Tree2_EMSCOREDIST;
28882   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28883   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28884   run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMSCOREDIST.DATA.
28885   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
