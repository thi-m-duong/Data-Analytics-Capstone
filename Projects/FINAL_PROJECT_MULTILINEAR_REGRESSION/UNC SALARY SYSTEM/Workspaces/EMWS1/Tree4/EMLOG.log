*------------------------------------------------------------*
User:                Intern Three
Date:                April 21, 2016
Time:                05:42:18
Site:                70085778
Platform:            X64_7HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 21, 2016
Time:                05:41:48
*------------------------------------------------------------*
14715  proc freq data=EMWS1.Tree4_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.Tree4META;
14717  run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE4_VARIABLESET.
NOTE: The data set WORK.TREE4META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.Tree4META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 8 observations read from the data set WORK.TREE4META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
"No decisions defined for target "totalsal"."
14726  proc print data = EMWS1.Ids_totalsal_DM noobs label;
14727  var _type_ variable label;
14728  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14729  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14730  title9 ' ';
14731  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14732  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14733  title10;
 
14734  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15257  *------------------------------------------------------------*;
15258  * Tree4: Generation of macros and macro variables;
15259  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15260  *------------------------------------------------------------*;
 
15261  %let EMEXCEPTIONSTRING=;
15262  *------------------------------------------------------------*;
15263  * TRAIN: Tree4;
15264  *------------------------------------------------------------*;
15265  %let EM_ACTION = TRAIN;
15266  %let syscc = 0;
15267  %macro main;
15268
15269    %if %upcase(&EM_ACTION) = CREATE %then %do;
15270      filename temp catalog 'sashelp.emmodl.tree_create.source';
15271      %include temp;
15272      filename temp;
15273
15274      %em_tree_create;
15275    %end;
15276
15277     %else
15278     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15279
15280         filename temp catalog 'sashelp.emmodl.tree_train.source';
15281         %include temp;
15282         filename temp;
15283         %em_tree_train;
15284     %end;
15285
15286    %else
15287    %if %upcase(&EM_ACTION) = SCORE %then %do;
15288      filename temp catalog 'sashelp.emmodl.tree_score.source';
15289      %include temp;
15290      filename temp;
15291
15292      %em_tree_score;
15293
15294    %end;
15295
15296    %else
15297    %if %upcase(&EM_ACTION) = REPORT %then %do;
15298
15299         filename temp catalog 'sashelp.emmodl.tree_report.source';
15300         %include temp;
15301         filename temp;
15302
15303         %em_tree_report;
15304     %end;
15305
15306    %else
15307    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15308
15309         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15310         %include temp;
15311         filename temp;
15312         %EM_TREE_OPENTREEVIEWER;
15313
15314     %end;
15315
15316    %else
15317    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15318
15319         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15320         %include temp;
15321         filename temp;
15322         %EM_TREE_CLOSETREEVIEWER;
15323
15324     %end;
15325
15326
15327     %doendm:
15328  %mend main;
15329
15330  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15332 +%macro em_tree_train;
15334 +   %if &EM_IMPORT_DATA eq %then %do;
15335 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15336 +       %put &em_codebar;
15337 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15338 +       %put &errormsg;
15339 +       %put &em_codebar;
15340 +       %goto doendm;
15341 +   %end;
15342 +   %else
15343 +       %let EMEXCEPTIONSTRING =;
15345 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15346 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15347 +        %put &em_codebar;
15348 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15349 +        %put &errormsg;
15350 +        %put &em_codebar;
15351 +        %goto doendm;
15352 +   %end;
15354 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15355 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15356 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15357 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15358 +        %put &em_codebar;
15359 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15360 +        %put &errormsg;
15361 +        %put &em_codebar;
15362 +        %goto doendm;
15363 +   %end;
15365 +   /* Initialize property macro variables */
15366 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15367 +   %include temp;
15368 +   filename temp;
15370 +   %EM_SetProperties;
15372 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15373 +   %EM_GETNAME(key=EMTREE, type=DATA);
15374 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15375 +     /* if import eq Y and no importtable defined, throw an exception */
15376 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15377 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15378 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15379 +         %put &em_codebar;
15380 +         %put &errmsg;
15381 +         %put &em_codebar;
15382 +         %goto doendm;
15383 +      %end;
15384 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15385 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15386 +         %put &em_codebar;
15387 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15388 +         %put &errormsg;
15389 +         %put &em_codebar;
15390 +         %goto doendm;
15391 +      %end;
15392 +      %else %do;
15393 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15394 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15395 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15396 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15397 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15398 +         %let dsid = %sysfunc(close(&dsid));
15399 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15400 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15401 +            %put &em_codebar;
15402 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15403 +            %put &errormsg;
15404 +            %put &em_codebar;
15405 +            %goto doendm;
15406 +         %end;
15407 +      %end;
15408 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15409 +         proc delete data=&EM_USER_EMTREE;
15410 +         run;
15411 +      %end;
15412 +   %end;
15413 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15414 +      proc delete data=&EM_USER_EMTREE;
15415 +      run;
15416 +   %end;
15418 +   /* load tree macros */
15419 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15420 +   %include temp;
15421 +   filename temp;
15423 +   /* data sets */
15424 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15425 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15426 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15428 +   /* files */
15429 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15431 +   /* check actual num of target levels */
15432 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15433 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15434 +                              nLevel=_nTargetLevel );
15435 +      %if &_nTargetLevel  > 2 %then %do;
15436 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15437 +        %put &em_codebar;
15438 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15439 +        %put &errormsg;
15440 +        %put &em_codebar;
15441 +        %goto doendm;
15442 +      %end;
15443 +   %end;
15445 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15446 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15447 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15448 +        %let costflag=0;
15449 +        data _null_;
15450 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15451 +          if eof then call symput("costflag", _N_);
15452 +        run;
15453 +        %if &costflag gt 0 %then %do;
15454 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15455 +          %put &em_codebar;
15456 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15457 +          %put &errormsg;
15458 +          %put &em_codebar;
15459 +          %goto doendm;
15460 +       %end;
15461 +     %end;
15462 +   %end;
15464 +   /* determine if multiple targets will be processed */
15465 +   %let em_tree_multipleTargets=N;
15466 +   %let em_tree_numTarget = 1;
15467 +   %let em_tree_targetVars=;
15469 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15470 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15471 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15472 +         %let em_tree_multipleTargets=N;
15473 +      %end;
15474 +      %else %do;
15475 +         /* create macro array of targets  */
15476 +         data _null_;
15477 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15478 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15479 +           if eof then
15480 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15481 +        run;
15483 +        %if &em_tree_numTarget gt 1 %then %do;
15484 +           %let em_tree_multipleTargets=Y;
15485 +        %end;
15486 +      %end;
15487 +   %end;
15489 +   /* create view of only necessary variable for performance reasons */
15490 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15491 +   data &tempData / view=&tempData;
15492 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15493 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15494 +       %EM_TARGET
15495 +     %end;
15496 +     %else %do;
15497 +       %if &em_tree_numTarget ne 0 %then %do;
15498 +         %do i=1 %to &em_tree_numTarget;
15499 +            &&em_tree_targetVars&i
15500 +         %end;
15501 +       %end;
15502 +     %end;
15503 +     );
15504 +   run;
15506 +   /* run Tree procedure */
15507 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15509 +   /* Check return code and throw exception if error is detected */
15510 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15511 +   %if &syserr %then %do;
15512 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15513 +     %goto doendm;
15514 +   %end;
15516 +   /* add decision score code if multiple targets are processed */
15517 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15518 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15519 +   %end;
15521 +   /* create outfit dataset if multiple score statements have been executed */
15522 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15524 +   /* create English Rules */
15525 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15526 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15527 +       %em_tree_makeEnglishRules;
15529 +       /* English Rules */
15530 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15532 +     %end;
15533 +   filename x;
15535 +   %doendm:
15536 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15537 +%macro EM_SetProperties;
15539 +   /* train properties */
15540 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15541 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15542 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15543 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15544 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15545 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15546 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15547 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15548 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15549 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15550 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15551 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15552 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15553 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15554 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15555 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15556 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15557 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15558 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15559 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15560 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15561 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15562 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15563 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15564 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15565 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15566 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15567 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15568 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15569 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15570 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15571 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15572 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15573 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15574 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15575 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15576 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15577 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15578 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15579 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15580 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15582 +   /* properties for interactive sample */
15583 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15584 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15585 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15588 +   /* report properties */
15589 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15603 +   /* score properties */
15604 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15607 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE4_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15609 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15610 +  %global &nLevel;
15611 +  proc dmdb batch data=&indata
15612 +    classout=_tmp_dmdbout;
15613 +    class &target;
15614 +  run;
15615 +  data _tmp_dmdbout;
15616 +    set _tmp_dmdbout;
15617 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15618 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15619 +  run;
15620 +  data _null_;
15621 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15622 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15623 +    %let dsid = %sysfunc(close(&dsid));
15624 +     call symput("&nLevel", put(&_obs, Best12.));
15625 +  run;
15627 +  proc datasets lib=work nolist;
15628 +     delete _tmp_dmdbout;
15629 +  run;
15630 +  quit;
15631 +%Mend EM_CheckBinaryTargetLevel;
15634 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15636 +  /* determine the number of obs in training data */
15637 +  proc sql;
15638 +    reset noprint;
15639 +    select count(*) into :em_nobs from &indata;
15640 +  quit;
15642 +  /* determine the number of input variables */
15643 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15644 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15646 +  /* retrieve targetEvent from decmeta */
15647 +  %let targetEvent=;
15648 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15649 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15650 +      data _null_;
15651 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15652 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15653 +      run;
15654 +    %end;
15655 +  %end;
15657 +  /* create targetTable if multipleTar eq Y */
15658 +  data temptarget;
15659 +    set &EM_DATA_VARIABLESET;
15660 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15661 +  run;
15663 + /* data sets */
15664 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15665 + %EM_GETNAME(key=EMTREE,        type=DATA);
15666 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15667 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15668 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15669 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15670 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15671 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15672 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15673 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15675 + /* files */
15676 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15677 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15679 + /* turn on pmml if requested */
15680 + %let nnpmml=0;
15681 + %if %symexist(EM_PMML) %then %do;
15682 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15683 +       %let nnpmml=1;
15685 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15686 +%end;
15688 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15690 + %if &nnpmml or &numClassTarget %then %do;
15692 +       /* create dmdb needed for pmml generation */
15693 +       %let tree_maxlevel = 512;
15694 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15695 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15696 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15697 +         %end;
15698 +       %end;
15699 +       %if &tree_maxlevel gt 0 %then %do;
15700 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15701 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15702 +       %end;
15704 +       %let targetOrderString =;
15705 +       %let targetString = ;
15706 +       data _null_;
15707 +          length orderString nameString $10000;
15708 +          retain orderString nameString;
15709 +          set &em_data_variableset end=eof;
15710 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15711 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15712 +          %end;
15713 +          %else %do;
15714 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15715 +          %end;          select(order);
15716 +            when('')        order ='DESC';
15717 +            when('FMTASC')  order='ASCFMT';
15718 +            when('FMTDESC') order='DESFMT';
15719 +            otherwise;
15720 +          end;
15721 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15722 +          nameString = trim(nameString)!!' '!!trim(NAME);
15724 +          if eof then do;
15725 +             call symput('targetOrderString', trim(orderString));
15726 +             call symput('targetString', trim(nameString));
15727 +          end;
15728 +       run;
15730 +       %let arborkluge= "work._treeDMDB";
15732 +       proc dmdb batch data=&indata
15733 +       %if &nnpmml %then %do;
15734 +           PMML
15735 +       %end;
15736 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15739 +   %if &nnpmml %then %do;
15740 +        %if "%EM_ID" ne "" %then %do;
15741 +          id %EM_ID;
15742 +        %end;
15743 +        %if &EM_NUM_CLASS gt 0 %then %do;
15744 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15745 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15746 +               &targetOrderString;
15747 +        %end;
15748 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15749 +          var %EM_INTERVAL;
15750 +        %end;
15751 +        target &targetString %EM_INTERVAL_TARGET;
15752 +        %if "%EM_FREQ" ne "" %then %do;
15753 +          freq %EM_FREQ;
15754 +        %end;
15755 +  %end;
15756 +  %else %do;
15757 +      class  &targetOrderString;
15758 +      target &targetString %EM_INTERVAL_TARGET;
15759 +  %end;
15760 +       run;
15761 +       quit;
15763 +       proc datasets lib=work nolist;
15764 +          delete classout varout;
15765 +       run;
15766 +       quit;
15768 +    %end;
15769 + %end;
15771 + /* run Arbor procedure */
15772 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15773 +  proc arbor data=&INDATA
15775 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15776 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15777 +  %end;
15779 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15780 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15781 +  %end;
15783 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15784 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15785 +  %end;
15787 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15788 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15789 +  %end;
15791 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15792 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15793 +  %end;
15795 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15796 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15797 +  %end;
15798 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15799 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15800 +  %end;
15801 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15802 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15803 +  %end;
15805 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15806 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15807 +      alpha = &EM_PROPERTY_SIGLEVEL
15808 +    %end;
15809 +  %end;
15811 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15812 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15813 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15814 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15815 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15817 +        padjust =
15818 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15819 +          &chaid
15820 +        %end;
15821 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15822 +          DEPTH
15823 +        %end;
15824 +      %end;
15825 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15826 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15827 +         pvars = &num_inputs
15828 +      %end;
15829 +    %end;
15830 +  %end;
15831 +  %else %do;
15832 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15833 +         padjust = NONE
15834 +      %end;
15835 +  %end;
15837 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15838 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15839 +    Maxrules = &num_nrules
15840 +  %end;
15842 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15843 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15844 +    Maxsurrs = &num_nsurrs
15845 +  %end;
15847 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15848 +     Missing=&EM_PROPERTY_MISSINGVALUE
15849 +  %end;
15851 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15852 +     USEVARONCE
15853 +  %end;
15855 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15856 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15857 +  %end;
15860 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15861 +    event = "&targetEvent"
15862 +  %end;
15864 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15865 +     DECSEARCH
15866 +  %end;
15868 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15869 +     PRIORSSEARCH
15870 +  %end;
15872 +  %if &arbor_1 ne %then %do;
15873 +    &arbor_1
15874 +  %end;
15876 +  %if &em_arbor ne %then %do;
15877 +     &em_arbor
15878 +  %end;
15879 +  ;
15880 + %end;
15881 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15882 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15883 +       interact;
15884 + %end;
15885 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15886 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15887 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15888 +    %put &em_codebar;
15889 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15890 +    %put &errormsg;
15891 +    %put &em_codebar;
15892 +    %goto doendm;
15893 +   %end;
15894 +   %else %do;
15895 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15896 +       interact;
15897 +   %end;
15898 + %end;
15900 + %else %do;
15901 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15902 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15903 +    %put &em_codebar;
15904 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15905 +    %put &errormsg;
15906 +    %put &em_codebar;
15907 +    %goto doendm;
15908 +   %end;
15909 +   %else %do;
15910 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15911 +        interact;
15912 +   %end;
15913 + %end;
15915 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15916 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15917 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15918 +    %end;
15920 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15921 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15922 +    %end;
15924 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15925 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15926 +    %end;
15928 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15929 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15930 +    %end;
15932 +    %if "%EM_FREQ" ne "" %then %do;
15933 +       freq %EM_FREQ;
15934 +    %end;
15936 +    %if "&multipleTar" eq "Y" %then %do;
15937 +       /* cycle through all target vars in variableset */
15938 +       %let tdsid = %sysfunc(open(temptarget));
15939 +       %if &tdsid %then %do;
15940 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15941 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15942 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15943 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15944 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15945 +             target &var / level = &lvl
15946 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15947 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15948 +             %end;
15949 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15950 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15951 +             %end;
15952 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15953 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15954 +             %end;
15955 +          %end;
15956 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
15957 +       %end;
15958 +       useTarget variable = %EM_TARGET;
15959 +    %end;
15960 +    %else %do;
15961 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
15962 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
15963 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
15964 +      %end;
15965 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15966 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
15967 +      %end;
15968 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15969 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
15970 +      %end;
15971 +    %end;
15973 +    %if "&multipleTar" eq "N" %then %do;
15974 +      &EM_DEC_STATEMENT;
15975 +    %end;
15977 +    Performance &EM_PROPERTY_PERFORMANCE
15978 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
15979 +      nodesize=&EM_PROPERTY_NODESAMPLE
15980 +    %end;
15981 +    ;
15983 +    %if "&intFlag" eq "Y" %then %do;
15984 +       INTERACT Largest;
15985 +       Train maxnewdepth=0;
15986 +    %end;
15988 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
15989 +         Assess
15990 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
15991 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
15992 +              %put &em_codebar;
15993 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
15994 +              %put &errormsg;
15995 +              %put &em_codebar;
15996 +            %end;
15997 +            %else %do;
15998 +               Validata=&EM_IMPORT_VALIDATE
15999 +            %end;
16000 +         %end;
16001 +         %else %do;
16002 +           NoValidata
16003 +         %end;
16004 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16005 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16006 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16007 +               %if &dsid %then %do;
16008 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16009 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16010 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16011 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16012 +                   %else %do;
16013 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16014 +                      %else %let measure= MISC;
16015 +                   %end;
16016 +                 %end;
16017 +               %end;
16018 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16019 +            %end;
16020 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16021 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16022 +                 %let measure=ASE;
16023 +              %end;
16024 +              %else %do;
16025 +                 %let measure=MISC;
16026 +              %end;
16027 +            %end;
16028 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16029 +              %let measure=ASE;
16030 +            %end;
16031 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16032 +               %let measure = LIFT;
16033 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16034 +               %if &dsid %then %do;
16035 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16036 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16037 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16038 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16039 +                 %end;
16040 +               %end;
16041 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16042 +            %end;
16043 +            measure=&measure
16044 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16045 +               event = "&targetEvent"
16046 +            %end;
16047 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16048 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16049 +            %end;
16050 +         %end;
16051 +         %if "&multipleTar" eq "N" %then %do;
16052 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16053 +               CV
16054 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16055 +                 CVNITer = &EM_PROPERTY_CVNITER
16056 +               %end;
16057 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16058 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16059 +               %end;
16060 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16061 +                 CVSeed = &EM_PROPERTY_CVSEED
16062 +               %end;
16063 +            %end;
16064 +         %end;
16065 +       %end;
16066 +      ;
16068 +      %if "&intFlag" ne "Y" %then %do;
16069 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16070 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16071 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16072 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16074 +          SUBTREE &subtree
16075 +          %if "&subtree" eq "NLEAVES" %then %do;
16076 +            =&EM_PROPERTY_NSUBTREE
16077 +          %end;
16078 +          ;
16079 +        %end;
16081 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16082 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16083 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16084 +          %end;
16085 +       %end;
16086 +      %end;
16087 + %end;
16090 + MakeMacro nleaves = nleaves;
16091 + save
16092 + %if "&EM_USER_EMTREE" ne "" %then %do;
16093 +   MODEL=&EM_USER_EMTREE
16094 + %end;
16095 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16096 +   SEQUENCE=&EM_USER_OUTSEQ
16097 + %end;
16098 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16099 +   IMPORTANCE=&EM_USER_OUTIMPORT
16100 + %end;
16101 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16102 +   NODESTAT=&EM_USER_OUTNODES
16103 + %end;
16104 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16105 +   SUMMARY=&EM_USER_OUTSUMMARY
16106 + %end;
16107 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16108 +   STATSBYNODE=&EM_USER_OUTSTATS
16109 + %end;
16110 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16111 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16112 + %end;
16113 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16114 +   Pathlistnonmissing=&EM_USER_OUTPATH
16115 + %end;
16116 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16117 +   RULES = &EM_USER_OUTRULES
16118 + %end;
16119 + ;
16121 + %if "&intFlag" ne "Y" %then %do;
16123 +   %let lookupString = ;
16124 +   %if ^%symexist(EM_OPTION) %then
16125 +      %let EM_OPTION=;
16127 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16128 +      %let lookupString = LOOKUP=SELECT;
16129 +   %end;
16131 +   %let codetext=;
16132 +   %let norescodetxt=;
16134 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16135 +     %let codetext=&codetext DUMMY;
16136 +     %let norescodetxt=&norescodetxt DUMMY;
16137 +   %end;
16138 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16139 +     %let codetext=&codetext NOLEAFID;
16140 +     %let norescodetxt=&norescodetxt NOLEAFID;
16141 +   %end;
16142 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16143 +     %let norescodetxt=&norescodetxt NOPRED;
16144 +   %end;
16146 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16147 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16149 +   %if &nnpmml %then %do;
16150 +     code pmml;
16151 +   %end;
16153 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16154 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16155 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16156 +   %end;
16157 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16158 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16159 +   %end;
16160 + %end;
16162 + run;
16163 + quit;
16165 + /*%em_checkerror(); */
16166 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16167 +   /* Delete DMDB catalog */
16168 +   proc datasets lib=work nolist;
16169 +       delete _treeDMDB / mt=cat;
16170 +  run;
16171 +  %end;
16173 + %if &nnpmml %then %do;
16174 +    ods pmml close;
16175 + %end;
16177 +  %doendm:
16179 +%mend em_tree_runTreeProcedure;
16181 +%macro em_tree_createFitStats( multipleTar= );
16184 +  /* create targetTable is multipleTar eq Y */
16185 +  data temptarget;
16186 +    set &EM_DATA_VARIABLESET;
16187 +    where ROLE="TARGET";
16188 +  run;
16190 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16191 +   data &EM_USER_EMOUTFIT;
16192 +     length target $32;
16193 +     merge work.fit_train
16194 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16195 +       work.fit_valid
16196 +     %end;
16197 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16198 +       work.fit_test
16199 +     %end;
16200 +     ;
16201 +     %if "&multipleTar" eq "N" %then %do;
16202 +       target="%EM_TARGET";
16203 +     %end;
16204 +     %else %do;
16205 +       target = _TARGET_;
16206 +     %end;
16207 +     drop _NW_ _SUMW_
16208 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16209 +        _VSUMW_
16210 +     %end;
16211 +     ;
16212 +   run;
16214 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16215 +     proc datasets library=work nolist;
16216 +       delete fit_valid;
16217 +     run;
16218 +   %end;
16219 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16220 +     proc datasets library=work nolist;
16221 +       delete fit_test;
16222 +     run;
16223 +   %end;
16225 +%mend em_tree_createFitStats;
16228 +%macro em_tree_makeEnglishRules;
16230 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16231 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16233 +  /* verify that necessary tables exist and if not, skip processing */
16234 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16235 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16236 +    %goto doendm;
16237 +  %end;
16238 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16239 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16240 +    %goto doendm;
16241 +  %end;
16243 +  /* determine length of variable in outpath dataset */
16244 +  %let vlength= ;
16245 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16246 +  %if &dsid ne %then %do;
16247 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16248 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16249 +  %end;
16250 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16252 +  data tempoutpath;
16253 +    length varname $&vlength;
16254 +    retain varname;
16255 +    set &EM_USER_OUTPATH;
16257 +    if ^missing(variable) then varname=variable;
16258 +    else if ^missing(var_name) then varname=var_name;
16259 +    output;
16260 +  run;
16262 +  /* create an array of generated predicted variable names */
16263 +  %let tree_pred_vars = ;
16264 +  %let tree_pred_label = ;
16265 +  %let numpred= 0;
16266 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16268 +    data _null_;
16269 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16270 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16271 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16272 +     if eof then
16273 +       call symput('numpred', strip(put(_N_, BEST.)));
16274 +    run;
16275 +  %end;
16277 +  /* determine if NPRIORS exists in outnodes  */
16278 +  %local nprior_flag;
16279 +  data _null_;
16280 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16281 +    if eof then do;
16282 +      call symput('nprior_flag', strip(put(npriors, best.)));
16283 +    end;
16284 +  run;
16286 +  proc sort data=tempoutpath; by node; run;
16287 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16289 +  data tempoutpath;
16290 +    merge tempoutpath(in=_a) outnodes(keep= node
16291 +    %if "&nprior_flag" ne "." %then %do;
16292 +      NPRIORS
16293 +    %end;
16294 +    %else %do;
16295 +      N
16296 +    %end;
16297 +    %if &numpred gt 0 %then %do;
16298 +      %do i=1 %to &numpred;
16299 +        &&tree_pred_vars&i
16300 +      %end;
16301 +    %end;
16302 +    );
16303 +    by node;
16304 +    if _a;
16305 +  run;
16307 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16309 +  data _null_;
16310 +    file x;
16311 +    set tempoutpath;
16312 +    by node descending varname;
16313 +    retain origvar oldnode string;
16314 +    length origvar $32 oldnode 8 string $200;
16316 +    if _N_ = 1 then do;
16317 +      origvar = varname;
16318 +      oldnode = node;
16319 +    end;
16321 +    if first.node then do;
16322 +       put "&EM_CODEBAR";
16323 +       put " Node = " node;
16324 +       put "&EM_CODEBAR";
16325 +    end;
16327 +      if first.varname then do;
16328 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16329 +            if MISSING(CHARACTER_VALUE) then do;
16330 +             if NUMERIC_VALUE ne .  then do;
16331 +              if ^first.node then do;
16332 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16333 +              end;
16334 +              else do;
16335 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16336 +              end;
16337 +             end;
16338 +            end;
16339 +            else do;
16340 +              if ^first.node then do;
16341 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16342 +              end;
16343 +              else do;
16344 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16345 +              end;
16346 +             end;
16347 +         end;
16348 +         else if RELATION in ("=") then do;
16349 +            if ^first.node then do;
16350 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16351 +            end;
16352 +            else do;
16353 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16354 +            end;
16355 +         end;
16356 +         else if RELATION in ("ISMISSING") then do;
16357 +            if ^first.node then do;
16358 +              string = " AND "|| strip(varname) || " equals Missing";
16359 +            end;
16360 +            else do;
16361 +              string = "if "|| strip(varname) ||" equals Missing";
16362 +            end;
16363 +         end;
16364 +         else if RELATION in ("ISNOTMISSING") then do;
16365 +            if ^first.node then do;
16366 +              string = " AND "|| strip(varname) || " equals All Values";
16367 +            end;
16368 +            else do;
16369 +              string = "if "|| strip(varname) ||" equals All Values";
16370 +            end;
16371 +         end;
16372 +         if ^missing(varname) then origvar = varname;
16373 +         oldnode=node;
16375 +      end;
16376 +      else do;
16377 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16378 +          if MISSING(CHARACTER_VALUE) then do;
16379 +           if  NUMERIC_VALUE ne .  then do;
16380 +            if ^MISSING(string) then
16381 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16382 +            else
16383 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16384 +           end;
16385 +          end;
16386 +          else do;
16387 +            if ^MISSING(string) then
16388 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16389 +            else
16390 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16391 +          end;
16393 +         end;
16394 +         else if RELATION in ("=") then do;
16395 +           string = strip(string)||", "||strip(character_value);
16396 +         end;
16397 +         else if RELATION in ("ISMISSING") then do;
16399 +         end;
16400 +         if ^missing(varname) then origvar = varname;
16401 +         oldnode=node;
16402 +      end;
16403 +      if last.varname then do;
16404 +         if RELATION in ("ISMISSING") then do;
16405 +           if ^first.varname then do;
16406 +             string = strip(string) || " or MISSING";
16407 +           end;
16408 +         end;
16409 +         put string;
16410 +         if ^missing(varname) then origvar = varname;
16411 +         oldnode=node;
16412 +      end;
16414 +      if last.node then do;
16415 +         put "then ";
16416 +         put " Tree Node Identifier   = " node;
16418 +         %if "&nprior_flag" ne "." %then %do;
16419 +           put " Number of Observations = " NPRIORS;
16420 +         %end;
16421 +         %else %do;
16422 +           put " Number of Observations = " N;
16423 +         %end;
16425 +         %if &numpred gt 0 %then %do;
16426 +           %do i=1 %to &numpred;
16427 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16428 +           %end;
16429 +         %end;
16431 +         put " ";
16432 +         if ^missing(varname) then origvar = varname;
16433 +         oldnode=node;
16434 +      end;
16436 +  run;
16438 +  proc datasets lib=work nolist;
16439 +    delete tempoutpath outnodes;
16440 +  run;
16442 +  %doendm:
16443 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE4.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596892 kilobytes of physical memory.
NOTE: Will use 6616 out of 6616 training cases.
NOTE: Using memory pool with 146240512 bytes.
NOTE: Will not search for split on variable campus.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 12 times.
NOTE: Training used 2181720 bytes of work memory.
NOTE: The subtree sequence contains 73 subtrees. The largest has 115 nodes and 76 leaves.
NOTE: Using subtree with 113 nodes and 75 leaves.
NOTE: Using subtree with 113 nodes and 75 leaves.
NOTE: Created macro variable NLEAVES equal to 75.
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 12 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_EMTREE has 4607 observations and 4 variables.
NOTE: The data set EMWS1.TREE4_OUTNODES has 113 observations and 16 variables.
NOTE: The data set EMWS1.TREE4_OUTPATH has 394 observations and 7 variables.
NOTE: The data set EMWS1.TREE4_OUTRULES has 1793 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_OUTSEQ has 73 observations and 18 variables.
NOTE: The data set EMWS1.TREE4_OUTSTATS has 678 observations and 4 variables.
NOTE: The data set EMWS1.TREE4_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE4_OUTTOPOLOGY has 113 observations and 5 variables.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\TREEFLOW.sas opened.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
 
 
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.92 seconds
      cpu time            0.60 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 6616 observations read from the data set EMWS1.EM_TREE4.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.93 seconds
      cpu time            0.60 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE4_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 394 observations read from the data set EMWS1.TREE4_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 394 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 394 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 394 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 113 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: The data set WORK.OUTNODES has 113 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 394 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 113 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 394 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 394 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 394 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=21Apr2016:05:41:56,
      Create Time=21Apr2016:05:41:56
 
NOTE: 752 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 143.
NOTE: There were 394 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
NOTE: Fileref X has been deassigned.
16445
16446  *------------------------------------------------------------*;
16447  * End TRAIN: Tree4;
16448  *------------------------------------------------------------*;
 
16449  *------------------------------------------------------------*;
16450  * Close any missing semi colons;
16451  *------------------------------------------------------------*;
16452  ;
16453  ;
16454  ;
16455  ;
16456  quit;
16457  *------------------------------------------------------------*;
16458  * Close any unbalanced quotes;
16459  *------------------------------------------------------------*;
16460  /*; *"; *'; */
16461  ;
16462  run;
16463  quit;
16464  /* Reset EM Options */
16465  options formchar="|----|+|---+=|-/\<>*";
16466  options nocenter ls=256 ps=10000;
16467  goptions reset=all device=GIF NODISPLAY;
 
16468  proc sort data=WORK.EM_USER_REPORT;
16469  by ID VIEW;
16470  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 21, 2016
Time:                05:41:58
*------------------------------------------------------------*
16572  %let EMEXCEPTIONSTRING=;
16573  *------------------------------------------------------------*;
16574  * SCORE: Tree4;
16575  *------------------------------------------------------------*;
16576  %let EM_ACTION = SCORE;
16577  %let syscc = 0;
16578  %macro main;
16579
16580    %if %upcase(&EM_ACTION) = CREATE %then %do;
16581      filename temp catalog 'sashelp.emmodl.tree_create.source';
16582      %include temp;
16583      filename temp;
16584
16585      %em_tree_create;
16586    %end;
16587
16588     %else
16589     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16590
16591         filename temp catalog 'sashelp.emmodl.tree_train.source';
16592         %include temp;
16593         filename temp;
16594         %em_tree_train;
16595     %end;
16596
16597    %else
16598    %if %upcase(&EM_ACTION) = SCORE %then %do;
16599      filename temp catalog 'sashelp.emmodl.tree_score.source';
16600      %include temp;
16601      filename temp;
16602
16603      %em_tree_score;
16604
16605    %end;
16606
16607    %else
16608    %if %upcase(&EM_ACTION) = REPORT %then %do;
16609
16610         filename temp catalog 'sashelp.emmodl.tree_report.source';
16611         %include temp;
16612         filename temp;
16613
16614         %em_tree_report;
16615     %end;
16616
16617    %else
16618    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16619
16620         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16621         %include temp;
16622         filename temp;
16623         %EM_TREE_OPENTREEVIEWER;
16624
16625     %end;
16626
16627    %else
16628    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16629
16630         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16631         %include temp;
16632         filename temp;
16633         %EM_TREE_CLOSETREEVIEWER;
16634
16635     %end;
16636
16637
16638     %doendm:
16639  %mend main;
16640
16641  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16643 +%macro em_tree_score;
16645 +   /* determine if multiple targets will be processed */
16646 +   %let em_tree_multipleTargets=N;
16647 +   %let em_tree_numTarget=1;
16648 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16649 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16650 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16651 +         %let em_tree_multipleTargets=N;
16652 +      %end;
16653 +      %else %do;
16654 +         /* create macro array of targets  */
16655 +         data _null_;
16656 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16657 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16658 +           if eof then
16659 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16660 +        run;
16662 +        %if &em_tree_numTarget gt 1 %then %do;
16663 +           %let em_tree_multipleTargets=Y;
16664 +        %end;
16665 +      %end;
16666 +   %end;
16668 +   /* build flow and publish scoring code */
16669 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16670 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16672 +   filename treeflow "&EM_USER_TREEFLOW";
16673 +   filename treepub "&EM_USER_TREEPUBLISH";
16675 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16676 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16678 +   %em_copyfile(infref=treeflow, outfref=flowref);
16679 +   %em_copyfile(infref=treepub, outfref=pubref);
16681 +   filename treeflow;
16682 +   filename treepub;
16684 +   /* if priors are used, add code to generate unadjusted residuals in export */
16685 +   %let useAdjPriors = N;
16686 +   data _null_;
16687 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16688 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16689 +   run;
16690 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16691 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16692 +      %include temp;
16693 +      filename temp;
16695 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16696 +      filename adjref "&EM_USER_adjResidualCode";
16697 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16699 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16701 +      filename adjref;
16702 +   %end;
16704 +   /* LEAF */
16705 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16706 +      data _null_;
16707 +        file flowref mod;
16708 +        put 'drop _LEAF_;';
16709 +      run;
16711 +      data _null_;
16712 +        file pubref mod;
16713 +        put 'drop _LEAF_;';
16714 +      run;
16716 +   %end;
16718 +   filename flowref;
16719 +   filename pubref;
16721 +   /* em_metachange code */
16722 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16723 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16724 +   %end;
16726 +   /* variable selection based on importance stat    */
16727 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16728 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16729 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16730 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16731 +     %let obs = %sysfunc(fetch(&dsid));
16732 +     %do %while(&obs=0);
16733 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16734 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16735 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16736 +       %let obs = %sysfunc(fetch(&dsid));
16737 +     %end;
16738 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16739 +   %end;
16741 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16742 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16743 +    %let tree_pred_vars = ;
16744 +    %let tree_pred_lvl =;
16745 +    %let numpred= 0;
16747 +    data _null_;
16748 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16749 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16750 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16751 +     if eof then
16752 +       call symput('numpred', strip(put(_N_, BEST.)));
16753 +    run;
16754 +   %end;
16756 +   %if &numpred ne 0 %then %do;
16757 +    %do i=1 %to &numpred;
16758 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16759 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16760 +    %end;
16761 +   %end;
16763 +   /* determine if multiple targets will be processed */
16764 +   %let em_tree_multipleTargets=N;
16765 +   %let em_tree_numTarget=1;
16766 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16767 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16768 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16769 +         %let em_tree_multipleTargets=N;
16770 +      %end;
16771 +      %else %do;
16772 +        data _null_;
16773 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16774 +          if eof then
16775 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16776 +        run;
16778 +        %if &em_tree_numTarget gt 1 %then %do;
16779 +           %let em_tree_multipleTargets=Y;
16780 +        %end;
16781 +     %end;
16782 +   %end;
16784 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16785 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16787 +      /* variable importance */
16788 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16789 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16791 +         %let validexist=0;
16792 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16793 +           %let validexist=1;
16794 +         %end;
16796 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16797 +         /* and the columns may not be generated                                                                                 */
16798 +         %let em_tree_cvexists=;
16799 +         %let em_tree_surrexists=.;
16800 +         data _null_;
16801 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16802 +            if eof then do ;
16803 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16804 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16805 +            end;
16806 +         run;
16808 +         data &EM_USER_OUTIMPORT;
16809 +            set &EM_USER_OUTIMPORT;
16811 +            /* format columns based on Precison value specified */
16812 +            format importance 15.&EM_PROPERTY_PRECISION
16813 +                 %if &validexist %then %do;
16814 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16815 +                 %end;
16816 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16817 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16818 +                 %end;
16819 +            ;
16820 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16821 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16822 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16823 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16824 +                 %if "&em_tree_surrexists" ne "" %then %do;
16825 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16826 +                 %end;
16827 +                 %if &validexist %then %do;
16828 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16829 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16830 +                 %end;
16831 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16832 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16833 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16834 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16835 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16836 +                 %end;
16837 +            ;
16838 +         run;
16840 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16841 +      %end;
16842 +   %end;
16844 +   %doendm:
16845 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21Apr2016:05:41:58,
      Create Time=21Apr2016:05:41:58
 
NOTE: 663 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 71.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21Apr2016:05:41:58,
      Create Time=21Apr2016:05:41:58
 
NOTE: 658 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 71.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=25453,
      Last Modified=21Apr2016:05:41:58,
      Create Time=21Apr2016:05:41:58
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=25280,
      Last Modified=21Apr2016:05:41:58,
      Create Time=21Apr2016:05:41:58
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 12 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
16846
16847  *------------------------------------------------------------*;
16848  * End SCORE: Tree4;
16849  *------------------------------------------------------------*;
 
16850  proc sort data=WORK.EM_METACHANGE;
16851  by key uname;
16852  run;
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16853  filename x "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\CDELTA_TRAIN.sas";
16854  data _null_;
16855  file x;
16856  put 'if upcase(NAME) = "AGE" then do;';
16857  put 'ROLE = "REJECTED";';
16858  put 'end;';
16859  put 'else ';
16860  put 'if upcase(NAME) = "CAMPUS" then do;';
16861  put 'ROLE = "REJECTED";';
16862  put 'end;';
16863  put 'else ';
16864  put 'if upcase(NAME) = "DEPT" then do;';
16865  put 'ROLE = "REJECTED";';
16866  put 'end;';
16867  put 'else ';
16868  put 'if upcase(NAME) = "EMPLOYED" then do;';
16869  put 'ROLE = "REJECTED";';
16870  put 'end;';
16871  put 'else ';
16872  put 'if upcase(NAME) = "EXEMPT2" then do;';
16873  put 'ROLE = "REJECTED";';
16874  put 'end;';
16875  put 'else ';
16876  put 'if upcase(NAME) = "FTE" then do;';
16877  put 'ROLE = "REJECTED";';
16878  put 'end;';
16879  put 'else ';
16880  put 'if upcase(NAME) = "GENDER" then do;';
16881  put 'ROLE = "REJECTED";';
16882  put 'end;';
16883  put 'else ';
16884  put 'if upcase(NAME) = "POSITION" then do;';
16885  put 'ROLE = "REJECTED";';
16886  put 'end;';
16887  put 'else ';
16888  put 'if upcase(NAME) = "Q_TOTALSAL" then do;';
16889  put 'ROLE = "ASSESS";';
16890  put 'end;';
16891  put 'else ';
16892  put 'if upcase(NAME) = "STATUS" then do;';
16893  put 'ROLE = "REJECTED";';
16894  put 'end;';
16895  put 'else ';
16896  put 'if upcase(NAME) = "STSERVYR" then do;';
16897  put 'ROLE = "REJECTED";';
16898  put 'end;';
16899  put 'else ';
16900  put 'if upcase(NAME) = "_NODE_" then do;';
16901  put 'ROLE = "SEGMENT";';
16902  put 'LEVEL = "NOMINAL";';
16903  put 'end;';
16904  run;
 
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:03,
      Create Time=20Apr2016:23:04:44
 
NOTE: 48 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16905  filename x;
NOTE: Fileref X has been deassigned.
 
16906  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
16907  *------------------------------------------------------------*;
16908  * Tree4: Scoring DATA data;
16909  *------------------------------------------------------------*;
16910  data EMWS1.Tree4_TRAIN
16911  / view=EMWS1.Tree4_TRAIN
16912  ;
16913  set EMWS1.Part_TRAIN
16914  ;
16915  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas.
16916 +****************************************************************;
16917 +******             DECISION TREE SCORING CODE             ******;
16918 +****************************************************************;
16919 +
16920 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16921 +LENGTH _WARN_  $    4;
16922 +
16923 +******              LABELS FOR NEW VARIABLES              ******;
16924 +label _NODE_ = 'Node' ;
16925 +label _LEAF_ = 'Leaf' ;
16926 +label P_totalsal = 'Predicted: totalsal' ;
16927 +label V_totalsal = 'Validated: totalsal' ;
16928 +label R_totalsal = 'Residual: totalsal' ;
16929 +label _WARN_ = 'Warnings' ;
16930 +
16931 +
16932 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16933 +LENGTH _ARBFMT_30 $     30; DROP _ARBFMT_30;
16934 +_ARBFMT_30 = ' '; /* Initialize to avoid warning. */
16935 +LENGTH _ARBFMT_28 $     28; DROP _ARBFMT_28;
16936 +_ARBFMT_28 = ' '; /* Initialize to avoid warning. */
16937 +
16938 +
16939 +******             ASSIGN OBSERVATION TO NODE             ******;
16940 +IF  NOT MISSING(nonstsal ) AND
16941 +               95900.5 <= nonstsal  AND
16942 +  nonstsal  <             180312.5 THEN DO;
16943 +  IF  NOT MISSING(statesal ) AND
16944 +                    2599 <= statesal  AND
16945 +    statesal  <              15464.5 THEN DO;
16946 +    _NODE_  =                   11;
16947 +    _LEAF_  =                   69;
16948 +    P_totalsal  =     145295.301886792;
16949 +    V_totalsal  =     138556.863636363;
16950 +    END;
16951 +  ELSE IF  NOT MISSING(statesal ) AND
16952 +                 15464.5 <= statesal  AND
16953 +    statesal  <                48253 THEN DO;
16954 +    _NODE_  =                   12;
16955 +    _LEAF_  =                   70;
16956 +    P_totalsal  =     166528.224137931;
16957 +    V_totalsal  =     155472.709677419;
16958 +    END;
16959 +  ELSE IF  NOT MISSING(statesal ) AND
16960 +                   48253 <= statesal  THEN DO;
16961 +    _NODE_  =                   13;
16962 +    _LEAF_  =                   71;
16963 +    P_totalsal  =            233685.12;
16964 +    V_totalsal  =      231484.59090909;
16965 +    END;
16966 +  ELSE DO;
16967 +    IF  NOT MISSING(nonstsal ) AND
16968 +                    109950 <= nonstsal  AND
16969 +      nonstsal  <             120749.5 THEN DO;
16970 +      _NODE_  =                   27;
16971 +      _LEAF_  =                   66;
16972 +      P_totalsal  =     114770.807692307;
16973 +      V_totalsal  =            115916.45;
16974 +      END;
16975 +    ELSE IF  NOT MISSING(nonstsal ) AND
16976 +                  120749.5 <= nonstsal  AND
16977 +      nonstsal  <             149359.5 THEN DO;
16978 +      _NODE_  =                   28;
16979 +      _LEAF_  =                   67;
16980 +      P_totalsal  =     134294.632653061;
16981 +      V_totalsal  =     135776.804878048;
16982 +      END;
16983 +    ELSE IF  NOT MISSING(nonstsal ) AND
16984 +                  149359.5 <= nonstsal  THEN DO;
16985 +      _NODE_  =                   29;
16986 +      _LEAF_  =                   68;
16987 +      P_totalsal  =     165185.515151515;
16988 +      V_totalsal  =     166636.777777777;
16989 +      END;
16990 +    ELSE DO;
16991 +      _NODE_  =                   26;
16992 +      _LEAF_  =                   65;
16993 +      P_totalsal  =     101778.095238095;
16994 +      V_totalsal  =     102117.243902439;
16995 +      END;
16996 +    END;
16997 +  END;
16998 +ELSE IF  NOT MISSING(nonstsal ) AND
16999 +              180312.5 <= nonstsal  AND
17000 +  nonstsal  <             290367.5 THEN DO;
17001 +  IF  NOT MISSING(nonstsal ) AND
17002 +    nonstsal  <             209437.5 THEN DO;
17003 +    _NODE_  =                   14;
17004 +    _LEAF_  =                   72;
17005 +    P_totalsal  =     205333.694117647;
17006 +    V_totalsal  =     204150.071428571;
17007 +    END;
17008 +  ELSE IF  NOT MISSING(nonstsal ) AND
17009 +                209437.5 <= nonstsal  AND
17010 +    nonstsal  <               235147 THEN DO;
17011 +    _NODE_  =                   15;
17012 +    _LEAF_  =                   73;
17013 +    P_totalsal  =     234605.621212121;
17014 +    V_totalsal  =     241105.225806451;
17015 +    END;
17016 +  ELSE DO;
17017 +    _NODE_  =                   16;
17018 +    _LEAF_  =                   74;
17019 +    P_totalsal  =     273957.193877551;
17020 +    V_totalsal  =     271501.285714285;
17021 +    END;
17022 +  END;
17023 +ELSE IF  NOT MISSING(nonstsal ) AND
17024 +              290367.5 <= nonstsal  THEN DO;
17025 +  _NODE_  =                    5;
17026 +  _LEAF_  =                   75;
17027 +  P_totalsal  =     389678.802631579;
17028 +  V_totalsal  =     377767.533333333;
17029 +  END;
17030 +ELSE DO;
17031 +  IF  NOT MISSING(statesal ) AND
17032 +                 60301.5 <= statesal  AND
17033 +    statesal  <               108099 THEN DO;
17034 +    IF  NOT MISSING(nonstsal ) AND
17035 +                    9900.5 <= nonstsal  AND
17036 +      nonstsal  <              34813.5 THEN DO;
17037 +      _NODE_  =                   22;
17038 +      _LEAF_  =                   58;
17039 +      P_totalsal  =     103556.683673469;
17040 +      V_totalsal  =     104522.135135135;
17041 +      END;
17042 +    ELSE IF  NOT MISSING(nonstsal ) AND
17043 +                   34813.5 <= nonstsal  THEN DO;
17044 +      _NODE_  =                   23;
17045 +      _LEAF_  =                   59;
17046 +      P_totalsal  =     141148.098901098;
17047 +      V_totalsal  =             136074.7;
17048 +      END;
17049 +    ELSE DO;
17050 +      IF  NOT MISSING(statesal ) AND
17051 +                       71097 <= statesal  AND
17052 +        statesal  <              81763.5 THEN DO;
17053 +        IF  NOT MISSING(statesal ) AND
17054 +          statesal  <                74875 THEN DO;
17055 +          _NODE_  =                   72;
17056 +          _LEAF_  =                   51;
17057 +          P_totalsal  =     73448.6666666666;
17058 +          V_totalsal  =     73306.9090909091;
17059 +          END;
17060 +        ELSE IF  NOT MISSING(statesal ) AND
17061 +                         74875 <= statesal  AND
17062 +          statesal  <                76825 THEN DO;
17063 +          _NODE_  =                   73;
17064 +          _LEAF_  =                   52;
17065 +          P_totalsal  =     75918.0727272727;
17066 +          V_totalsal  =     76591.7058823529;
17067 +          END;
17068 +        ELSE DO;
17069 +          _NODE_  =                   74;
17070 +          _LEAF_  =                   53;
17071 +          P_totalsal  =     79991.7974683544;
17072 +          V_totalsal  =     79243.1842105263;
17073 +          END;
17074 +        END;
17075 +      ELSE IF  NOT MISSING(statesal ) AND
17076 +                     81763.5 <= statesal  AND
17077 +        statesal  <                92774 THEN DO;
17078 +        IF  NOT MISSING(statesal ) AND
17079 +          statesal  <                84994 THEN DO;
17080 +          _NODE_  =                   75;
17081 +          _LEAF_  =                   54;
17082 +          P_totalsal  =     84096.6315789473;
17083 +          V_totalsal  =             84898.44;
17084 +          END;
17085 +        ELSE DO;
17086 +          _NODE_  =                   76;
17087 +          _LEAF_  =                   55;
17088 +          P_totalsal  =     90010.5222222222;
17089 +          V_totalsal  =     89579.7142857143;
17090 +          END;
17091 +        END;
17092 +      ELSE IF  NOT MISSING(statesal ) AND
17093 +                       92774 <= statesal  THEN DO;
17094 +        IF  NOT MISSING(statesal ) AND
17095 +                        100867 <= statesal  THEN DO;
17096 +          _NODE_  =                   78;
17097 +          _LEAF_  =                   57;
17098 +          P_totalsal  =             105425.5;
17099 +          V_totalsal  =     105827.566666666;
17100 +          END;
17101 +        ELSE DO;
17102 +          _NODE_  =                   77;
17103 +          _LEAF_  =                   56;
17104 +          P_totalsal  =     97038.7866666666;
17105 +          V_totalsal  =                97273;
17106 +          END;
17107 +        END;
17108 +      ELSE DO;
17109 +        IF  NOT MISSING(statesal ) AND
17110 +          statesal  <              63410.5 THEN DO;
17111 +          _NODE_  =                   69;
17112 +          _LEAF_  =                   48;
17113 +          P_totalsal  =     62533.6964285714;
17114 +          V_totalsal  =     63382.3870967742;
17115 +          END;
17116 +        ELSE IF  NOT MISSING(statesal ) AND
17117 +                       63410.5 <= statesal  AND
17118 +          statesal  <              66247.5 THEN DO;
17119 +          _NODE_  =                   70;
17120 +          _LEAF_  =                   49;
17121 +          P_totalsal  =     65306.0196078431;
17122 +          V_totalsal  =     64981.0689655172;
17123 +          END;
17124 +        ELSE DO;
17125 +          _NODE_  =                   71;
17126 +          _LEAF_  =                   50;
17127 +          P_totalsal  =     69608.8775510204;
17128 +          V_totalsal  =     70048.5675675675;
17129 +          END;
17130 +        END;
17131 +      END;
17132 +    END;
17133 +  ELSE IF  NOT MISSING(statesal ) AND
17134 +                  108099 <= statesal  AND
17135 +    statesal  <               162093 THEN DO;
17136 +    IF  NOT MISSING(nonstsal ) AND
17137 +                   22783.5 <= nonstsal  THEN DO;
17138 +      _NODE_  =                   25;
17139 +      _LEAF_  =                   63;
17140 +      P_totalsal  =             172191.4;
17141 +      V_totalsal  =     175374.619047619;
17142 +      END;
17143 +    ELSE DO;
17144 +      IF  NOT MISSING(statesal ) AND
17145 +                    130026.5 <= statesal  THEN DO;
17146 +        _NODE_  =                   47;
17147 +        _LEAF_  =                   62;
17148 +        P_totalsal  =     147090.839080459;
17149 +        V_totalsal  =          147979.8125;
17150 +        END;
17151 +      ELSE DO;
17152 +        IF  NOT MISSING(statesal ) AND
17153 +                      117576.5 <= statesal  THEN DO;
17154 +          _NODE_  =                   80;
17155 +          _LEAF_  =                   61;
17156 +          P_totalsal  =     128431.728813559;
17157 +          V_totalsal  =     126284.958333333;
17158 +          END;
17159 +        ELSE DO;
17160 +          _NODE_  =                   79;
17161 +          _LEAF_  =                   60;
17162 +          P_totalsal  =          116553.6625;
17163 +          V_totalsal  =     115684.620689655;
17164 +          END;
17165 +        END;
17166 +      END;
17167 +    END;
17168 +  ELSE IF  NOT MISSING(statesal ) AND
17169 +                  162093 <= statesal  THEN DO;
17170 +    _NODE_  =                    9;
17171 +    _LEAF_  =                   64;
17172 +    P_totalsal  =     224578.765306122;
17173 +    V_totalsal  =     236071.901960784;
17174 +    END;
17175 +  ELSE DO;
17176 +    IF  NOT MISSING(nonstsal ) AND
17177 +                   43903.5 <= nonstsal  AND
17178 +      nonstsal  <              57561.5 THEN DO;
17179 +      IF  NOT MISSING(nonstsal ) AND
17180 +        nonstsal  <              47236.5 THEN DO;
17181 +        _ARBFMT_30 = PUT( exempt2 , $30.);
17182 +         %DMNORMIP( _ARBFMT_30);
17183 +        IF _ARBFMT_30 IN ('EXEMPT' ) THEN DO;
17184 +          _NODE_  =                   60;
17185 +          _LEAF_  =                   30;
17186 +          P_totalsal  =     54232.3275862069;
17187 +          V_totalsal  =     55741.5263157894;
17188 +          END;
17189 +        ELSE DO;
17190 +          _NODE_  =                   59;
17191 +          _LEAF_  =                   29;
17192 +          P_totalsal  =     45695.6432160804;
17193 +          V_totalsal  =     47597.4642857142;
17194 +          END;
17195 +        END;
17196 +      ELSE IF  NOT MISSING(nonstsal ) AND
17197 +                       52023 <= nonstsal  THEN DO;
17198 +        _NODE_  =                   36;
17199 +        _LEAF_  =                   35;
17200 +        P_totalsal  =     56000.9809160305;
17201 +        V_totalsal  =     56889.7950819672;
17202 +        END;
17203 +      ELSE DO;
17204 +        _ARBFMT_28 = PUT( position , $28.);
17205 +         %DMNORMIP( _ARBFMT_28);
17206 +        IF _ARBFMT_28 IN ('OTHER' ) THEN DO;
17207 +          _NODE_  =                   61;
17208 +          _LEAF_  =                   31;
17209 +          P_totalsal  =     50091.2717391304;
17210 +          V_totalsal  =     50038.6444444444;
17211 +          END;
17212 +        ELSE IF _ARBFMT_28 IN ('ADMIN' ,'ASSISTANT OTHER' ,'BUILDING' ,
17213 +          'CLINICAL OTHER' ,'CLINICAL RESEARCH' ) THEN DO;
17214 +          _NODE_  =                   62;
17215 +          _LEAF_  =                   32;
17216 +          P_totalsal  =     49622.3728813559;
17217 +          V_totalsal  =     49552.6071428571;
17218 +          END;
17219 +        ELSE IF _ARBFMT_28 IN ('EXECUTIVE' ,'RESEARCH OTHER' ,
17220 +        'OTHER PROGRAM' ,'PROJECT MANAGER' ,'RESEARCH ASSOCIATE' ,
17221 +          'RESEARCH SPECIALIST' ,'RESEARCH TECHNICIAN' ) THEN DO;
17222 +          _NODE_  =                   64;
17223 +          _LEAF_  =                   34;
17224 +          P_totalsal  =          50058.90625;
17225 +          V_totalsal  =                49517;
17226 +          END;
17227 +        ELSE DO;
17228 +          _NODE_  =                   63;
17229 +          _LEAF_  =                   33;
17230 +          P_totalsal  =     57550.0181818181;
17231 +          V_totalsal  =     56288.8518518518;
17232 +          END;
17233 +        END;
17234 +      END;
17235 +    ELSE IF  NOT MISSING(nonstsal ) AND
17236 +                   57561.5 <= nonstsal  AND
17237 +      nonstsal  <                74256 THEN DO;
17238 +      IF  NOT MISSING(statesal ) AND
17239 +                        8802 <= statesal  THEN DO;
17240 +        _NODE_  =                   38;
17241 +        _LEAF_  =                   44;
17242 +        P_totalsal  =              94400.2;
17243 +        V_totalsal  =     98545.4285714285;
17244 +        END;
17245 +      ELSE DO;
17246 +        IF  NOT MISSING(nonstsal ) AND
17247 +          nonstsal  <              60502.5 THEN DO;
17248 +          IF  NOT MISSING(nonstsal ) AND
17249 +            nonstsal  <              59070.5 THEN DO;
17250 +            _NODE_  =                  108;
17251 +            _LEAF_  =                   36;
17252 +            P_totalsal  =             58257.96;
17253 +            V_totalsal  =              58209.6;
17254 +            END;
17255 +          ELSE DO;
17256 +            _NODE_  =                  109;
17257 +            _LEAF_  =                   37;
17258 +            P_totalsal  =     59803.3114754098;
17259 +            V_totalsal  =     59782.6296296296;
17260 +            END;
17261 +          END;
17262 +        ELSE IF  NOT MISSING(nonstsal ) AND
17263 +                       60502.5 <= nonstsal  AND
17264 +          nonstsal  <              64148.5 THEN DO;
17265 +          IF  NOT MISSING(nonstsal ) AND
17266 +                           62434 <= nonstsal  THEN DO;
17267 +            _NODE_  =                  111;
17268 +            _LEAF_  =                   39;
17269 +            P_totalsal  =     63386.0882352941;
17270 +            V_totalsal  =             63171.84;
17271 +            END;
17272 +          ELSE DO;
17273 +            _NODE_  =                  110;
17274 +            _LEAF_  =                   38;
17275 +            P_totalsal  =     61480.6913580247;
17276 +            V_totalsal  =     61572.9210526315;
17277 +            END;
17278 +          END;
17279 +        ELSE IF  NOT MISSING(nonstsal ) AND
17280 +                       64148.5 <= nonstsal  AND
17281 +          nonstsal  <                68310 THEN DO;
17282 +          IF  NOT MISSING(nonstsal ) AND
17283 +                         66244.5 <= nonstsal  THEN DO;
17284 +            _NODE_  =                  113;
17285 +            _LEAF_  =                   41;
17286 +            P_totalsal  =     67381.0434782608;
17287 +            V_totalsal  =             67396.05;
17288 +            END;
17289 +          ELSE DO;
17290 +            _NODE_  =                  112;
17291 +            _LEAF_  =                   40;
17292 +            P_totalsal  =     65295.6666666666;
17293 +            V_totalsal  =     65467.7567567567;
17294 +            END;
17295 +          END;
17296 +        ELSE DO;
17297 +          IF  NOT MISSING(nonstsal ) AND
17298 +            nonstsal  <                70853 THEN DO;
17299 +            _NODE_  =                  114;
17300 +            _LEAF_  =                   42;
17301 +            P_totalsal  =     70004.1267605633;
17302 +            V_totalsal  =     69839.4864864864;
17303 +            END;
17304 +          ELSE DO;
17305 +            _NODE_  =                  115;
17306 +            _LEAF_  =                   43;
17307 +            P_totalsal  =     72698.8068181818;
17308 +            V_totalsal  =     72584.0769230769;
17309 +            END;
17310 +          END;
17311 +        END;
17312 +      END;
17313 +    ELSE IF  NOT MISSING(nonstsal ) AND
17314 +                     74256 <= nonstsal  THEN DO;
17315 +      IF  NOT MISSING(nonstsal ) AND
17316 +                     81491.5 <= nonstsal  AND
17317 +        nonstsal  <              86766.5 THEN DO;
17318 +        _NODE_  =                   40;
17319 +        _LEAF_  =                   46;
17320 +        P_totalsal  =                85762;
17321 +        V_totalsal  =     85909.1818181818;
17322 +        END;
17323 +      ELSE IF  NOT MISSING(nonstsal ) AND
17324 +                     86766.5 <= nonstsal  THEN DO;
17325 +        _NODE_  =                   41;
17326 +        _LEAF_  =                   47;
17327 +        P_totalsal  =     94602.0574712643;
17328 +        V_totalsal  =     94566.3731343283;
17329 +        END;
17330 +      ELSE DO;
17331 +        _NODE_  =                   39;
17332 +        _LEAF_  =                   45;
17333 +        P_totalsal  =     80472.2113402061;
17334 +        V_totalsal  =      81919.048192771;
17335 +        END;
17336 +      END;
17337 +    ELSE DO;
17338 +      IF  NOT MISSING(statesal ) AND
17339 +                       538.5 <= statesal  AND
17340 +        statesal  <                30580 THEN DO;
17341 +        IF  NOT MISSING(nonstsal ) AND
17342 +                         13022 <= nonstsal  THEN DO;
17343 +          IF  NOT MISSING(statesal ) AND
17344 +                         20121.5 <= statesal  THEN DO;
17345 +            _NODE_  =                   98;
17346 +            _LEAF_  =                   18;
17347 +            P_totalsal  =     50866.2777777777;
17348 +            V_totalsal  =     52344.2777777777;
17349 +            END;
17350 +          ELSE DO;
17351 +            _NODE_  =                   97;
17352 +            _LEAF_  =                   17;
17353 +            P_totalsal  =     41342.3174603174;
17354 +            V_totalsal  =     41047.4666666666;
17355 +            END;
17356 +          END;
17357 +        ELSE DO;
17358 +          IF  NOT MISSING(statesal ) AND
17359 +            statesal  <              18782.5 THEN DO;
17360 +            _NODE_  =                   94;
17361 +            _LEAF_  =                   14;
17362 +            P_totalsal  =      12629.343283582;
17363 +            V_totalsal  =     12658.5348837209;
17364 +            END;
17365 +          ELSE IF  NOT MISSING(statesal ) AND
17366 +                         26357.5 <= statesal  THEN DO;
17367 +            _NODE_  =                   96;
17368 +            _LEAF_  =                   16;
17369 +            P_totalsal  =     28817.1833333333;
17370 +            V_totalsal  =     28912.4565217391;
17371 +            END;
17372 +          ELSE DO;
17373 +            _NODE_  =                   95;
17374 +            _LEAF_  =                   15;
17375 +            P_totalsal  =     25853.3032258064;
17376 +            V_totalsal  =     25965.6129032258;
17377 +            END;
17378 +          END;
17379 +        END;
17380 +      ELSE IF  NOT MISSING(statesal ) AND
17381 +                       30580 <= statesal  AND
17382 +        statesal  <                47333 THEN DO;
17383 +        IF  NOT MISSING(nonstsal ) AND
17384 +                          4981 <= nonstsal  AND
17385 +          nonstsal  <              16450.5 THEN DO;
17386 +          _NODE_  =                   55;
17387 +          _LEAF_  =                   23;
17388 +          P_totalsal  =     48611.9259259259;
17389 +          V_totalsal  =     48270.3846153846;
17390 +          END;
17391 +        ELSE IF  NOT MISSING(nonstsal ) AND
17392 +                       16450.5 <= nonstsal  THEN DO;
17393 +          _NODE_  =                   56;
17394 +          _LEAF_  =                   24;
17395 +          P_totalsal  =     67858.2181818181;
17396 +          V_totalsal  =     64259.0526315789;
17397 +          END;
17398 +        ELSE DO;
17399 +          IF  NOT MISSING(statesal ) AND
17400 +            statesal  <                35530 THEN DO;
17401 +            _NODE_  =                   99;
17402 +            _LEAF_  =                   19;
17403 +            P_totalsal  =      33626.054054054;
17404 +            V_totalsal  =     33857.8913043478;
17405 +            END;
17406 +          ELSE IF  NOT MISSING(statesal ) AND
17407 +                           35530 <= statesal  AND
17408 +            statesal  <                39394 THEN DO;
17409 +            _NODE_  =                  100;
17410 +            _LEAF_  =                   20;
17411 +            P_totalsal  =     37523.1486486486;
17412 +            V_totalsal  =     38060.2537313432;
17413 +            END;
17414 +          ELSE IF  NOT MISSING(statesal ) AND
17415 +                         43607.5 <= statesal  THEN DO;
17416 +            _NODE_  =                  102;
17417 +            _LEAF_  =                   22;
17418 +            P_totalsal  =     45252.0802469135;
17419 +            V_totalsal  =     45568.5694444444;
17420 +            END;
17421 +          ELSE DO;
17422 +            _NODE_  =                  101;
17423 +            _LEAF_  =                   21;
17424 +            P_totalsal  =     41803.8781725888;
17425 +            V_totalsal  =     41783.8023255814;
17426 +            END;
17427 +          END;
17428 +        END;
17429 +      ELSE IF  NOT MISSING(statesal ) AND
17430 +                       47333 <= statesal  THEN DO;
17431 +        IF  NOT MISSING(nonstsal ) AND
17432 +                          2075 <= nonstsal  THEN DO;
17433 +          _NODE_  =                   58;
17434 +          _LEAF_  =                   28;
17435 +          P_totalsal  =     67737.4387755102;
17436 +          V_totalsal  =     68617.4117647059;
17437 +          END;
17438 +        ELSE DO;
17439 +          IF  NOT MISSING(statesal ) AND
17440 +                         51179.5 <= statesal  AND
17441 +            statesal  <              56763.5 THEN DO;
17442 +            _NODE_  =                  104;
17443 +            _LEAF_  =                   26;
17444 +            P_totalsal  =              53924.5;
17445 +            V_totalsal  =     54091.4716981132;
17446 +            END;
17447 +          ELSE IF  NOT MISSING(statesal ) AND
17448 +                         56763.5 <= statesal  THEN DO;
17449 +            _NODE_  =                  105;
17450 +            _LEAF_  =                   27;
17451 +            P_totalsal  =     58596.2873563218;
17452 +            V_totalsal  =      58636.081081081;
17453 +            END;
17454 +          ELSE DO;
17455 +            _NODE_  =                  103;
17456 +            _LEAF_  =                   25;
17457 +            P_totalsal  =     49365.8629032258;
17458 +            V_totalsal  =      49164.224137931;
17459 +            END;
17460 +          END;
17461 +        END;
17462 +      ELSE DO;
17463 +        IF  NOT MISSING(nonstsal ) AND
17464 +          nonstsal  <              29011.5 THEN DO;
17465 +          IF  NOT MISSING(nonstsal ) AND
17466 +                           26315 <= nonstsal  THEN DO;
17467 +            _NODE_  =                   82;
17468 +            _LEAF_  =                    2;
17469 +            P_totalsal  =              27963.5;
17470 +            V_totalsal  =     28144.3809523809;
17471 +            END;
17472 +          ELSE DO;
17473 +            _NODE_  =                   81;
17474 +            _LEAF_  =                    1;
17475 +            P_totalsal  =     23373.5820895522;
17476 +            V_totalsal  =             24206.88;
17477 +            END;
17478 +          END;
17479 +        ELSE IF  NOT MISSING(nonstsal ) AND
17480 +                       29011.5 <= nonstsal  AND
17481 +          nonstsal  <              34677.5 THEN DO;
17482 +          IF  NOT MISSING(nonstsal ) AND
17483 +                           31786 <= nonstsal  AND
17484 +            nonstsal  <              32741.5 THEN DO;
17485 +            _NODE_  =                   84;
17486 +            _LEAF_  =                    4;
17487 +            P_totalsal  =     32334.2264150943;
17488 +            V_totalsal  =     32513.3333333333;
17489 +            END;
17490 +          ELSE IF  NOT MISSING(nonstsal ) AND
17491 +                         32741.5 <= nonstsal  AND
17492 +            nonstsal  <              33718.5 THEN DO;
17493 +            _NODE_  =                   85;
17494 +            _LEAF_  =                    5;
17495 +            P_totalsal  =             33243.24;
17496 +            V_totalsal  =     33195.8695652173;
17497 +            END;
17498 +          ELSE IF  NOT MISSING(nonstsal ) AND
17499 +                         33718.5 <= nonstsal  THEN DO;
17500 +            _NODE_  =                   86;
17501 +            _LEAF_  =                    6;
17502 +            P_totalsal  =     34083.4098360655;
17503 +            V_totalsal  =              34068.5;
17504 +            END;
17505 +          ELSE DO;
17506 +            _NODE_  =                   83;
17507 +            _LEAF_  =                    3;
17508 +            P_totalsal  =     30450.7586206896;
17509 +            V_totalsal  =     30453.0961538461;
17510 +            END;
17511 +          END;
17512 +        ELSE IF  NOT MISSING(nonstsal ) AND
17513 +                       34677.5 <= nonstsal  AND
17514 +          nonstsal  <              39454.5 THEN DO;
17515 +          IF  NOT MISSING(nonstsal ) AND
17516 +            nonstsal  <              36040.5 THEN DO;
17517 +            _NODE_  =                   87;
17518 +            _LEAF_  =                    7;
17519 +            P_totalsal  =     35447.7261904761;
17520 +            V_totalsal  =     35448.6764705882;
17521 +            END;
17522 +          ELSE IF  NOT MISSING(nonstsal ) AND
17523 +                           37165 <= nonstsal  AND
17524 +            nonstsal  <              38012.5 THEN DO;
17525 +            _NODE_  =                   89;
17526 +            _LEAF_  =                    9;
17527 +            P_totalsal  =      37626.074074074;
17528 +            V_totalsal  =              37719.2;
17529 +            END;
17530 +          ELSE IF  NOT MISSING(nonstsal ) AND
17531 +                         38012.5 <= nonstsal  THEN DO;
17532 +            _NODE_  =                   90;
17533 +            _LEAF_  =                   10;
17534 +            P_totalsal  =      38803.676056338;
17535 +            V_totalsal  =            38724.225;
17536 +            END;
17537 +          ELSE DO;
17538 +            _NODE_  =                   88;
17539 +            _LEAF_  =                    8;
17540 +            P_totalsal  =     36547.0388349514;
17541 +            V_totalsal  =          36588.59375;
17542 +            END;
17543 +          END;
17544 +        ELSE DO;
17545 +          IF  NOT MISSING(nonstsal ) AND
17546 +            nonstsal  <                40735 THEN DO;
17547 +            _NODE_  =                   91;
17548 +            _LEAF_  =                   11;
17549 +            P_totalsal  =     40126.2604166666;
17550 +            V_totalsal  =     40086.8163265306;
17551 +            END;
17552 +          ELSE IF  NOT MISSING(nonstsal ) AND
17553 +                           42604 <= nonstsal  THEN DO;
17554 +            _NODE_  =                   93;
17555 +            _LEAF_  =                   13;
17556 +            P_totalsal  =     43390.2297297297;
17557 +            V_totalsal  =              43219.5;
17558 +            END;
17559 +          ELSE DO;
17560 +            _NODE_  =                   92;
17561 +            _LEAF_  =                   12;
17562 +            P_totalsal  =     41634.7027027027;
17563 +            V_totalsal  =     41675.6777777777;
17564 +            END;
17565 +          END;
17566 +        END;
17567 +      END;
17568 +    END;
17569 +  END;
17570 +
17571 +*****  RESIDUALS R_ *************;
17572 +IF MISSING( totalsal ) THEN R_totalsal  = .;
17573 +ELSE R_totalsal  = totalsal  - P_totalsal ;
17574 +
17575 +****************************************************************;
17576 +******          END OF DECISION TREE SCORING CODE         ******;
17577 +****************************************************************;
17578 +
17579 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17580  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE4_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
17581  quit;
17582  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17583  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
17584  *------------------------------------------------------------*;
17585  * Tree4: Scoring VALIDATE data;
17586  *------------------------------------------------------------*;
17587  data EMWS1.Tree4_VALIDATE
17588  / view=EMWS1.Tree4_VALIDATE
17589  ;
17590  set EMWS1.Part_VALIDATE
17591  ;
17592  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas.
17593 +****************************************************************;
17594 +******             DECISION TREE SCORING CODE             ******;
17595 +****************************************************************;
17596 +
17597 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17598 +LENGTH _WARN_  $    4;
17599 +
17600 +******              LABELS FOR NEW VARIABLES              ******;
17601 +label _NODE_ = 'Node' ;
17602 +label _LEAF_ = 'Leaf' ;
17603 +label P_totalsal = 'Predicted: totalsal' ;
17604 +label V_totalsal = 'Validated: totalsal' ;
17605 +label R_totalsal = 'Residual: totalsal' ;
17606 +label _WARN_ = 'Warnings' ;
17607 +
17608 +
17609 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17610 +LENGTH _ARBFMT_30 $     30; DROP _ARBFMT_30;
17611 +_ARBFMT_30 = ' '; /* Initialize to avoid warning. */
17612 +LENGTH _ARBFMT_28 $     28; DROP _ARBFMT_28;
17613 +_ARBFMT_28 = ' '; /* Initialize to avoid warning. */
17614 +
17615 +
17616 +******             ASSIGN OBSERVATION TO NODE             ******;
17617 +IF  NOT MISSING(nonstsal ) AND
17618 +               95900.5 <= nonstsal  AND
17619 +  nonstsal  <             180312.5 THEN DO;
17620 +  IF  NOT MISSING(statesal ) AND
17621 +                    2599 <= statesal  AND
17622 +    statesal  <              15464.5 THEN DO;
17623 +    _NODE_  =                   11;
17624 +    _LEAF_  =                   69;
17625 +    P_totalsal  =     145295.301886792;
17626 +    V_totalsal  =     138556.863636363;
17627 +    END;
17628 +  ELSE IF  NOT MISSING(statesal ) AND
17629 +                 15464.5 <= statesal  AND
17630 +    statesal  <                48253 THEN DO;
17631 +    _NODE_  =                   12;
17632 +    _LEAF_  =                   70;
17633 +    P_totalsal  =     166528.224137931;
17634 +    V_totalsal  =     155472.709677419;
17635 +    END;
17636 +  ELSE IF  NOT MISSING(statesal ) AND
17637 +                   48253 <= statesal  THEN DO;
17638 +    _NODE_  =                   13;
17639 +    _LEAF_  =                   71;
17640 +    P_totalsal  =            233685.12;
17641 +    V_totalsal  =      231484.59090909;
17642 +    END;
17643 +  ELSE DO;
17644 +    IF  NOT MISSING(nonstsal ) AND
17645 +                    109950 <= nonstsal  AND
17646 +      nonstsal  <             120749.5 THEN DO;
17647 +      _NODE_  =                   27;
17648 +      _LEAF_  =                   66;
17649 +      P_totalsal  =     114770.807692307;
17650 +      V_totalsal  =            115916.45;
17651 +      END;
17652 +    ELSE IF  NOT MISSING(nonstsal ) AND
17653 +                  120749.5 <= nonstsal  AND
17654 +      nonstsal  <             149359.5 THEN DO;
17655 +      _NODE_  =                   28;
17656 +      _LEAF_  =                   67;
17657 +      P_totalsal  =     134294.632653061;
17658 +      V_totalsal  =     135776.804878048;
17659 +      END;
17660 +    ELSE IF  NOT MISSING(nonstsal ) AND
17661 +                  149359.5 <= nonstsal  THEN DO;
17662 +      _NODE_  =                   29;
17663 +      _LEAF_  =                   68;
17664 +      P_totalsal  =     165185.515151515;
17665 +      V_totalsal  =     166636.777777777;
17666 +      END;
17667 +    ELSE DO;
17668 +      _NODE_  =                   26;
17669 +      _LEAF_  =                   65;
17670 +      P_totalsal  =     101778.095238095;
17671 +      V_totalsal  =     102117.243902439;
17672 +      END;
17673 +    END;
17674 +  END;
17675 +ELSE IF  NOT MISSING(nonstsal ) AND
17676 +              180312.5 <= nonstsal  AND
17677 +  nonstsal  <             290367.5 THEN DO;
17678 +  IF  NOT MISSING(nonstsal ) AND
17679 +    nonstsal  <             209437.5 THEN DO;
17680 +    _NODE_  =                   14;
17681 +    _LEAF_  =                   72;
17682 +    P_totalsal  =     205333.694117647;
17683 +    V_totalsal  =     204150.071428571;
17684 +    END;
17685 +  ELSE IF  NOT MISSING(nonstsal ) AND
17686 +                209437.5 <= nonstsal  AND
17687 +    nonstsal  <               235147 THEN DO;
17688 +    _NODE_  =                   15;
17689 +    _LEAF_  =                   73;
17690 +    P_totalsal  =     234605.621212121;
17691 +    V_totalsal  =     241105.225806451;
17692 +    END;
17693 +  ELSE DO;
17694 +    _NODE_  =                   16;
17695 +    _LEAF_  =                   74;
17696 +    P_totalsal  =     273957.193877551;
17697 +    V_totalsal  =     271501.285714285;
17698 +    END;
17699 +  END;
17700 +ELSE IF  NOT MISSING(nonstsal ) AND
17701 +              290367.5 <= nonstsal  THEN DO;
17702 +  _NODE_  =                    5;
17703 +  _LEAF_  =                   75;
17704 +  P_totalsal  =     389678.802631579;
17705 +  V_totalsal  =     377767.533333333;
17706 +  END;
17707 +ELSE DO;
17708 +  IF  NOT MISSING(statesal ) AND
17709 +                 60301.5 <= statesal  AND
17710 +    statesal  <               108099 THEN DO;
17711 +    IF  NOT MISSING(nonstsal ) AND
17712 +                    9900.5 <= nonstsal  AND
17713 +      nonstsal  <              34813.5 THEN DO;
17714 +      _NODE_  =                   22;
17715 +      _LEAF_  =                   58;
17716 +      P_totalsal  =     103556.683673469;
17717 +      V_totalsal  =     104522.135135135;
17718 +      END;
17719 +    ELSE IF  NOT MISSING(nonstsal ) AND
17720 +                   34813.5 <= nonstsal  THEN DO;
17721 +      _NODE_  =                   23;
17722 +      _LEAF_  =                   59;
17723 +      P_totalsal  =     141148.098901098;
17724 +      V_totalsal  =             136074.7;
17725 +      END;
17726 +    ELSE DO;
17727 +      IF  NOT MISSING(statesal ) AND
17728 +                       71097 <= statesal  AND
17729 +        statesal  <              81763.5 THEN DO;
17730 +        IF  NOT MISSING(statesal ) AND
17731 +          statesal  <                74875 THEN DO;
17732 +          _NODE_  =                   72;
17733 +          _LEAF_  =                   51;
17734 +          P_totalsal  =     73448.6666666666;
17735 +          V_totalsal  =     73306.9090909091;
17736 +          END;
17737 +        ELSE IF  NOT MISSING(statesal ) AND
17738 +                         74875 <= statesal  AND
17739 +          statesal  <                76825 THEN DO;
17740 +          _NODE_  =                   73;
17741 +          _LEAF_  =                   52;
17742 +          P_totalsal  =     75918.0727272727;
17743 +          V_totalsal  =     76591.7058823529;
17744 +          END;
17745 +        ELSE DO;
17746 +          _NODE_  =                   74;
17747 +          _LEAF_  =                   53;
17748 +          P_totalsal  =     79991.7974683544;
17749 +          V_totalsal  =     79243.1842105263;
17750 +          END;
17751 +        END;
17752 +      ELSE IF  NOT MISSING(statesal ) AND
17753 +                     81763.5 <= statesal  AND
17754 +        statesal  <                92774 THEN DO;
17755 +        IF  NOT MISSING(statesal ) AND
17756 +          statesal  <                84994 THEN DO;
17757 +          _NODE_  =                   75;
17758 +          _LEAF_  =                   54;
17759 +          P_totalsal  =     84096.6315789473;
17760 +          V_totalsal  =             84898.44;
17761 +          END;
17762 +        ELSE DO;
17763 +          _NODE_  =                   76;
17764 +          _LEAF_  =                   55;
17765 +          P_totalsal  =     90010.5222222222;
17766 +          V_totalsal  =     89579.7142857143;
17767 +          END;
17768 +        END;
17769 +      ELSE IF  NOT MISSING(statesal ) AND
17770 +                       92774 <= statesal  THEN DO;
17771 +        IF  NOT MISSING(statesal ) AND
17772 +                        100867 <= statesal  THEN DO;
17773 +          _NODE_  =                   78;
17774 +          _LEAF_  =                   57;
17775 +          P_totalsal  =             105425.5;
17776 +          V_totalsal  =     105827.566666666;
17777 +          END;
17778 +        ELSE DO;
17779 +          _NODE_  =                   77;
17780 +          _LEAF_  =                   56;
17781 +          P_totalsal  =     97038.7866666666;
17782 +          V_totalsal  =                97273;
17783 +          END;
17784 +        END;
17785 +      ELSE DO;
17786 +        IF  NOT MISSING(statesal ) AND
17787 +          statesal  <              63410.5 THEN DO;
17788 +          _NODE_  =                   69;
17789 +          _LEAF_  =                   48;
17790 +          P_totalsal  =     62533.6964285714;
17791 +          V_totalsal  =     63382.3870967742;
17792 +          END;
17793 +        ELSE IF  NOT MISSING(statesal ) AND
17794 +                       63410.5 <= statesal  AND
17795 +          statesal  <              66247.5 THEN DO;
17796 +          _NODE_  =                   70;
17797 +          _LEAF_  =                   49;
17798 +          P_totalsal  =     65306.0196078431;
17799 +          V_totalsal  =     64981.0689655172;
17800 +          END;
17801 +        ELSE DO;
17802 +          _NODE_  =                   71;
17803 +          _LEAF_  =                   50;
17804 +          P_totalsal  =     69608.8775510204;
17805 +          V_totalsal  =     70048.5675675675;
17806 +          END;
17807 +        END;
17808 +      END;
17809 +    END;
17810 +  ELSE IF  NOT MISSING(statesal ) AND
17811 +                  108099 <= statesal  AND
17812 +    statesal  <               162093 THEN DO;
17813 +    IF  NOT MISSING(nonstsal ) AND
17814 +                   22783.5 <= nonstsal  THEN DO;
17815 +      _NODE_  =                   25;
17816 +      _LEAF_  =                   63;
17817 +      P_totalsal  =             172191.4;
17818 +      V_totalsal  =     175374.619047619;
17819 +      END;
17820 +    ELSE DO;
17821 +      IF  NOT MISSING(statesal ) AND
17822 +                    130026.5 <= statesal  THEN DO;
17823 +        _NODE_  =                   47;
17824 +        _LEAF_  =                   62;
17825 +        P_totalsal  =     147090.839080459;
17826 +        V_totalsal  =          147979.8125;
17827 +        END;
17828 +      ELSE DO;
17829 +        IF  NOT MISSING(statesal ) AND
17830 +                      117576.5 <= statesal  THEN DO;
17831 +          _NODE_  =                   80;
17832 +          _LEAF_  =                   61;
17833 +          P_totalsal  =     128431.728813559;
17834 +          V_totalsal  =     126284.958333333;
17835 +          END;
17836 +        ELSE DO;
17837 +          _NODE_  =                   79;
17838 +          _LEAF_  =                   60;
17839 +          P_totalsal  =          116553.6625;
17840 +          V_totalsal  =     115684.620689655;
17841 +          END;
17842 +        END;
17843 +      END;
17844 +    END;
17845 +  ELSE IF  NOT MISSING(statesal ) AND
17846 +                  162093 <= statesal  THEN DO;
17847 +    _NODE_  =                    9;
17848 +    _LEAF_  =                   64;
17849 +    P_totalsal  =     224578.765306122;
17850 +    V_totalsal  =     236071.901960784;
17851 +    END;
17852 +  ELSE DO;
17853 +    IF  NOT MISSING(nonstsal ) AND
17854 +                   43903.5 <= nonstsal  AND
17855 +      nonstsal  <              57561.5 THEN DO;
17856 +      IF  NOT MISSING(nonstsal ) AND
17857 +        nonstsal  <              47236.5 THEN DO;
17858 +        _ARBFMT_30 = PUT( exempt2 , $30.);
17859 +         %DMNORMIP( _ARBFMT_30);
17860 +        IF _ARBFMT_30 IN ('EXEMPT' ) THEN DO;
17861 +          _NODE_  =                   60;
17862 +          _LEAF_  =                   30;
17863 +          P_totalsal  =     54232.3275862069;
17864 +          V_totalsal  =     55741.5263157894;
17865 +          END;
17866 +        ELSE DO;
17867 +          _NODE_  =                   59;
17868 +          _LEAF_  =                   29;
17869 +          P_totalsal  =     45695.6432160804;
17870 +          V_totalsal  =     47597.4642857142;
17871 +          END;
17872 +        END;
17873 +      ELSE IF  NOT MISSING(nonstsal ) AND
17874 +                       52023 <= nonstsal  THEN DO;
17875 +        _NODE_  =                   36;
17876 +        _LEAF_  =                   35;
17877 +        P_totalsal  =     56000.9809160305;
17878 +        V_totalsal  =     56889.7950819672;
17879 +        END;
17880 +      ELSE DO;
17881 +        _ARBFMT_28 = PUT( position , $28.);
17882 +         %DMNORMIP( _ARBFMT_28);
17883 +        IF _ARBFMT_28 IN ('OTHER' ) THEN DO;
17884 +          _NODE_  =                   61;
17885 +          _LEAF_  =                   31;
17886 +          P_totalsal  =     50091.2717391304;
17887 +          V_totalsal  =     50038.6444444444;
17888 +          END;
17889 +        ELSE IF _ARBFMT_28 IN ('ADMIN' ,'ASSISTANT OTHER' ,'BUILDING' ,
17890 +          'CLINICAL OTHER' ,'CLINICAL RESEARCH' ) THEN DO;
17891 +          _NODE_  =                   62;
17892 +          _LEAF_  =                   32;
17893 +          P_totalsal  =     49622.3728813559;
17894 +          V_totalsal  =     49552.6071428571;
17895 +          END;
17896 +        ELSE IF _ARBFMT_28 IN ('EXECUTIVE' ,'RESEARCH OTHER' ,
17897 +        'OTHER PROGRAM' ,'PROJECT MANAGER' ,'RESEARCH ASSOCIATE' ,
17898 +          'RESEARCH SPECIALIST' ,'RESEARCH TECHNICIAN' ) THEN DO;
17899 +          _NODE_  =                   64;
17900 +          _LEAF_  =                   34;
17901 +          P_totalsal  =          50058.90625;
17902 +          V_totalsal  =                49517;
17903 +          END;
17904 +        ELSE DO;
17905 +          _NODE_  =                   63;
17906 +          _LEAF_  =                   33;
17907 +          P_totalsal  =     57550.0181818181;
17908 +          V_totalsal  =     56288.8518518518;
17909 +          END;
17910 +        END;
17911 +      END;
17912 +    ELSE IF  NOT MISSING(nonstsal ) AND
17913 +                   57561.5 <= nonstsal  AND
17914 +      nonstsal  <                74256 THEN DO;
17915 +      IF  NOT MISSING(statesal ) AND
17916 +                        8802 <= statesal  THEN DO;
17917 +        _NODE_  =                   38;
17918 +        _LEAF_  =                   44;
17919 +        P_totalsal  =              94400.2;
17920 +        V_totalsal  =     98545.4285714285;
17921 +        END;
17922 +      ELSE DO;
17923 +        IF  NOT MISSING(nonstsal ) AND
17924 +          nonstsal  <              60502.5 THEN DO;
17925 +          IF  NOT MISSING(nonstsal ) AND
17926 +            nonstsal  <              59070.5 THEN DO;
17927 +            _NODE_  =                  108;
17928 +            _LEAF_  =                   36;
17929 +            P_totalsal  =             58257.96;
17930 +            V_totalsal  =              58209.6;
17931 +            END;
17932 +          ELSE DO;
17933 +            _NODE_  =                  109;
17934 +            _LEAF_  =                   37;
17935 +            P_totalsal  =     59803.3114754098;
17936 +            V_totalsal  =     59782.6296296296;
17937 +            END;
17938 +          END;
17939 +        ELSE IF  NOT MISSING(nonstsal ) AND
17940 +                       60502.5 <= nonstsal  AND
17941 +          nonstsal  <              64148.5 THEN DO;
17942 +          IF  NOT MISSING(nonstsal ) AND
17943 +                           62434 <= nonstsal  THEN DO;
17944 +            _NODE_  =                  111;
17945 +            _LEAF_  =                   39;
17946 +            P_totalsal  =     63386.0882352941;
17947 +            V_totalsal  =             63171.84;
17948 +            END;
17949 +          ELSE DO;
17950 +            _NODE_  =                  110;
17951 +            _LEAF_  =                   38;
17952 +            P_totalsal  =     61480.6913580247;
17953 +            V_totalsal  =     61572.9210526315;
17954 +            END;
17955 +          END;
17956 +        ELSE IF  NOT MISSING(nonstsal ) AND
17957 +                       64148.5 <= nonstsal  AND
17958 +          nonstsal  <                68310 THEN DO;
17959 +          IF  NOT MISSING(nonstsal ) AND
17960 +                         66244.5 <= nonstsal  THEN DO;
17961 +            _NODE_  =                  113;
17962 +            _LEAF_  =                   41;
17963 +            P_totalsal  =     67381.0434782608;
17964 +            V_totalsal  =             67396.05;
17965 +            END;
17966 +          ELSE DO;
17967 +            _NODE_  =                  112;
17968 +            _LEAF_  =                   40;
17969 +            P_totalsal  =     65295.6666666666;
17970 +            V_totalsal  =     65467.7567567567;
17971 +            END;
17972 +          END;
17973 +        ELSE DO;
17974 +          IF  NOT MISSING(nonstsal ) AND
17975 +            nonstsal  <                70853 THEN DO;
17976 +            _NODE_  =                  114;
17977 +            _LEAF_  =                   42;
17978 +            P_totalsal  =     70004.1267605633;
17979 +            V_totalsal  =     69839.4864864864;
17980 +            END;
17981 +          ELSE DO;
17982 +            _NODE_  =                  115;
17983 +            _LEAF_  =                   43;
17984 +            P_totalsal  =     72698.8068181818;
17985 +            V_totalsal  =     72584.0769230769;
17986 +            END;
17987 +          END;
17988 +        END;
17989 +      END;
17990 +    ELSE IF  NOT MISSING(nonstsal ) AND
17991 +                     74256 <= nonstsal  THEN DO;
17992 +      IF  NOT MISSING(nonstsal ) AND
17993 +                     81491.5 <= nonstsal  AND
17994 +        nonstsal  <              86766.5 THEN DO;
17995 +        _NODE_  =                   40;
17996 +        _LEAF_  =                   46;
17997 +        P_totalsal  =                85762;
17998 +        V_totalsal  =     85909.1818181818;
17999 +        END;
18000 +      ELSE IF  NOT MISSING(nonstsal ) AND
18001 +                     86766.5 <= nonstsal  THEN DO;
18002 +        _NODE_  =                   41;
18003 +        _LEAF_  =                   47;
18004 +        P_totalsal  =     94602.0574712643;
18005 +        V_totalsal  =     94566.3731343283;
18006 +        END;
18007 +      ELSE DO;
18008 +        _NODE_  =                   39;
18009 +        _LEAF_  =                   45;
18010 +        P_totalsal  =     80472.2113402061;
18011 +        V_totalsal  =      81919.048192771;
18012 +        END;
18013 +      END;
18014 +    ELSE DO;
18015 +      IF  NOT MISSING(statesal ) AND
18016 +                       538.5 <= statesal  AND
18017 +        statesal  <                30580 THEN DO;
18018 +        IF  NOT MISSING(nonstsal ) AND
18019 +                         13022 <= nonstsal  THEN DO;
18020 +          IF  NOT MISSING(statesal ) AND
18021 +                         20121.5 <= statesal  THEN DO;
18022 +            _NODE_  =                   98;
18023 +            _LEAF_  =                   18;
18024 +            P_totalsal  =     50866.2777777777;
18025 +            V_totalsal  =     52344.2777777777;
18026 +            END;
18027 +          ELSE DO;
18028 +            _NODE_  =                   97;
18029 +            _LEAF_  =                   17;
18030 +            P_totalsal  =     41342.3174603174;
18031 +            V_totalsal  =     41047.4666666666;
18032 +            END;
18033 +          END;
18034 +        ELSE DO;
18035 +          IF  NOT MISSING(statesal ) AND
18036 +            statesal  <              18782.5 THEN DO;
18037 +            _NODE_  =                   94;
18038 +            _LEAF_  =                   14;
18039 +            P_totalsal  =      12629.343283582;
18040 +            V_totalsal  =     12658.5348837209;
18041 +            END;
18042 +          ELSE IF  NOT MISSING(statesal ) AND
18043 +                         26357.5 <= statesal  THEN DO;
18044 +            _NODE_  =                   96;
18045 +            _LEAF_  =                   16;
18046 +            P_totalsal  =     28817.1833333333;
18047 +            V_totalsal  =     28912.4565217391;
18048 +            END;
18049 +          ELSE DO;
18050 +            _NODE_  =                   95;
18051 +            _LEAF_  =                   15;
18052 +            P_totalsal  =     25853.3032258064;
18053 +            V_totalsal  =     25965.6129032258;
18054 +            END;
18055 +          END;
18056 +        END;
18057 +      ELSE IF  NOT MISSING(statesal ) AND
18058 +                       30580 <= statesal  AND
18059 +        statesal  <                47333 THEN DO;
18060 +        IF  NOT MISSING(nonstsal ) AND
18061 +                          4981 <= nonstsal  AND
18062 +          nonstsal  <              16450.5 THEN DO;
18063 +          _NODE_  =                   55;
18064 +          _LEAF_  =                   23;
18065 +          P_totalsal  =     48611.9259259259;
18066 +          V_totalsal  =     48270.3846153846;
18067 +          END;
18068 +        ELSE IF  NOT MISSING(nonstsal ) AND
18069 +                       16450.5 <= nonstsal  THEN DO;
18070 +          _NODE_  =                   56;
18071 +          _LEAF_  =                   24;
18072 +          P_totalsal  =     67858.2181818181;
18073 +          V_totalsal  =     64259.0526315789;
18074 +          END;
18075 +        ELSE DO;
18076 +          IF  NOT MISSING(statesal ) AND
18077 +            statesal  <                35530 THEN DO;
18078 +            _NODE_  =                   99;
18079 +            _LEAF_  =                   19;
18080 +            P_totalsal  =      33626.054054054;
18081 +            V_totalsal  =     33857.8913043478;
18082 +            END;
18083 +          ELSE IF  NOT MISSING(statesal ) AND
18084 +                           35530 <= statesal  AND
18085 +            statesal  <                39394 THEN DO;
18086 +            _NODE_  =                  100;
18087 +            _LEAF_  =                   20;
18088 +            P_totalsal  =     37523.1486486486;
18089 +            V_totalsal  =     38060.2537313432;
18090 +            END;
18091 +          ELSE IF  NOT MISSING(statesal ) AND
18092 +                         43607.5 <= statesal  THEN DO;
18093 +            _NODE_  =                  102;
18094 +            _LEAF_  =                   22;
18095 +            P_totalsal  =     45252.0802469135;
18096 +            V_totalsal  =     45568.5694444444;
18097 +            END;
18098 +          ELSE DO;
18099 +            _NODE_  =                  101;
18100 +            _LEAF_  =                   21;
18101 +            P_totalsal  =     41803.8781725888;
18102 +            V_totalsal  =     41783.8023255814;
18103 +            END;
18104 +          END;
18105 +        END;
18106 +      ELSE IF  NOT MISSING(statesal ) AND
18107 +                       47333 <= statesal  THEN DO;
18108 +        IF  NOT MISSING(nonstsal ) AND
18109 +                          2075 <= nonstsal  THEN DO;
18110 +          _NODE_  =                   58;
18111 +          _LEAF_  =                   28;
18112 +          P_totalsal  =     67737.4387755102;
18113 +          V_totalsal  =     68617.4117647059;
18114 +          END;
18115 +        ELSE DO;
18116 +          IF  NOT MISSING(statesal ) AND
18117 +                         51179.5 <= statesal  AND
18118 +            statesal  <              56763.5 THEN DO;
18119 +            _NODE_  =                  104;
18120 +            _LEAF_  =                   26;
18121 +            P_totalsal  =              53924.5;
18122 +            V_totalsal  =     54091.4716981132;
18123 +            END;
18124 +          ELSE IF  NOT MISSING(statesal ) AND
18125 +                         56763.5 <= statesal  THEN DO;
18126 +            _NODE_  =                  105;
18127 +            _LEAF_  =                   27;
18128 +            P_totalsal  =     58596.2873563218;
18129 +            V_totalsal  =      58636.081081081;
18130 +            END;
18131 +          ELSE DO;
18132 +            _NODE_  =                  103;
18133 +            _LEAF_  =                   25;
18134 +            P_totalsal  =     49365.8629032258;
18135 +            V_totalsal  =      49164.224137931;
18136 +            END;
18137 +          END;
18138 +        END;
18139 +      ELSE DO;
18140 +        IF  NOT MISSING(nonstsal ) AND
18141 +          nonstsal  <              29011.5 THEN DO;
18142 +          IF  NOT MISSING(nonstsal ) AND
18143 +                           26315 <= nonstsal  THEN DO;
18144 +            _NODE_  =                   82;
18145 +            _LEAF_  =                    2;
18146 +            P_totalsal  =              27963.5;
18147 +            V_totalsal  =     28144.3809523809;
18148 +            END;
18149 +          ELSE DO;
18150 +            _NODE_  =                   81;
18151 +            _LEAF_  =                    1;
18152 +            P_totalsal  =     23373.5820895522;
18153 +            V_totalsal  =             24206.88;
18154 +            END;
18155 +          END;
18156 +        ELSE IF  NOT MISSING(nonstsal ) AND
18157 +                       29011.5 <= nonstsal  AND
18158 +          nonstsal  <              34677.5 THEN DO;
18159 +          IF  NOT MISSING(nonstsal ) AND
18160 +                           31786 <= nonstsal  AND
18161 +            nonstsal  <              32741.5 THEN DO;
18162 +            _NODE_  =                   84;
18163 +            _LEAF_  =                    4;
18164 +            P_totalsal  =     32334.2264150943;
18165 +            V_totalsal  =     32513.3333333333;
18166 +            END;
18167 +          ELSE IF  NOT MISSING(nonstsal ) AND
18168 +                         32741.5 <= nonstsal  AND
18169 +            nonstsal  <              33718.5 THEN DO;
18170 +            _NODE_  =                   85;
18171 +            _LEAF_  =                    5;
18172 +            P_totalsal  =             33243.24;
18173 +            V_totalsal  =     33195.8695652173;
18174 +            END;
18175 +          ELSE IF  NOT MISSING(nonstsal ) AND
18176 +                         33718.5 <= nonstsal  THEN DO;
18177 +            _NODE_  =                   86;
18178 +            _LEAF_  =                    6;
18179 +            P_totalsal  =     34083.4098360655;
18180 +            V_totalsal  =              34068.5;
18181 +            END;
18182 +          ELSE DO;
18183 +            _NODE_  =                   83;
18184 +            _LEAF_  =                    3;
18185 +            P_totalsal  =     30450.7586206896;
18186 +            V_totalsal  =     30453.0961538461;
18187 +            END;
18188 +          END;
18189 +        ELSE IF  NOT MISSING(nonstsal ) AND
18190 +                       34677.5 <= nonstsal  AND
18191 +          nonstsal  <              39454.5 THEN DO;
18192 +          IF  NOT MISSING(nonstsal ) AND
18193 +            nonstsal  <              36040.5 THEN DO;
18194 +            _NODE_  =                   87;
18195 +            _LEAF_  =                    7;
18196 +            P_totalsal  =     35447.7261904761;
18197 +            V_totalsal  =     35448.6764705882;
18198 +            END;
18199 +          ELSE IF  NOT MISSING(nonstsal ) AND
18200 +                           37165 <= nonstsal  AND
18201 +            nonstsal  <              38012.5 THEN DO;
18202 +            _NODE_  =                   89;
18203 +            _LEAF_  =                    9;
18204 +            P_totalsal  =      37626.074074074;
18205 +            V_totalsal  =              37719.2;
18206 +            END;
18207 +          ELSE IF  NOT MISSING(nonstsal ) AND
18208 +                         38012.5 <= nonstsal  THEN DO;
18209 +            _NODE_  =                   90;
18210 +            _LEAF_  =                   10;
18211 +            P_totalsal  =      38803.676056338;
18212 +            V_totalsal  =            38724.225;
18213 +            END;
18214 +          ELSE DO;
18215 +            _NODE_  =                   88;
18216 +            _LEAF_  =                    8;
18217 +            P_totalsal  =     36547.0388349514;
18218 +            V_totalsal  =          36588.59375;
18219 +            END;
18220 +          END;
18221 +        ELSE DO;
18222 +          IF  NOT MISSING(nonstsal ) AND
18223 +            nonstsal  <                40735 THEN DO;
18224 +            _NODE_  =                   91;
18225 +            _LEAF_  =                   11;
18226 +            P_totalsal  =     40126.2604166666;
18227 +            V_totalsal  =     40086.8163265306;
18228 +            END;
18229 +          ELSE IF  NOT MISSING(nonstsal ) AND
18230 +                           42604 <= nonstsal  THEN DO;
18231 +            _NODE_  =                   93;
18232 +            _LEAF_  =                   13;
18233 +            P_totalsal  =     43390.2297297297;
18234 +            V_totalsal  =              43219.5;
18235 +            END;
18236 +          ELSE DO;
18237 +            _NODE_  =                   92;
18238 +            _LEAF_  =                   12;
18239 +            P_totalsal  =     41634.7027027027;
18240 +            V_totalsal  =     41675.6777777777;
18241 +            END;
18242 +          END;
18243 +        END;
18244 +      END;
18245 +    END;
18246 +  END;
18247 +
18248 +*****  RESIDUALS R_ *************;
18249 +IF MISSING( totalsal ) THEN R_totalsal  = .;
18250 +ELSE R_totalsal  = totalsal  - P_totalsal ;
18251 +
18252 +****************************************************************;
18253 +******          END OF DECISION TREE SCORING CODE         ******;
18254 +****************************************************************;
18255 +
18256 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18257  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE4_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
18258  quit;
18259  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
18260  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
18261  *------------------------------------------------------------*;
18262  * Tree4: Scoring TEST data;
18263  *------------------------------------------------------------*;
18264  data EMWS1.Tree4_TEST
18265  / view=EMWS1.Tree4_TEST
18266  ;
18267  set EMWS1.Part_TEST
18268  ;
18269  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas.
18270 +****************************************************************;
18271 +******             DECISION TREE SCORING CODE             ******;
18272 +****************************************************************;
18273 +
18274 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
18275 +LENGTH _WARN_  $    4;
18276 +
18277 +******              LABELS FOR NEW VARIABLES              ******;
18278 +label _NODE_ = 'Node' ;
18279 +label _LEAF_ = 'Leaf' ;
18280 +label P_totalsal = 'Predicted: totalsal' ;
18281 +label V_totalsal = 'Validated: totalsal' ;
18282 +label R_totalsal = 'Residual: totalsal' ;
18283 +label _WARN_ = 'Warnings' ;
18284 +
18285 +
18286 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
18287 +LENGTH _ARBFMT_30 $     30; DROP _ARBFMT_30;
18288 +_ARBFMT_30 = ' '; /* Initialize to avoid warning. */
18289 +LENGTH _ARBFMT_28 $     28; DROP _ARBFMT_28;
18290 +_ARBFMT_28 = ' '; /* Initialize to avoid warning. */
18291 +
18292 +
18293 +******             ASSIGN OBSERVATION TO NODE             ******;
18294 +IF  NOT MISSING(nonstsal ) AND
18295 +               95900.5 <= nonstsal  AND
18296 +  nonstsal  <             180312.5 THEN DO;
18297 +  IF  NOT MISSING(statesal ) AND
18298 +                    2599 <= statesal  AND
18299 +    statesal  <              15464.5 THEN DO;
18300 +    _NODE_  =                   11;
18301 +    _LEAF_  =                   69;
18302 +    P_totalsal  =     145295.301886792;
18303 +    V_totalsal  =     138556.863636363;
18304 +    END;
18305 +  ELSE IF  NOT MISSING(statesal ) AND
18306 +                 15464.5 <= statesal  AND
18307 +    statesal  <                48253 THEN DO;
18308 +    _NODE_  =                   12;
18309 +    _LEAF_  =                   70;
18310 +    P_totalsal  =     166528.224137931;
18311 +    V_totalsal  =     155472.709677419;
18312 +    END;
18313 +  ELSE IF  NOT MISSING(statesal ) AND
18314 +                   48253 <= statesal  THEN DO;
18315 +    _NODE_  =                   13;
18316 +    _LEAF_  =                   71;
18317 +    P_totalsal  =            233685.12;
18318 +    V_totalsal  =      231484.59090909;
18319 +    END;
18320 +  ELSE DO;
18321 +    IF  NOT MISSING(nonstsal ) AND
18322 +                    109950 <= nonstsal  AND
18323 +      nonstsal  <             120749.5 THEN DO;
18324 +      _NODE_  =                   27;
18325 +      _LEAF_  =                   66;
18326 +      P_totalsal  =     114770.807692307;
18327 +      V_totalsal  =            115916.45;
18328 +      END;
18329 +    ELSE IF  NOT MISSING(nonstsal ) AND
18330 +                  120749.5 <= nonstsal  AND
18331 +      nonstsal  <             149359.5 THEN DO;
18332 +      _NODE_  =                   28;
18333 +      _LEAF_  =                   67;
18334 +      P_totalsal  =     134294.632653061;
18335 +      V_totalsal  =     135776.804878048;
18336 +      END;
18337 +    ELSE IF  NOT MISSING(nonstsal ) AND
18338 +                  149359.5 <= nonstsal  THEN DO;
18339 +      _NODE_  =                   29;
18340 +      _LEAF_  =                   68;
18341 +      P_totalsal  =     165185.515151515;
18342 +      V_totalsal  =     166636.777777777;
18343 +      END;
18344 +    ELSE DO;
18345 +      _NODE_  =                   26;
18346 +      _LEAF_  =                   65;
18347 +      P_totalsal  =     101778.095238095;
18348 +      V_totalsal  =     102117.243902439;
18349 +      END;
18350 +    END;
18351 +  END;
18352 +ELSE IF  NOT MISSING(nonstsal ) AND
18353 +              180312.5 <= nonstsal  AND
18354 +  nonstsal  <             290367.5 THEN DO;
18355 +  IF  NOT MISSING(nonstsal ) AND
18356 +    nonstsal  <             209437.5 THEN DO;
18357 +    _NODE_  =                   14;
18358 +    _LEAF_  =                   72;
18359 +    P_totalsal  =     205333.694117647;
18360 +    V_totalsal  =     204150.071428571;
18361 +    END;
18362 +  ELSE IF  NOT MISSING(nonstsal ) AND
18363 +                209437.5 <= nonstsal  AND
18364 +    nonstsal  <               235147 THEN DO;
18365 +    _NODE_  =                   15;
18366 +    _LEAF_  =                   73;
18367 +    P_totalsal  =     234605.621212121;
18368 +    V_totalsal  =     241105.225806451;
18369 +    END;
18370 +  ELSE DO;
18371 +    _NODE_  =                   16;
18372 +    _LEAF_  =                   74;
18373 +    P_totalsal  =     273957.193877551;
18374 +    V_totalsal  =     271501.285714285;
18375 +    END;
18376 +  END;
18377 +ELSE IF  NOT MISSING(nonstsal ) AND
18378 +              290367.5 <= nonstsal  THEN DO;
18379 +  _NODE_  =                    5;
18380 +  _LEAF_  =                   75;
18381 +  P_totalsal  =     389678.802631579;
18382 +  V_totalsal  =     377767.533333333;
18383 +  END;
18384 +ELSE DO;
18385 +  IF  NOT MISSING(statesal ) AND
18386 +                 60301.5 <= statesal  AND
18387 +    statesal  <               108099 THEN DO;
18388 +    IF  NOT MISSING(nonstsal ) AND
18389 +                    9900.5 <= nonstsal  AND
18390 +      nonstsal  <              34813.5 THEN DO;
18391 +      _NODE_  =                   22;
18392 +      _LEAF_  =                   58;
18393 +      P_totalsal  =     103556.683673469;
18394 +      V_totalsal  =     104522.135135135;
18395 +      END;
18396 +    ELSE IF  NOT MISSING(nonstsal ) AND
18397 +                   34813.5 <= nonstsal  THEN DO;
18398 +      _NODE_  =                   23;
18399 +      _LEAF_  =                   59;
18400 +      P_totalsal  =     141148.098901098;
18401 +      V_totalsal  =             136074.7;
18402 +      END;
18403 +    ELSE DO;
18404 +      IF  NOT MISSING(statesal ) AND
18405 +                       71097 <= statesal  AND
18406 +        statesal  <              81763.5 THEN DO;
18407 +        IF  NOT MISSING(statesal ) AND
18408 +          statesal  <                74875 THEN DO;
18409 +          _NODE_  =                   72;
18410 +          _LEAF_  =                   51;
18411 +          P_totalsal  =     73448.6666666666;
18412 +          V_totalsal  =     73306.9090909091;
18413 +          END;
18414 +        ELSE IF  NOT MISSING(statesal ) AND
18415 +                         74875 <= statesal  AND
18416 +          statesal  <                76825 THEN DO;
18417 +          _NODE_  =                   73;
18418 +          _LEAF_  =                   52;
18419 +          P_totalsal  =     75918.0727272727;
18420 +          V_totalsal  =     76591.7058823529;
18421 +          END;
18422 +        ELSE DO;
18423 +          _NODE_  =                   74;
18424 +          _LEAF_  =                   53;
18425 +          P_totalsal  =     79991.7974683544;
18426 +          V_totalsal  =     79243.1842105263;
18427 +          END;
18428 +        END;
18429 +      ELSE IF  NOT MISSING(statesal ) AND
18430 +                     81763.5 <= statesal  AND
18431 +        statesal  <                92774 THEN DO;
18432 +        IF  NOT MISSING(statesal ) AND
18433 +          statesal  <                84994 THEN DO;
18434 +          _NODE_  =                   75;
18435 +          _LEAF_  =                   54;
18436 +          P_totalsal  =     84096.6315789473;
18437 +          V_totalsal  =             84898.44;
18438 +          END;
18439 +        ELSE DO;
18440 +          _NODE_  =                   76;
18441 +          _LEAF_  =                   55;
18442 +          P_totalsal  =     90010.5222222222;
18443 +          V_totalsal  =     89579.7142857143;
18444 +          END;
18445 +        END;
18446 +      ELSE IF  NOT MISSING(statesal ) AND
18447 +                       92774 <= statesal  THEN DO;
18448 +        IF  NOT MISSING(statesal ) AND
18449 +                        100867 <= statesal  THEN DO;
18450 +          _NODE_  =                   78;
18451 +          _LEAF_  =                   57;
18452 +          P_totalsal  =             105425.5;
18453 +          V_totalsal  =     105827.566666666;
18454 +          END;
18455 +        ELSE DO;
18456 +          _NODE_  =                   77;
18457 +          _LEAF_  =                   56;
18458 +          P_totalsal  =     97038.7866666666;
18459 +          V_totalsal  =                97273;
18460 +          END;
18461 +        END;
18462 +      ELSE DO;
18463 +        IF  NOT MISSING(statesal ) AND
18464 +          statesal  <              63410.5 THEN DO;
18465 +          _NODE_  =                   69;
18466 +          _LEAF_  =                   48;
18467 +          P_totalsal  =     62533.6964285714;
18468 +          V_totalsal  =     63382.3870967742;
18469 +          END;
18470 +        ELSE IF  NOT MISSING(statesal ) AND
18471 +                       63410.5 <= statesal  AND
18472 +          statesal  <              66247.5 THEN DO;
18473 +          _NODE_  =                   70;
18474 +          _LEAF_  =                   49;
18475 +          P_totalsal  =     65306.0196078431;
18476 +          V_totalsal  =     64981.0689655172;
18477 +          END;
18478 +        ELSE DO;
18479 +          _NODE_  =                   71;
18480 +          _LEAF_  =                   50;
18481 +          P_totalsal  =     69608.8775510204;
18482 +          V_totalsal  =     70048.5675675675;
18483 +          END;
18484 +        END;
18485 +      END;
18486 +    END;
18487 +  ELSE IF  NOT MISSING(statesal ) AND
18488 +                  108099 <= statesal  AND
18489 +    statesal  <               162093 THEN DO;
18490 +    IF  NOT MISSING(nonstsal ) AND
18491 +                   22783.5 <= nonstsal  THEN DO;
18492 +      _NODE_  =                   25;
18493 +      _LEAF_  =                   63;
18494 +      P_totalsal  =             172191.4;
18495 +      V_totalsal  =     175374.619047619;
18496 +      END;
18497 +    ELSE DO;
18498 +      IF  NOT MISSING(statesal ) AND
18499 +                    130026.5 <= statesal  THEN DO;
18500 +        _NODE_  =                   47;
18501 +        _LEAF_  =                   62;
18502 +        P_totalsal  =     147090.839080459;
18503 +        V_totalsal  =          147979.8125;
18504 +        END;
18505 +      ELSE DO;
18506 +        IF  NOT MISSING(statesal ) AND
18507 +                      117576.5 <= statesal  THEN DO;
18508 +          _NODE_  =                   80;
18509 +          _LEAF_  =                   61;
18510 +          P_totalsal  =     128431.728813559;
18511 +          V_totalsal  =     126284.958333333;
18512 +          END;
18513 +        ELSE DO;
18514 +          _NODE_  =                   79;
18515 +          _LEAF_  =                   60;
18516 +          P_totalsal  =          116553.6625;
18517 +          V_totalsal  =     115684.620689655;
18518 +          END;
18519 +        END;
18520 +      END;
18521 +    END;
18522 +  ELSE IF  NOT MISSING(statesal ) AND
18523 +                  162093 <= statesal  THEN DO;
18524 +    _NODE_  =                    9;
18525 +    _LEAF_  =                   64;
18526 +    P_totalsal  =     224578.765306122;
18527 +    V_totalsal  =     236071.901960784;
18528 +    END;
18529 +  ELSE DO;
18530 +    IF  NOT MISSING(nonstsal ) AND
18531 +                   43903.5 <= nonstsal  AND
18532 +      nonstsal  <              57561.5 THEN DO;
18533 +      IF  NOT MISSING(nonstsal ) AND
18534 +        nonstsal  <              47236.5 THEN DO;
18535 +        _ARBFMT_30 = PUT( exempt2 , $30.);
18536 +         %DMNORMIP( _ARBFMT_30);
18537 +        IF _ARBFMT_30 IN ('EXEMPT' ) THEN DO;
18538 +          _NODE_  =                   60;
18539 +          _LEAF_  =                   30;
18540 +          P_totalsal  =     54232.3275862069;
18541 +          V_totalsal  =     55741.5263157894;
18542 +          END;
18543 +        ELSE DO;
18544 +          _NODE_  =                   59;
18545 +          _LEAF_  =                   29;
18546 +          P_totalsal  =     45695.6432160804;
18547 +          V_totalsal  =     47597.4642857142;
18548 +          END;
18549 +        END;
18550 +      ELSE IF  NOT MISSING(nonstsal ) AND
18551 +                       52023 <= nonstsal  THEN DO;
18552 +        _NODE_  =                   36;
18553 +        _LEAF_  =                   35;
18554 +        P_totalsal  =     56000.9809160305;
18555 +        V_totalsal  =     56889.7950819672;
18556 +        END;
18557 +      ELSE DO;
18558 +        _ARBFMT_28 = PUT( position , $28.);
18559 +         %DMNORMIP( _ARBFMT_28);
18560 +        IF _ARBFMT_28 IN ('OTHER' ) THEN DO;
18561 +          _NODE_  =                   61;
18562 +          _LEAF_  =                   31;
18563 +          P_totalsal  =     50091.2717391304;
18564 +          V_totalsal  =     50038.6444444444;
18565 +          END;
18566 +        ELSE IF _ARBFMT_28 IN ('ADMIN' ,'ASSISTANT OTHER' ,'BUILDING' ,
18567 +          'CLINICAL OTHER' ,'CLINICAL RESEARCH' ) THEN DO;
18568 +          _NODE_  =                   62;
18569 +          _LEAF_  =                   32;
18570 +          P_totalsal  =     49622.3728813559;
18571 +          V_totalsal  =     49552.6071428571;
18572 +          END;
18573 +        ELSE IF _ARBFMT_28 IN ('EXECUTIVE' ,'RESEARCH OTHER' ,
18574 +        'OTHER PROGRAM' ,'PROJECT MANAGER' ,'RESEARCH ASSOCIATE' ,
18575 +          'RESEARCH SPECIALIST' ,'RESEARCH TECHNICIAN' ) THEN DO;
18576 +          _NODE_  =                   64;
18577 +          _LEAF_  =                   34;
18578 +          P_totalsal  =          50058.90625;
18579 +          V_totalsal  =                49517;
18580 +          END;
18581 +        ELSE DO;
18582 +          _NODE_  =                   63;
18583 +          _LEAF_  =                   33;
18584 +          P_totalsal  =     57550.0181818181;
18585 +          V_totalsal  =     56288.8518518518;
18586 +          END;
18587 +        END;
18588 +      END;
18589 +    ELSE IF  NOT MISSING(nonstsal ) AND
18590 +                   57561.5 <= nonstsal  AND
18591 +      nonstsal  <                74256 THEN DO;
18592 +      IF  NOT MISSING(statesal ) AND
18593 +                        8802 <= statesal  THEN DO;
18594 +        _NODE_  =                   38;
18595 +        _LEAF_  =                   44;
18596 +        P_totalsal  =              94400.2;
18597 +        V_totalsal  =     98545.4285714285;
18598 +        END;
18599 +      ELSE DO;
18600 +        IF  NOT MISSING(nonstsal ) AND
18601 +          nonstsal  <              60502.5 THEN DO;
18602 +          IF  NOT MISSING(nonstsal ) AND
18603 +            nonstsal  <              59070.5 THEN DO;
18604 +            _NODE_  =                  108;
18605 +            _LEAF_  =                   36;
18606 +            P_totalsal  =             58257.96;
18607 +            V_totalsal  =              58209.6;
18608 +            END;
18609 +          ELSE DO;
18610 +            _NODE_  =                  109;
18611 +            _LEAF_  =                   37;
18612 +            P_totalsal  =     59803.3114754098;
18613 +            V_totalsal  =     59782.6296296296;
18614 +            END;
18615 +          END;
18616 +        ELSE IF  NOT MISSING(nonstsal ) AND
18617 +                       60502.5 <= nonstsal  AND
18618 +          nonstsal  <              64148.5 THEN DO;
18619 +          IF  NOT MISSING(nonstsal ) AND
18620 +                           62434 <= nonstsal  THEN DO;
18621 +            _NODE_  =                  111;
18622 +            _LEAF_  =                   39;
18623 +            P_totalsal  =     63386.0882352941;
18624 +            V_totalsal  =             63171.84;
18625 +            END;
18626 +          ELSE DO;
18627 +            _NODE_  =                  110;
18628 +            _LEAF_  =                   38;
18629 +            P_totalsal  =     61480.6913580247;
18630 +            V_totalsal  =     61572.9210526315;
18631 +            END;
18632 +          END;
18633 +        ELSE IF  NOT MISSING(nonstsal ) AND
18634 +                       64148.5 <= nonstsal  AND
18635 +          nonstsal  <                68310 THEN DO;
18636 +          IF  NOT MISSING(nonstsal ) AND
18637 +                         66244.5 <= nonstsal  THEN DO;
18638 +            _NODE_  =                  113;
18639 +            _LEAF_  =                   41;
18640 +            P_totalsal  =     67381.0434782608;
18641 +            V_totalsal  =             67396.05;
18642 +            END;
18643 +          ELSE DO;
18644 +            _NODE_  =                  112;
18645 +            _LEAF_  =                   40;
18646 +            P_totalsal  =     65295.6666666666;
18647 +            V_totalsal  =     65467.7567567567;
18648 +            END;
18649 +          END;
18650 +        ELSE DO;
18651 +          IF  NOT MISSING(nonstsal ) AND
18652 +            nonstsal  <                70853 THEN DO;
18653 +            _NODE_  =                  114;
18654 +            _LEAF_  =                   42;
18655 +            P_totalsal  =     70004.1267605633;
18656 +            V_totalsal  =     69839.4864864864;
18657 +            END;
18658 +          ELSE DO;
18659 +            _NODE_  =                  115;
18660 +            _LEAF_  =                   43;
18661 +            P_totalsal  =     72698.8068181818;
18662 +            V_totalsal  =     72584.0769230769;
18663 +            END;
18664 +          END;
18665 +        END;
18666 +      END;
18667 +    ELSE IF  NOT MISSING(nonstsal ) AND
18668 +                     74256 <= nonstsal  THEN DO;
18669 +      IF  NOT MISSING(nonstsal ) AND
18670 +                     81491.5 <= nonstsal  AND
18671 +        nonstsal  <              86766.5 THEN DO;
18672 +        _NODE_  =                   40;
18673 +        _LEAF_  =                   46;
18674 +        P_totalsal  =                85762;
18675 +        V_totalsal  =     85909.1818181818;
18676 +        END;
18677 +      ELSE IF  NOT MISSING(nonstsal ) AND
18678 +                     86766.5 <= nonstsal  THEN DO;
18679 +        _NODE_  =                   41;
18680 +        _LEAF_  =                   47;
18681 +        P_totalsal  =     94602.0574712643;
18682 +        V_totalsal  =     94566.3731343283;
18683 +        END;
18684 +      ELSE DO;
18685 +        _NODE_  =                   39;
18686 +        _LEAF_  =                   45;
18687 +        P_totalsal  =     80472.2113402061;
18688 +        V_totalsal  =      81919.048192771;
18689 +        END;
18690 +      END;
18691 +    ELSE DO;
18692 +      IF  NOT MISSING(statesal ) AND
18693 +                       538.5 <= statesal  AND
18694 +        statesal  <                30580 THEN DO;
18695 +        IF  NOT MISSING(nonstsal ) AND
18696 +                         13022 <= nonstsal  THEN DO;
18697 +          IF  NOT MISSING(statesal ) AND
18698 +                         20121.5 <= statesal  THEN DO;
18699 +            _NODE_  =                   98;
18700 +            _LEAF_  =                   18;
18701 +            P_totalsal  =     50866.2777777777;
18702 +            V_totalsal  =     52344.2777777777;
18703 +            END;
18704 +          ELSE DO;
18705 +            _NODE_  =                   97;
18706 +            _LEAF_  =                   17;
18707 +            P_totalsal  =     41342.3174603174;
18708 +            V_totalsal  =     41047.4666666666;
18709 +            END;
18710 +          END;
18711 +        ELSE DO;
18712 +          IF  NOT MISSING(statesal ) AND
18713 +            statesal  <              18782.5 THEN DO;
18714 +            _NODE_  =                   94;
18715 +            _LEAF_  =                   14;
18716 +            P_totalsal  =      12629.343283582;
18717 +            V_totalsal  =     12658.5348837209;
18718 +            END;
18719 +          ELSE IF  NOT MISSING(statesal ) AND
18720 +                         26357.5 <= statesal  THEN DO;
18721 +            _NODE_  =                   96;
18722 +            _LEAF_  =                   16;
18723 +            P_totalsal  =     28817.1833333333;
18724 +            V_totalsal  =     28912.4565217391;
18725 +            END;
18726 +          ELSE DO;
18727 +            _NODE_  =                   95;
18728 +            _LEAF_  =                   15;
18729 +            P_totalsal  =     25853.3032258064;
18730 +            V_totalsal  =     25965.6129032258;
18731 +            END;
18732 +          END;
18733 +        END;
18734 +      ELSE IF  NOT MISSING(statesal ) AND
18735 +                       30580 <= statesal  AND
18736 +        statesal  <                47333 THEN DO;
18737 +        IF  NOT MISSING(nonstsal ) AND
18738 +                          4981 <= nonstsal  AND
18739 +          nonstsal  <              16450.5 THEN DO;
18740 +          _NODE_  =                   55;
18741 +          _LEAF_  =                   23;
18742 +          P_totalsal  =     48611.9259259259;
18743 +          V_totalsal  =     48270.3846153846;
18744 +          END;
18745 +        ELSE IF  NOT MISSING(nonstsal ) AND
18746 +                       16450.5 <= nonstsal  THEN DO;
18747 +          _NODE_  =                   56;
18748 +          _LEAF_  =                   24;
18749 +          P_totalsal  =     67858.2181818181;
18750 +          V_totalsal  =     64259.0526315789;
18751 +          END;
18752 +        ELSE DO;
18753 +          IF  NOT MISSING(statesal ) AND
18754 +            statesal  <                35530 THEN DO;
18755 +            _NODE_  =                   99;
18756 +            _LEAF_  =                   19;
18757 +            P_totalsal  =      33626.054054054;
18758 +            V_totalsal  =     33857.8913043478;
18759 +            END;
18760 +          ELSE IF  NOT MISSING(statesal ) AND
18761 +                           35530 <= statesal  AND
18762 +            statesal  <                39394 THEN DO;
18763 +            _NODE_  =                  100;
18764 +            _LEAF_  =                   20;
18765 +            P_totalsal  =     37523.1486486486;
18766 +            V_totalsal  =     38060.2537313432;
18767 +            END;
18768 +          ELSE IF  NOT MISSING(statesal ) AND
18769 +                         43607.5 <= statesal  THEN DO;
18770 +            _NODE_  =                  102;
18771 +            _LEAF_  =                   22;
18772 +            P_totalsal  =     45252.0802469135;
18773 +            V_totalsal  =     45568.5694444444;
18774 +            END;
18775 +          ELSE DO;
18776 +            _NODE_  =                  101;
18777 +            _LEAF_  =                   21;
18778 +            P_totalsal  =     41803.8781725888;
18779 +            V_totalsal  =     41783.8023255814;
18780 +            END;
18781 +          END;
18782 +        END;
18783 +      ELSE IF  NOT MISSING(statesal ) AND
18784 +                       47333 <= statesal  THEN DO;
18785 +        IF  NOT MISSING(nonstsal ) AND
18786 +                          2075 <= nonstsal  THEN DO;
18787 +          _NODE_  =                   58;
18788 +          _LEAF_  =                   28;
18789 +          P_totalsal  =     67737.4387755102;
18790 +          V_totalsal  =     68617.4117647059;
18791 +          END;
18792 +        ELSE DO;
18793 +          IF  NOT MISSING(statesal ) AND
18794 +                         51179.5 <= statesal  AND
18795 +            statesal  <              56763.5 THEN DO;
18796 +            _NODE_  =                  104;
18797 +            _LEAF_  =                   26;
18798 +            P_totalsal  =              53924.5;
18799 +            V_totalsal  =     54091.4716981132;
18800 +            END;
18801 +          ELSE IF  NOT MISSING(statesal ) AND
18802 +                         56763.5 <= statesal  THEN DO;
18803 +            _NODE_  =                  105;
18804 +            _LEAF_  =                   27;
18805 +            P_totalsal  =     58596.2873563218;
18806 +            V_totalsal  =      58636.081081081;
18807 +            END;
18808 +          ELSE DO;
18809 +            _NODE_  =                  103;
18810 +            _LEAF_  =                   25;
18811 +            P_totalsal  =     49365.8629032258;
18812 +            V_totalsal  =      49164.224137931;
18813 +            END;
18814 +          END;
18815 +        END;
18816 +      ELSE DO;
18817 +        IF  NOT MISSING(nonstsal ) AND
18818 +          nonstsal  <              29011.5 THEN DO;
18819 +          IF  NOT MISSING(nonstsal ) AND
18820 +                           26315 <= nonstsal  THEN DO;
18821 +            _NODE_  =                   82;
18822 +            _LEAF_  =                    2;
18823 +            P_totalsal  =              27963.5;
18824 +            V_totalsal  =     28144.3809523809;
18825 +            END;
18826 +          ELSE DO;
18827 +            _NODE_  =                   81;
18828 +            _LEAF_  =                    1;
18829 +            P_totalsal  =     23373.5820895522;
18830 +            V_totalsal  =             24206.88;
18831 +            END;
18832 +          END;
18833 +        ELSE IF  NOT MISSING(nonstsal ) AND
18834 +                       29011.5 <= nonstsal  AND
18835 +          nonstsal  <              34677.5 THEN DO;
18836 +          IF  NOT MISSING(nonstsal ) AND
18837 +                           31786 <= nonstsal  AND
18838 +            nonstsal  <              32741.5 THEN DO;
18839 +            _NODE_  =                   84;
18840 +            _LEAF_  =                    4;
18841 +            P_totalsal  =     32334.2264150943;
18842 +            V_totalsal  =     32513.3333333333;
18843 +            END;
18844 +          ELSE IF  NOT MISSING(nonstsal ) AND
18845 +                         32741.5 <= nonstsal  AND
18846 +            nonstsal  <              33718.5 THEN DO;
18847 +            _NODE_  =                   85;
18848 +            _LEAF_  =                    5;
18849 +            P_totalsal  =             33243.24;
18850 +            V_totalsal  =     33195.8695652173;
18851 +            END;
18852 +          ELSE IF  NOT MISSING(nonstsal ) AND
18853 +                         33718.5 <= nonstsal  THEN DO;
18854 +            _NODE_  =                   86;
18855 +            _LEAF_  =                    6;
18856 +            P_totalsal  =     34083.4098360655;
18857 +            V_totalsal  =              34068.5;
18858 +            END;
18859 +          ELSE DO;
18860 +            _NODE_  =                   83;
18861 +            _LEAF_  =                    3;
18862 +            P_totalsal  =     30450.7586206896;
18863 +            V_totalsal  =     30453.0961538461;
18864 +            END;
18865 +          END;
18866 +        ELSE IF  NOT MISSING(nonstsal ) AND
18867 +                       34677.5 <= nonstsal  AND
18868 +          nonstsal  <              39454.5 THEN DO;
18869 +          IF  NOT MISSING(nonstsal ) AND
18870 +            nonstsal  <              36040.5 THEN DO;
18871 +            _NODE_  =                   87;
18872 +            _LEAF_  =                    7;
18873 +            P_totalsal  =     35447.7261904761;
18874 +            V_totalsal  =     35448.6764705882;
18875 +            END;
18876 +          ELSE IF  NOT MISSING(nonstsal ) AND
18877 +                           37165 <= nonstsal  AND
18878 +            nonstsal  <              38012.5 THEN DO;
18879 +            _NODE_  =                   89;
18880 +            _LEAF_  =                    9;
18881 +            P_totalsal  =      37626.074074074;
18882 +            V_totalsal  =              37719.2;
18883 +            END;
18884 +          ELSE IF  NOT MISSING(nonstsal ) AND
18885 +                         38012.5 <= nonstsal  THEN DO;
18886 +            _NODE_  =                   90;
18887 +            _LEAF_  =                   10;
18888 +            P_totalsal  =      38803.676056338;
18889 +            V_totalsal  =            38724.225;
18890 +            END;
18891 +          ELSE DO;
18892 +            _NODE_  =                   88;
18893 +            _LEAF_  =                    8;
18894 +            P_totalsal  =     36547.0388349514;
18895 +            V_totalsal  =          36588.59375;
18896 +            END;
18897 +          END;
18898 +        ELSE DO;
18899 +          IF  NOT MISSING(nonstsal ) AND
18900 +            nonstsal  <                40735 THEN DO;
18901 +            _NODE_  =                   91;
18902 +            _LEAF_  =                   11;
18903 +            P_totalsal  =     40126.2604166666;
18904 +            V_totalsal  =     40086.8163265306;
18905 +            END;
18906 +          ELSE IF  NOT MISSING(nonstsal ) AND
18907 +                           42604 <= nonstsal  THEN DO;
18908 +            _NODE_  =                   93;
18909 +            _LEAF_  =                   13;
18910 +            P_totalsal  =     43390.2297297297;
18911 +            V_totalsal  =              43219.5;
18912 +            END;
18913 +          ELSE DO;
18914 +            _NODE_  =                   92;
18915 +            _LEAF_  =                   12;
18916 +            P_totalsal  =     41634.7027027027;
18917 +            V_totalsal  =     41675.6777777777;
18918 +            END;
18919 +          END;
18920 +        END;
18921 +      END;
18922 +    END;
18923 +  END;
18924 +
18925 +*****  RESIDUALS R_ *************;
18926 +IF MISSING( totalsal ) THEN R_totalsal  = .;
18927 +ELSE R_totalsal  = totalsal  - P_totalsal ;
18928 +
18929 +****************************************************************;
18930 +******          END OF DECISION TREE SCORING CODE         ******;
18931 +****************************************************************;
18932 +
18933 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18934  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE4_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
18935  quit;
18936  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
18938  proc sort data=WORK.EM_USER_REPORT;
18939  by ID VIEW;
18940  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
18941  *------------------------------------------------------------*;
18942  * Tree4: Computing metadata for TRAIN data;
18943  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
19338  data WORK.MODELTEMP_INFO;
19339  set EMWS1.Tree4_EMINFO;
19340  where DATA='Tree4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
19341  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE4_EMINFO.
      WHERE (DATA='Tree4') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19342  data EMWS1.Tree4_EMINFO;
19343  length TARGET KEY $32 DATA $43;
19344  input TARGET KEY DATA $;
19345  cards;
 
NOTE: The data set EMWS1.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19349  run;
19350  data EMWS1.Tree4_EMINFO;
19351  set EMWS1.Tree4_EMINFO WORK.MODELTEMP_INFO;
19352  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19353  proc sort data = EMWS1.Tree4_EMINFO NOTHREADS;
19354  by TARGET KEY;
19355  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: The data set EMWS1.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19356  proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
19357  by TARGET KEY;
19358  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19359  proc sort data = EMWS1.Tree4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
19360  by TARGET KEY;
19361  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19362  data EMWS1.Tree4_EMINFO;
19363  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
19364  by TARGET KEY;
19365  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE4_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19366  proc datasets lib=work nolist;
19367  delete TEMP_INFO SORTEDEMINFO;
19368  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
19369  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.TREE4_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE4_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 21, 2016
Time:                05:42:06
*------------------------------------------------------------*
19393  data EMWS1.Tree4_EMOUTFIT;
19394  set EMWS1.Tree4_EMOUTFIT;
19395  length TargetLabel $200;
19396  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
19397  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE4_EMOUTFIT.
NOTE: The data set EMWS1.TREE4_EMOUTFIT has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
19398  proc sort data=EMWS1.Tree4_EMREPORTFIT nothreads;
19399  by TARGET;
19400  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE4_EMREPORTFIT.
NOTE: The data set EMWS1.TREE4_EMREPORTFIT has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19401  %let _EMwarndup = 0;
19402  %let _EMtargetdup =;
19403  %let _EMASEtargetdup =;
19404  data _null_;
19405  set EMWS1.Tree4_EMOUTFIT;
19406  if .<_ASE_<0.000001 then do;
19407  call symput('_EMwarndup', '1');
19408  call symput('_EMtargetdup', target);
19409  call symput('_EMASEtargetdup', put(_ASE_, best.));
19410  end;
19411  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19412  %let EMEXCEPTIONSTRING=;
19413  *------------------------------------------------------------*;
19414  * REPORT: Tree4;
19415  *------------------------------------------------------------*;
19416  %let EM_ACTION = REPORT;
19417  %let syscc = 0;
19418  %macro main;
19419
19420    %if %upcase(&EM_ACTION) = CREATE %then %do;
19421      filename temp catalog 'sashelp.emmodl.tree_create.source';
19422      %include temp;
19423      filename temp;
19424
19425      %em_tree_create;
19426    %end;
19427
19428     %else
19429     %if %upcase(&EM_ACTION) = TRAIN %then %do;
19430
19431         filename temp catalog 'sashelp.emmodl.tree_train.source';
19432         %include temp;
19433         filename temp;
19434         %em_tree_train;
19435     %end;
19436
19437    %else
19438    %if %upcase(&EM_ACTION) = SCORE %then %do;
19439      filename temp catalog 'sashelp.emmodl.tree_score.source';
19440      %include temp;
19441      filename temp;
19442
19443      %em_tree_score;
19444
19445    %end;
19446
19447    %else
19448    %if %upcase(&EM_ACTION) = REPORT %then %do;
19449
19450         filename temp catalog 'sashelp.emmodl.tree_report.source';
19451         %include temp;
19452         filename temp;
19453
19454         %em_tree_report;
19455     %end;
19456
19457    %else
19458    %if %upcase(&EM_ACTION) = OPENINT %then %do;
19459
19460         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19461         %include temp;
19462         filename temp;
19463         %EM_TREE_OPENTREEVIEWER;
19464
19465     %end;
19466
19467    %else
19468    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19469
19470         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19471         %include temp;
19472         filename temp;
19473         %EM_TREE_CLOSETREEVIEWER;
19474
19475     %end;
19476
19477
19478     %doendm:
19479  %mend main;
19480
19481  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
19483 +%macro em_tree_makePlotDs( multipleTar= );
19485 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19486 +  %EM_GETNAME(key=OUTNODES, type=DATA);
19487 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19488 +  %EM_GETNAME(key=OUTRULES, type=DATA);
19490 +  /* determine if validation statistics will be displayed */
19491 +  %let validflag=N;
19492 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
19493 +    /* determine if validation data exists */
19494 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
19495 +      %let validflag=Y;
19496 +    %end;
19497 +  %end;
19499 +   /* retrieve name of decmeta even in presence of multiple targets */
19500 +   %let decmeta = ;
19501 +   %if &EM_DEC_DECMETA eq %then %do;
19502 +     data _Target;
19503 +       set &em_data_variableset;
19504 +       where ROLE='TARGET' and USE in('D', 'Y');
19505 +       keep NAME;
19506 +     run;
19507 +     proc sort data=_Target;
19508 +       by NAME;
19509 +     run;
19510 +     proc sort data=EM_TARGETDECINFO;
19511 +       by TARGET;
19512 +     run;
19513 +     data _Target;
19514 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
19515 +       by NAME;
19516 +       if _a then do;
19517 +         call symput('decmeta', trim(DECMETA));
19518 +       end;
19519 +     run;
19520 +     proc delete data=_Target;run;
19521 +   %end;
19522 +   %else %let decmeta = &EM_DEC_DECMETA;
19525 +  /* retrieve targetEvent from decmeta */
19526 +  %let targetEvent=;
19527 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19528 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19529 +      data _null_;
19530 +       set &DECMETA(where=(_TYPE_="TARGET"));
19531 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19532 +      run;
19533 +    %end;
19534 +  %end;
19536 +  /* retrieve predicted var for targetEvent from decmeta */
19537 +  %let predTarget=;
19538 +  %let predLvl=;
19539 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19540 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19541 +      data _null_;
19542 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
19543 +       call symput('predTarget', strip(VARIABLE));
19544 +       call symput('predLvl', strip(LEVEL));
19545 +      run;
19546 +    %end;
19547 +  %end;
19548 +  %else %do;
19549 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19550 +      data _null_;
19551 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
19552 +       call symput('predTarget', strip(VARIABLE));
19553 +      run;
19554 +    %end;
19555 +  %end;
19557 +  /* create BelowText value */
19558 +  data belowtext;
19559 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
19560 +    keep node belowtext;
19561 +  run;
19563 +  /* relace belowtext with variable label if it exists */
19564 +  data belowtext2;
19565 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
19566 +    keep node belowtextlbl;
19567 +  run;
19569 +  proc sort data=belowtext; by node; run;
19570 +  proc sort data=belowtext2; by node; run;
19572 +  data belowtext;
19573 +    merge belowtext belowtext2(in=_a);
19574 +    by node;
19575 +    if _a then belowtext=belowtextlbl;
19576 +    keep node belowtext;
19577 +  run;
19579 +  /* create AboveText value */
19580 +  data abovetext;
19581 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
19582 +  run;
19583 +  proc sort data=abovetext; by node numeric_value; run;
19585 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
19586 +  data abovetext;
19587 +    set abovetext(rename=(node=parent));
19588 +    by parent numeric_value;
19589 +    retain abovetext tempstring flag branch origval origchar ;
19590 +    length abovetext $256;
19591 +    length tempstring origchar $64;
19593 +    if STAT in ("INTERVAL", "ORDINAL") then do;
19594 +      if first.parent then do;
19595 +        if missing(character_value) then do;
19596 +          numeric_value = round(numeric_value, &sp_precision);
19597 +          abovetext = "< "||strip(NUMERIC_VALUE);
19598 +          branch = 1;
19599 +          origval = numeric_value;
19600 +          output;
19601 +        end;
19602 +        else do;
19603 +          abovetext = "< "||strip(CHARACTER_VALUE);
19604 +          branch = 1;
19605 +          origchar = character_value;
19606 +          output;
19607 +        end;
19609 +        if first.parent AND last.parent then do;
19610 +          if missing(character_value) then do;
19611 +            numeric_value = round(numeric_value, &sp_precision);
19612 +            branch = branch + 1;
19613 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19614 +            output;
19615 +          end;
19616 +          else do;
19617 +            branch = branch + 1;
19618 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19619 +            output;
19620 +          end;
19621 +        end;
19622 +      end;
19623 +      else if last.parent then do;
19624 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19625 +          if missing(character_value) then do;
19626 +            numeric_value = round(numeric_value, &sp_precision);
19627 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19628 +          end;
19629 +          else do;
19630 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19631 +          end;
19632 +          branch = branch + 1;
19633 +          output;
19635 +          if missing(character_value) then do;
19636 +            numeric_value = round(numeric_value, &sp_precision);
19637 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19638 +          end;
19639 +          else do;
19640 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19641 +          end;
19642 +          branch = branch + 1;
19643 +          output;
19644 +        end;
19645 +        else do;
19646 +          if missing(character_value) then do;
19647 +            numeric_value = round(numeric_value, &sp_precision);
19648 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19649 +          end;
19650 +          else do;
19651 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19652 +          end;
19653 +          branch = branch + 1;
19654 +          output;
19655 +        end;
19656 +      end;
19657 +      else do;
19658 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19659 +          if missing(character_value) then do;
19660 +            numeric_value = round(numeric_value,&sp_precision);
19661 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19662 +            origval = numeric_value;
19663 +          end;
19664 +          else do;
19665 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19666 +            origchar = character_value;
19667 +          end;
19668 +          branch = branch + 1;
19669 +          output;
19671 +        end;
19672 +        else do;
19673 +          if missing(character_value) then do;
19674 +            numeric_value = round(numeric_value, &sp_precision);
19675 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19676 +            origval = numeric_value;
19677 +          end;
19678 +          else do;
19679 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19680 +            origval = character_value;
19681 +          end;
19682 +          branch = branch + 1;
19683 +          output;
19684 +        end;
19685 +      end;
19686 +    end;
19687 +    else do;
19688 +       if first.numeric_value then do;
19689 +         flag = 0;
19690 +         abovetext = strip(CHARACTER_VALUE);
19691 +         branch = numeric_value;
19692 +         if first.numeric_value AND last.numeric_value then do;
19693 +           output;
19694 +         end;
19695 +       end;
19696 +       else if last.numeric_value then do;
19697 +         if flag=0 then do;
19698 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19699 +           length = length(strip(tempstring));
19700 +           if length < 32 then do;
19701 +             abovetext = strip(tempstring);
19702 +           end;
19703 +           else do;
19704 +             abovetext = strip(abovetext)||", ...";
19705 +             flag = 1;
19706 +           end;
19707 +         end;
19708 +         branch = numeric_value;
19709 +         output;
19710 +       end;
19711 +       else do;
19712 +         if flag=0 then do;
19713 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19714 +           length = length(strip(tempstring));
19715 +           if length < 32 then do;
19716 +             abovetext = strip(tempstring);
19717 +           end;
19718 +           else do;
19719 +             abovetext = strip(abovetext)||", ...";
19720 +             flag=1;
19721 +           end;
19722 +         end;
19723 +         branch = numeric_value;
19724 +       end;
19725 +    end;
19726 +    keep parent branch abovetext;
19727 +  run;
19729 +  /* MIssing value to abovetext */
19730 +  data tempmissing;
19731 +    set &EM_USER_OUTRULES;
19732 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
19733 +    rename node=parent numeric_value=branch character_value=misschar;
19734 +  run;
19737 +  proc sort data=abovetext; by parent branch; run;
19738 +  proc sort data=tempmissing; by parent branch; run;
19739 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19741 +  data tempoutnodes;
19742 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19743 +    by parent branch;
19744 +    length traintotal validtotal 8;
19745 +    retain traintotal validtotal;
19747 +    if _a then do;
19748 +      if ^MISSING(abovetext) then do;
19749 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19750 +      end;
19751 +      else do;
19752 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19753 +      end;
19754 +    end;
19755 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19757 +    if node=1 then do;
19758 +      traintotal = N;
19759 +      validtotal=VN;
19760 +    end;
19762 +    drop role rank stat misschar belowtext;
19763 +  run;
19764 +  proc sort data=tempoutnodes; by node; run;
19765 +  proc sort data=belowtext; by node; run;
19767 +  data tempoutnodes;
19768 +    merge tempoutnodes belowtext;
19769 +    by node;
19771 +  run;
19773 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19774 +  %let adjusted = N;
19775 +  %let npriors = 0;
19776 +  data _null_ ;
19777 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19778 +    if eof then do ;
19779 +      call symput("npriors" , strip(put(_N_,best.))) ;
19780 +    end;
19781 +  run;
19782 +  %if &npriors gt 0 %then %let adjusted=Y;
19785 +  /* create a table with targetUsed and targetLevel columns for each node */
19786 +  data temptarmeta;
19787 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19788 +    %if &multipleTar eq N %then %do;
19789 +      AND USE in ('D', 'Y')
19790 +    %end;
19791 +    ));
19792 +    length TARGET $32;
19793 +    Target=name;
19794 +    keep target level;
19795 +  run;
19797 +  %if &multipleTar eq Y %then %do;
19798 +    data temptargetused;
19799 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19800 +      keep node target;
19801 +    run;
19802 +    proc sort data=temptargetused; by target; run;
19803 +    proc sort data=temptarmeta; by target; run;
19804 +    data temptargetused;
19805 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19806 +      by target;
19807 +      if _a and _b;
19808 +    run;
19809 +  %end;
19810 +  %else %do;
19811 +    data temptargetused;
19812 +      set &EM_USER_OUTSTATS;
19813 +      length target $32 tarlevel $10;
19814 +      target="%EM_TARGET";
19815 +      tarlevel="%EM_TARGET_LEVEL";
19816 +      keep node target tarlevel;
19817 +    run;
19818 +    proc sort data=temptargetused nodupkey; by node; run;
19819 +  %end;
19821 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
19822 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19823 +  proc sort data=temptargetused; by node; run;
19826 +  /* create tables for all interval targets as well as all class targets */
19827 +  data tempinterval tempclass;
19828 +    merge tempoutstats temptargetused( rename=(target=targetused));
19829 +    by node;
19830 +    %if "&multipleTar" eq "Y" %then %do;
19831 +      if ((missing(Target)) OR (target=targetused ));
19832 +    %end;
19834 +    if tarlevel="INTERVAL" then output tempinterval;
19835 +    else output tempclass;
19836 +  run;
19838 +  /* iniitalize intTarget and classTarget flags */
19839 +  %let em_intNobs =0;
19840 +  %let em_classNobs = 0;
19841 +  %let em_intTarget= N;
19842 +  %let em_classTarget= N;
19844 +  proc sql;
19845 +    reset noprint;
19846 +    select count(*) into :em_intNobs from tempinterval;
19847 +  quit;
19848 +  proc sql;
19849 +    reset noprint;
19850 +    select count(*) into :em_classNobs from tempclass;
19851 +  quit;
19853 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19854 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19856 +  /* retrieve all information for interval targets */
19857 +  %if &em_intTarget eq Y %then %do;
19859 +    /* determine if leaf variable exists */
19860 +    %let dsid=%sysfunc(open(tempinterval,i));
19861 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19862 +    %let rc=%sysfunc(close(&dsid));
19864 +    proc transpose data=tempinterval
19865 +      %if &leafexists %then %do;
19866 +        (drop=leaf)
19867 +      %end;
19868 +      %if &validexist %then %do;
19869 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19870 +      %end;
19871 +      %else %do;
19872 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19873 +      %end;
19874 +      by node;
19875 +      id statname;
19876 +    run;
19877 +    data tempinterval;
19878 +      set tempinterval;
19879 +      if missing(N) then delete;
19880 +    run;
19881 +  %end;
19883 +  /* retrieve all information for class targets */
19884 +  %if &em_classTarget eq Y %then %do;
19885 +    proc sort data=tempclass; by node category; run;
19886 +    %if &validflag eq N %then %do;
19887 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19888 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19889 +    %end;
19890 +    %else %do;
19891 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19892 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19893 +    %end;
19894 +      set tempclass;
19896 +      %if &validflag eq N %then %do;
19897 +        %if "&adjusted" eq "N" %then %do;
19898 +          if statname="N" then output tempn;
19899 +        %end;
19900 +        %else %do;
19901 +          if statname="NPRIORS" then output tempn;
19902 +        %end;
19903 +        else if statname="PREDICTION" then output temppredict;
19904 +        else if statname="PROBABILITY" then output tempprob;
19905 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19906 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19907 +      %end;
19908 +      %else %do;
19909 +        %if "&adjusted" eq "N" %then %do;
19910 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19911 +        %end;
19912 +        %else %do;
19913 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19914 +        %end;
19915 +        else if statname="PREDICTION" then output temppredict;
19916 +        else if statname="PROBABILITY" then output tempprob;
19917 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19918 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19919 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19920 +      %end;
19921 +    run;
19924 +    /* determine if profit/loss exists in tempprofit */
19925 +    %let em_profitflag=0;
19926 +    %let em_lossflag=0;
19927 +    proc sql;
19928 +      reset noprint;
19929 +      select count(*) into :em_profitflag from tempprofit;
19930 +    quit;
19931 +    proc sql;
19932 +      reset noprint;
19933 +      select count(*) into :em_lossflag from temploss;
19934 +    quit;
19936 +    %if &validFlag eq Y %then %do;
19937 +      proc transpose data=tempn
19938 +        %if "&adjusted" eq "N" %then %do;
19939 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19940 +        %end;
19941 +        %else %do;
19942 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19943 +        %end;
19944 +        by node;
19945 +        id statname;
19946 +      run;
19947 +      %if &em_profitflag ne 0 %then %do;
19948 +        proc transpose data=tempprofit out=tempprofit;
19949 +          by node category;
19950 +          id statname ;
19951 +        run;
19952 +      %end;
19953 +      %if &em_lossflag ne 0 %then %do;
19954 +        proc transpose data=temploss out=temploss;
19955 +          by node category;
19956 +          id statname ;
19957 +        run;
19958 +      %end;
19959 +      data tempprob;
19960 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19961 +        by node
19962 +        %if &multipleTar eq Y %then %do;
19963 +          target
19964 +        %end;
19965 +        category;
19966 +      run;
19967 +    %end;
19969 +    /* store percentcorrect value */
19970 +    data temppredict;
19971 +      merge tempprob temppredict(in=_a);
19972 +      by node category;
19973 +      if _a then do;
19974 +        percentCorrect = statvalue;
19975 +        %if &validFlag eq Y %then %do;
19976 +          vpercentCorrect= vstatvalue;
19977 +        %end;
19978 +      end;
19979 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19980 +      %if &validFlag eq Y %then %do;
19981 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19982 +      %end;
19983 +      ;
19984 +      if missing(percentCorrect) then delete;
19985 +      drop target;
19986 +    run;
19988 +    /* build profittext */
19989 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19990 +      data tempprofittext(keep= node profittext profitloss);
19991 +        length profittext $800 profitloss 8.;
19992 +        retain profittext profitloss;
19994 +        merge tempprob
19995 +        %if &em_profitflag ne 0 %then %do;
19996 +          tempprofit
19997 +        %end;
19998 +        %else %if &em_lossflag ne 0 %then %do;
19999 +          temploss
20000 +        %end;
20001 +        ;
20002 +        by node category;
20004 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20005 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
20006 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
20007 +          %let profittype = ALL;
20008 +        %end;
20010 +        /* create the profitloss variable for nodecolor if selected */
20011 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
20013 +        %if "&profittype" eq "ALL" %then %do;
20014 +          if strip(CATEGORY)="&targetEvent" then do;
20015 +            profitloss=statvalue;
20016 +          end;
20017 +          if first.node then do;
20018 +            %if &validFlag eq N %then %do;
20019 +             %if &em_profitflag ne 0 %then %do;
20020 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20021 +             %end;
20022 +             %if &em_lossflag ne 0 %then %do;
20023 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20024 +             %end;
20025 +            %end;
20026 +            %else %do;
20027 +             %if &em_profitflag ne 0 %then %do;
20028 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20028!+;
20029 +             %end;
20030 +             %if &em_lossflag ne 0 %then %do;
20031 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20032 +             %end;
20033 +            %end;
20034 +          end;
20035 +          else if last.node then do;
20036 +            %if &validFlag eq N %then %do;
20037 +             %if &em_profitflag ne 0 %then %do;
20038 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20039 +             %end;
20040 +             %if &em_lossflag ne 0 %then %do;
20041 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20042 +             %end;
20043 +             /*if CATEGORY="&targetEvent" then do;
20044 +               profitloss=statvalue;
20045 +             end;*/
20046 +            %end;
20047 +            %else %do;
20048 +             %if &em_profitflag ne 0 %then %do;
20049 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20049!+14.&EM_PROPERTY_SPLITPRECISION);
20050 +                if CATEGORY="&targetEvent" then do;
20051 +                 profitloss=ALTERNATIVE_PROFIT;
20052 +                end;
20053 +             %end;
20054 +             %if &em_lossflag ne 0 %then %do;
20055 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20055!+14.&EM_PROPERTY_SPLITPRECISION);
20056 +                if CATEGORY="&targetEvent" then do;
20057 +                  profitloss=ALTERNATIVE_LOSS;
20058 +                end;
20059 +             %end;
20060 +            %end;
20061 +            output;
20062 +          end;
20063 +          else do;
20064 +            %if &validFlag eq N %then %do;
20065 +             %if &em_profitflag ne 0 %then %do;
20066 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20067 +             %end;
20068 +             %if &em_lossflag ne 0 %then %do;
20069 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20070 +             %end;
20071 +            %end;
20072 +            %else %do;
20073 +             %if &em_profitflag ne 0 %then %do;
20074 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20074!+14.&EM_PROPERTY_SPLITPRECISION);
20075 +             %end;
20076 +             %if &em_lossflag ne 0 %then %do;
20077 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20077!+14.&EM_PROPERTY_SPLITPRECISION);
20078 +             %end;
20079 +            %end;
20080 +          end;
20081 +        %end;
20082 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20083 +          if strip(CATEGORY) = "&targetevent" then do;
20084 +            %if &validFlag eq N %then %do;
20085 +             %if &em_profitflag ne 0 %then %do;
20086 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20087 +             %end;
20088 +             %if &em_lossflag ne 0 %then %do;
20089 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20090 +             %end;
20091 +             profitloss=statvalue;
20092 +            %end;
20093 +            %else %do;
20094 +             %if &em_profitflag ne 0 %then %do;
20095 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20095!+;
20096 +                profitloss=ALTERNATIVE_PROFIT;
20097 +             %end;
20098 +             %if &em_lossflag ne 0 %then %do;
20099 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20100 +                profitloss=ALTERNATIVE_LOSS;
20101 +             %end;
20102 +            %end;
20103 +            output;
20104 +          end;
20105 +        %end;
20106 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
20107 +          if strip(CATEGORY) = "&targetevent" then do;
20108 +            %if &validFlag eq N %then %do;
20109 +             profitloss=statvalue;
20110 +            %end;
20111 +            %else %do;
20112 +             %if &em_profitflag ne 0 %then %do;
20113 +                profitloss=ALTERNATIVE_PROFIT;
20114 +             %end;
20115 +             %if &em_lossflag ne 0 %then %do;
20116 +                profitloss=ALTERNATIVE_LOSS;
20117 +             %end;
20118 +            %end;
20119 +            output;
20120 +          end;
20121 +        %end;
20122 +      run;
20123 +    %end;
20125 +    data tempprob(keep= node probtext);
20126 +      length probtext $800;
20127 +      retain probtext;
20128 +      set tempprob ;
20129 +      by node;
20131 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20132 +      %let probtype = &EM_PROPERTY_TARGET;
20133 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
20134 +        %let probtype = ALL;
20135 +      %end;
20137 +      %if "&probtype" eq "ALL" %then %do;
20138 +        if first.node then do;
20139 +          %if &validFlag eq N %then %do;
20140 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20141 +          %end;
20142 +          %else %do;
20143 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20144 +          %end;
20145 +        end;
20146 +        else if last.node then do;
20147 +          %if &validFlag eq N %then %do;
20148 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20149 +          %end;
20150 +          %else %do;
20151 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20152 +          %end;
20153 +          output;
20154 +        end;
20155 +        else do;
20156 +          %if &validFlag eq N %then %do;
20157 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20158 +          %end;
20159 +          %else %do;
20160 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20161 +          %end;
20162 +        end;
20163 +      %end;
20164 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20165 +        if strip(CATEGORY) = "&targetevent" then do;
20166 +          %if &validFlag eq N %then %do;
20167 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20168 +          %end;
20169 +          %else %do;
20170 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20171 +          %end;
20172 +          output;
20173 +        end;
20174 +      %end;
20175 +      %else %if "&probtype" eq "NONE" %then %do;
20176 +        if last.node then do;
20177 +          output;
20178 +        end;
20179 +      %end;
20180 +    run;
20181 +  %end;
20183 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
20185 +  %let oldexists=0;
20186 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
20187 +     data old_tree_plot;
20188 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
20189 +        rename nodecolor=oldnodecolor;
20190 +     run;
20192 +     proc sort data=old_tree_plot;
20193 +        by node;
20194 +     run;
20196 +     %let oldexists=1;
20197 +  %end;
20199 +  data &EM_USER_TREE_PLOT;
20200 +    length textall $800;
20201 +    merge tempoutnodes temptargetused
20203 +    %if &em_intTarget eq Y %then %do;
20204 +      tempinterval
20205 +    %end;
20207 +    %if &em_classTarget eq Y %then %do;
20209 +      %if &validFlag eq N %then %do;
20210 +        tempn(rename=(statvalue=N))
20211 +      %end;
20212 +      %else %do;
20213 +        tempn
20214 +      %end;
20216 +      temppredict tempprob
20218 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20219 +        tempprofittext
20220 +      %end;
20221 +    %end;
20222 +    ;
20223 +    by node;
20225 +    /* build nodetext based on user selection */
20226 +    textall="";
20228 +    %if &em_intTarget eq Y %then %do;
20229 +    if tarlevel="INTERVAL" then do;
20230 +      /* Nodeid */
20231 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20232 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20233 +      %end;
20235 +      /* Target identifier if multiple targets are used */
20236 +      %if "&multipleTar" eq "Y" %then %do;
20237 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20238 +      %end;
20240 +      %if &validFlag eq Y %then %do;
20241 +         /* Column labels displayed in validflag eq Y only */
20242 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20243 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20243!+noquote ))";
20244 +         %end;
20246 +         /* Average values */
20247 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20248 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20249 +         %end;
20251 +         /* RASE */
20252 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20253 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
20254 +         %end;
20256 +         /* Count */
20257 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20258 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
20259 +         %end;
20260 +      %end;
20261 +      %else %do;
20262 +         /* Average values */
20263 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20264 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20265 +         %end;
20267 +         /* RASE */
20268 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20269 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
20270 +         %end;
20272 +         /* Count */
20273 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20274 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
20275 +         %end;
20276 +      %end;
20278 +      /* nodecolor */
20279 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
20280 +        nodecolor=PREDICTION;
20281 +      %end;
20282 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
20283 +        nodecolor=RASE;
20284 +      %end;
20285 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
20286 +        nodecolor=1;
20287 +      %end;
20289 +    end;
20290 +    %end;
20291 +    %if &em_classTarget eq Y %then %do;
20292 +    if tarlevel^="INTERVAL" then  do;
20294 +      /* Nodeid */
20295 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20296 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20297 +      %end;
20298 +      /* Target identifier if multiple targets are used */
20299 +      %if "&multipleTar" eq "Y" %then %do;
20300 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20301 +      %end;
20303 +      /* Predicted values */
20304 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
20305 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
20306 +      %end;
20308 +      /* Column labels displayed in validflag eq Y only */
20309 +      %if "&ValidFlag" eq "Y" %then %do;
20310 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20311 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20311!+noquote ))";
20312 +        %end;
20313 +      %end;
20315 +      /* Target Values */
20316 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
20317 +        textall=strip(textall)||"0A"x||strip(probtext);
20318 +      %end;
20320 +      /* include profit or loss for all target levels */
20321 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
20322 +        textall=strip(textall)||"0A"x||strip(profittext);
20323 +      %end;
20325 +      %if &validFlag eq N %then %do;
20326 +        /* Percent Correct */
20327 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20328 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
20329 +        %end;
20331 +         /* Count */
20332 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20333 +          %if "&adjusted" eq "N" %then %do;
20334 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
20335 +          %end;
20336 +          %else %do;
20337 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
20338 +          %end;
20339 +         %end;
20340 +      %end;
20341 +      %else %do;
20342 +        /* Percent Correct */
20343 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20344 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
20345 +        %end;
20347 +         /* Count */
20348 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20349 +          %if "&adjusted" eq "N" %then %do;
20350 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
20351 +          %end;
20352 +          %else %do;
20353 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
20354 +          %end;
20355 +         %end;
20356 +      %end;
20358 +      /* nodecolor */
20359 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
20360 +       %if &multipleTar ne Y %then %do;
20361 +        nodecolor=&predTarget;
20362 +       %end;
20363 +       %else %do;
20364 +         nodecolor=percentcorrect;
20365 +       %end;
20366 +      %end;
20367 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
20368 +        nodecolor=percentcorrect;
20369 +      %end;
20370 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
20371 +        nodecolor=1;
20372 +      %end;
20373 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
20374 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
20375 +          nodecolor=percentcorrect;
20376 +        %end;
20377 +        %else %do;
20378 +          nodecolor=profitloss;
20379 +        %end;
20380 +      %end;
20382 +    end;
20383 +    %end;
20384 +    %if &em_intTarget eq Y %then %do;
20385 +     drop  PREDICTION  TARGET TARLEVEL
20386 +     %if &ValidFlag eq Y %then %do;
20387 +         VPREDICTION
20388 +     %end;
20389 +     ;
20390 +    %end;
20391 +    %if &em_classTarget eq Y %then %do;
20392 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
20393 +     %if &ValidFlag eq Y %then %do;
20394 +         VSTATVALUE
20395 +     %end;
20396 +     ;
20397 +    %end;
20399 +  run;
20401 +  /* add leaf index information to plotds - based on primary target only*/
20402 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20403 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20404 +      set &EM_USER_OUTSTATS;
20405 +      if ((statname="PROBABILITY"
20406 +      %if &validexist %then %do;
20407 +       or statname="VALID: PROBABILITY"
20408 +      %end;
20409 +      ) AND (CATEGORY="&TARGETEVENT")
20410 +      %if "&multipleTar" eq "Y" %then %do;
20411 +        AND (Target="%EM_TARGET")
20412 +      %end;
20413 +      );
20414 +    run;
20416 +    %if &validexist %then %do;
20417 +      proc sort data=tempprob; by node; run;
20418 +      %let vpredTarget = V%substr(&predTarget, 2);
20419 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
20420 +         by node;
20421 +         id statname;
20422 +      run;
20423 +    %end;
20424 +  %end;
20425 +  %else %do;
20426 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20427 +      set &EM_USER_OUTSTATS;
20428 +      if ((statname="PREDICTION"
20429 +      %if &validexist %then %do;
20430 +       or statname="VALID: PREDICTION"
20431 +      %end;
20432 +      )
20433 +      %if "&multipleTar" eq "Y" %then %do;
20434 +        AND (Target="%EM_TARGET")
20435 +      %end;
20436 +      );
20437 +    run;
20438 +    %if &validexist %then %do;
20439 +      proc sort data=tempprob; by node; run;
20440 +      %let vpredTarget = V%substr(&predTarget, 2);
20441 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
20442 +         by node;
20443 +         id statname;
20444 +      run;
20445 +    %end;
20446 +  %end;
20448 +  proc sort data=tempprob; by node; run;
20449 +  data tempoutnodes;
20450 +    merge tempoutnodes tempprob;
20451 +    by node;
20452 +  run;
20454 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
20455 +  data tempnodes;
20456 +    retain traintotal validtotal;
20457 +    set tempnodes(where=(leaf ne . ));
20458 +    tprob=round(&predTarget, .01);
20459 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20460 +      percevent_train=round(tprob*100, .01);
20461 +    %end;
20462 +    %else %do;
20463 +      percevent_train=tprob;
20464 +    %end;
20466 +    perc_train=round((n/traintotal)*100, 0.01);
20467 +    /* leafwidth already has a *10 multiplier */
20468 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
20470 +    %if &validexist %then %do;
20471 +      %let vpredTarget = V%substr(&predTarget,2);
20472 +      vprob=round(&vpredTarget, .01);
20473 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20474 +        percevent_valid=round(vprob*100, .01);
20475 +      %end;
20476 +      %else %do;
20477 +        percevent_valid=vprob;
20478 +      %end;
20479 +      perc_valid=round((vn/validtotal)*100, .01);
20480 +    %end;
20482 +    index=_N_;
20483 +    keep node index tprob perc_train percevent_train
20484 +    %if &validexist %then %do;
20485 +        vprob percevent_valid perc_valid
20486 +    %end;
20487 +    ;
20488 +  run;
20489 +  proc sort data=tempnodes; by node; run;
20490 +  data &EM_USER_TREE_PLOT;
20491 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
20492 +    by node;
20493 +    if missing(node) then delete;
20494 +    %if &oldexists %then %do;
20495 +      if missing(nodecolor) then nodecolor=oldnodecolor;
20496 +      drop oldnodecolor;
20497 +    %end;
20498 +    abovetext = compbl(abovetext);
20500 +    /* add variable labels */
20501 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
20502 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
20503 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
20504 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
20505 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
20506 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
20508 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20509 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
20510 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
20511 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20512 +          %end;
20513 +          %else %do;
20514 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
20515 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
20516 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20517 +          %end;
20518 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
20520 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
20521 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
20522 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20523 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
20524 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20525 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
20526 +          %end;
20527 +          %else %do;
20528 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
20529 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20530 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
20531 +          %end;
20532 +    ;
20533 +  run;
20535 +  /* delete temporary tables */
20536 +  proc datasets lib=work nolist;
20537 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
20538 +  run;
20540 +%mend em_tree_makePlotDs;
20544 +%macro em_tree_report;
20546 +   /* report properties */
20547 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
20548 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
20549 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
20550 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
20551 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
20552 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
20553 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
20554 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
20555 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
20556 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
20557 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
20558 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
20559 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
20561 +   %let validexist=0;
20562 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
20563 +     %let validexist=1;
20564 +   %end;
20566 +   /* determine if multiple targets will be processed */
20567 +   %let em_tree_multipleTargets=N;
20568 +   %let em_tree_numTarget=1;
20569 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
20570 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
20571 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
20572 +         %let em_tree_multipleTargets=N;
20573 +      %end;
20574 +      %else %do;
20575 +        data _null_;
20576 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
20577 +          if eof then
20578 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
20579 +        run;
20581 +        %if &em_tree_numTarget gt 1 %then %do;
20582 +           %let em_tree_multipleTargets=Y;
20583 +        %end;
20584 +     %end;
20585 +   %end;
20587 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
20589 +   /* variable importance */
20590 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
20591 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
20593 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
20594 +     /* and the columns may not be generated                                                                                 */
20595 +     %let em_tree_cvexists=;
20596 +     %let em_tree_surrexists=.;
20597 +     data _null_;
20598 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
20599 +       if eof then do ;
20600 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
20601 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
20602 +       end;
20603 +     run;
20605 +     data &EM_USER_OUTIMPORT;
20606 +         set &EM_USER_OUTIMPORT;
20607 +         /* format columns based on Precison value specified */
20608 +         format importance 15.&EM_PROPERTY_PRECISION
20609 +              %if &validexist %then %do;
20610 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
20611 +              %end;
20612 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
20613 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
20614 +              %end;
20615 +         ;
20616 +     run;
20618 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
20619 +     proc print data=&EM_USER_OUTIMPORT
20620 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
20621 +          (where=((nrules>0) OR (nsurrogates>0)))
20622 +        %end;
20623 +        %else %do;
20624 +           (where=(nrules>0))
20625 +        %end;
20626 +        label noobs
20627 +        ;
20628 +     run;
20629 +     title10;
20631 +   %end;
20633 +   /* Sequence */
20634 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
20635 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
20636 +   data _null_ ;
20637 +      set &EM_USER_outseq (obs=2) end=eof ;
20638 +      if eof then do ;
20639 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
20640 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
20641 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
20642 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
20643 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
20644 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
20645 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
20646 +      end;
20647 +    run;
20649 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
20650 +      data &EM_USER_OUTSEQ;
20651 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
20652 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
20653 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20654 +           _XMISC_=_VMISC_
20655 +        %end;
20656 +        %if "&em_tree_aprof" ne "."  %then %do;
20657 +           _XAPROF_=_VAPROF_
20658 +           _XPROF_ = _VPROF_
20659 +        %end;
20660 +        %if "&em_tree_aloss" ne "."  %then %do;
20661 +           _XALOSS_=_VALOSS_
20662 +        %end;
20663 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
20664 +           _XPASE_ = _VPASE_
20665 +           _XPMISC_ = _VPMISC_
20666 +        %end;
20668 +        ));
20669 +     %end;
20670 +     %else %do;
20671 +        set &EM_USER_OUTSEQ;
20672 +     %end;
20674 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
20675 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20676 +            _MISC_   15.&EM_PROPERTY_PRECISION
20677 +         %end;
20678 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
20679 +            _PASE_  15.&EM_PROPERTY_PRECISION
20680 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
20681 +         %end;
20682 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
20683 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
20684 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20685 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20686 +            %end;
20687 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
20688 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20689 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20690 +            %end;
20691 +         %end;
20692 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20693 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20694 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20695 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20696 +            %end;
20697 +         %end;
20698 +         %if "&em_tree_seq" ne "." %then %do;
20699 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20700 +         %end;
20701 +         %if "&em_tree_vseq" ne "." %then %do;
20702 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20703 +         %end;
20704 +         %if "&em_tree_aprof" ne "." %then %do;
20705 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20706 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20707 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20708 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20709 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20710 +           %end;
20711 +         %end;
20712 +         %else %if "&em_tree_aloss" ne "." %then %do;
20713 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
20714 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20715 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
20716 +           %end;
20717 +         %end;
20718 +      ;
20719 +    run;
20720 +   %end;
20722 +   /* Observation Based Importance */
20723 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
20725 +      /* need to check for 0 obs */
20726 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
20727 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
20728 +      %let rc=%sysfunc(close(&dsid));
20730 +      %if &onobs %then %do;
20731 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
20732 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
20734 +         data &EM_USER_OUTOBSIMP;
20735 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20736 +           if _a;
20737 +           by _INPUT1_;
20738 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20739 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20740 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20741 +                   %end;
20742 +                   ;
20743 +         run;
20744 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20745 +      %end;
20746 +   %end;
20748 +  %end;
20750 +  /* create dataset to support tree diagram and icicle plot */
20751 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20752 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20754 +  /* display tree diagram */
20755 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20756 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20758 +  /* display icicle diagram */
20759 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20760 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20762 +  /* Leaf Statistics Plot */
20763 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20765 +  /* print leaf information to output window */
20766 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20768 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20769 +       by descending N;
20770 +     run;
20772 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20773 +     %local vn;
20774 +     data _null_;
20775 +       set t (obs=2) end=eof;
20776 +       if eof then do;
20777 +         call symput("vn", strip(put(vn, best.)));
20778 +       end;
20779 +     run;
20781 +     data t;
20782 +       set t;
20783 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20784 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20785 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20786 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20787 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20788 +       %end;
20789 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20790 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20791 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20792 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20793 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20794 +          %end;
20795 +       %end;
20796 +       ;
20797 +     run;
20799 +     /* determine if rase is found in t */
20800 +    %let dsid=%sysfunc(open(t,i));
20801 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20802 +    %let rc=%sysfunc(close(&dsid));
20804 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20805 +     proc print data=t noobs label;
20806 +       where tprob ne .;
20807 +       var node depth N tprob
20808 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20809 +         %if "&vn" ne "." %then %do;
20810 +           VN
20811 +         %end;
20812 +         vprob
20813 +       %end;
20814 +       %if &raseexists %then %do;
20815 +            RASE
20816 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20817 +              VRASE
20818 +            %end;
20819 +       %end;
20820 +       ;
20821 +     run;
20822 +     title10;
20823 +  %end;
20825 +  /* create plots that are done during training of node */
20826 +  /* display iterative plot, including reference line */
20827 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20828 +   /* %if &nleaves eq  %then %do; */
20829 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20830 +      data _null_;
20831 +        set &EM_USER_OUTTOPOLOGY end=eof;
20832 +        if eof then do;
20833 +          call symput('nleaves', LEAF);
20834 +        end;
20835 +      run;
20836 +   /* %end; */
20838 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20839 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20840 +  %end;
20842 +  /* display leaf statistics */
20843 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20845 +  /* stats by node if multiple targets = Y */
20846 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20847 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20848 +    data &EM_USER_OUTSTATS;
20849 +      set &EM_USER_OUTSTATS;
20851 +     * if STATNAME="TARGET" then delete;
20852 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20853 +      drop leaf;
20854 +    run;
20855 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20857 +  %end;
20858 +  %else %do;
20859 +    /* add outstats and outdescribe to spk but not results */
20860 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20861 +  %end;
20863 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.TREE4_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 73 observations read from the data set EMWS1.TREE4_OUTSEQ.
NOTE: The data set EMWS1.TREE4_OUTSEQ has 73 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set EMWS1.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 38 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 38 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 38 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set EMWS1.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 87 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 87 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      155:103   204:136   247:102   247:125   279:104   313:104   355:103   355:126   398:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      414:99
NOTE: There were 87 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 112 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1793 observations read from the data set EMWS1.TREE4_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 38 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 112 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 112 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 38 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 113 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 113 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 112 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 113 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 38 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 113 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 113 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 113 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 38 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 113 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 38 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 113 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE4_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 678 observations read from the data set EMWS1.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 678 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 678 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 565 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 113 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 678 observations read from the data set EMWS1.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 678 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 678 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 113 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 678 observations and 6 variables.
NOTE: The data set WORK.TEMPCLASS has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 678 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 113 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 113 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 113 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 113 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 113 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      942:196   958:204   958:221
NOTE: There were 113 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 113 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 113 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set EMWS1.TREE4_TREE_PLOT has 113 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.23 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 678 observations read from the data set EMWS1.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 226 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 226 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 226 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 226 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 113 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 113 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 113 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 113 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 113 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 113 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 113 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 113 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 75 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 75 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 113 observations read from the data set EMWS1.TREE4_TREE_PLOT.
NOTE: There were 75 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE4_TREE_PLOT has 113 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 113 observations read from the data set EMWS1.TREE4_TREE_PLOT.
NOTE: The data set WORK.T has 113 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 113 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 113 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      316:141
NOTE: There were 113 observations read from the data set EMWS1.TREE4_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
20864
20865  *------------------------------------------------------------*;
20866  * End REPORT: Tree4;
20867  *------------------------------------------------------------*;
 
20868  /* Reset EM Options */
20869  options formchar="|----|+|---+=|-/\<>*";
20870  options nocenter ls=256 ps=10000;
20871  goptions reset=all device=GIF NODISPLAY;
 
20872  proc sort data=WORK.EM_USER_REPORT;
20873  by ID VIEW;
20874  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
20875  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20876  by NAME;
20877  run;
 
NOTE: There were 16 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 16 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
20878  proc sort data=EMWS1.Tree4_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20879  by NAME;
20880  run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE4_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 16 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20881  data WORK.ASSESS_META;
20882  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20883  by NAME;
20884  run;
 
NOTE: There were 16 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 16 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 16 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20885  data EM_temp_assessMeta;
20886  set EMWS1.Tree4_CMeta_TRAIN;
20887  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20888  run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
20889  data EM_temp_assessdata;
20890  set EMWS1.Tree4_TRAIN(keep=
20891  P_totalsal
20892  R_totalsal
20893  V_totalsal
20894  _WARN_
20895  totalsal
20896  );
20897  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 6616 observations read from the data set EMWS1.TREE4_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 6616 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
25228   data EM_temp_assessMeta;
25229   set EMWS1.Tree4_CMeta_TRAIN;
25230   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
25231   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
25232   data EM_temp_assessdata;
25233   set EMWS1.Tree4_VALIDATE(keep=
25234   P_totalsal
25235   R_totalsal
25236   V_totalsal
25237   _WARN_
25238   totalsal
25239   );
25240   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE4_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2835 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 2835 observations read from the data set EMWS1.TREE4_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2835 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
29581   %let _cn = %sysfunc(getoption(CENTER));
29582   options nocenter;
29583   proc print data=EMWS1.Tree4_EMREPORTFIT noobs label;
29584   var STAT LABEL TRAIN
29585   VALIDATE
29586   TEST
29587   ;
29588   by TARGET TARGETLABEL;
29589   title9 ' ';
29590   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
29591   run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE4_EMREPORTFIT.
NOTE: At least one W.D format was too small for the number to be printed. The decimal may be shifted by the "BEST" format.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
29592   title10;
29593   options &_cn;
 
29594   proc datasets library=EMWS1 nolist;
29595   modify Tree4_EMRANK;
29596   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
29597   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29598   run;
 
NOTE: MODIFY was successful for EMWS1.TREE4_EMRANK.DATA.
29599   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29600   %let _cn = %sysfunc(getoption(CENTER));
29601   options nocenter;
29602   proc print data=EMWS1.Tree4_EMRANK label noobs;
29603   var
29604   decile N _targetMean_ _meanP_;
29605   by
29606   notsorted DATAROLE
29607   notsorted TARGET
29608   notsorted TARGETLABEL
29609   ;
29610   title9 ' ';
29611   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
29612   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE4_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
29613   title10;
29614   options &_cn;
 
29615   proc datasets library=EMWS1 nolist;
29616   modify Tree4_EMSCOREDIST;
29617   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
29618   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29619   run;
 
NOTE: MODIFY was successful for EMWS1.TREE4_EMSCOREDIST.DATA.
29620   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.00 seconds
 
 
