*------------------------------------------------------------*
User:                Intern Three
Date:                April 21, 2016
Time:                05:42:17
Site:                70085778
Platform:            X64_7HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 21, 2016
Time:                05:41:46
*------------------------------------------------------------*
14715  proc freq data=EMWS1.Tree5_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.Tree5META;
14717  run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE5_VARIABLESET.
NOTE: The data set WORK.TREE5META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
14718  proc print data=WORK.Tree5META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 8 observations read from the data set WORK.TREE5META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
"No decisions defined for target "totalsal"."
14726  proc print data = EMWS1.Ids_totalsal_DM noobs label;
14727  var _type_ variable label;
14728  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14729  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14730  title9 ' ';
14731  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14732  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
14733  title10;
 
14734  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15257  *------------------------------------------------------------*;
15258  * Tree5: Generation of macros and macro variables;
15259  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15260  *------------------------------------------------------------*;
 
15261  %let EMEXCEPTIONSTRING=;
15262  *------------------------------------------------------------*;
15263  * TRAIN: Tree5;
15264  *------------------------------------------------------------*;
15265  %let EM_ACTION = TRAIN;
15266  %let syscc = 0;
15267  %macro main;
15268
15269    %if %upcase(&EM_ACTION) = CREATE %then %do;
15270      filename temp catalog 'sashelp.emmodl.tree_create.source';
15271      %include temp;
15272      filename temp;
15273
15274      %em_tree_create;
15275    %end;
15276
15277     %else
15278     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15279
15280         filename temp catalog 'sashelp.emmodl.tree_train.source';
15281         %include temp;
15282         filename temp;
15283         %em_tree_train;
15284     %end;
15285
15286    %else
15287    %if %upcase(&EM_ACTION) = SCORE %then %do;
15288      filename temp catalog 'sashelp.emmodl.tree_score.source';
15289      %include temp;
15290      filename temp;
15291
15292      %em_tree_score;
15293
15294    %end;
15295
15296    %else
15297    %if %upcase(&EM_ACTION) = REPORT %then %do;
15298
15299         filename temp catalog 'sashelp.emmodl.tree_report.source';
15300         %include temp;
15301         filename temp;
15302
15303         %em_tree_report;
15304     %end;
15305
15306    %else
15307    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15308
15309         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15310         %include temp;
15311         filename temp;
15312         %EM_TREE_OPENTREEVIEWER;
15313
15314     %end;
15315
15316    %else
15317    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15318
15319         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15320         %include temp;
15321         filename temp;
15322         %EM_TREE_CLOSETREEVIEWER;
15323
15324     %end;
15325
15326
15327     %doendm:
15328  %mend main;
15329
15330  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15332 +%macro em_tree_train;
15334 +   %if &EM_IMPORT_DATA eq %then %do;
15335 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15336 +       %put &em_codebar;
15337 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15338 +       %put &errormsg;
15339 +       %put &em_codebar;
15340 +       %goto doendm;
15341 +   %end;
15342 +   %else
15343 +       %let EMEXCEPTIONSTRING =;
15345 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15346 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15347 +        %put &em_codebar;
15348 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15349 +        %put &errormsg;
15350 +        %put &em_codebar;
15351 +        %goto doendm;
15352 +   %end;
15354 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15355 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15356 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15357 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15358 +        %put &em_codebar;
15359 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15360 +        %put &errormsg;
15361 +        %put &em_codebar;
15362 +        %goto doendm;
15363 +   %end;
15365 +   /* Initialize property macro variables */
15366 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15367 +   %include temp;
15368 +   filename temp;
15370 +   %EM_SetProperties;
15372 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15373 +   %EM_GETNAME(key=EMTREE, type=DATA);
15374 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15375 +     /* if import eq Y and no importtable defined, throw an exception */
15376 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15377 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15378 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15379 +         %put &em_codebar;
15380 +         %put &errmsg;
15381 +         %put &em_codebar;
15382 +         %goto doendm;
15383 +      %end;
15384 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15385 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15386 +         %put &em_codebar;
15387 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15388 +         %put &errormsg;
15389 +         %put &em_codebar;
15390 +         %goto doendm;
15391 +      %end;
15392 +      %else %do;
15393 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15394 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15395 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15396 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15397 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15398 +         %let dsid = %sysfunc(close(&dsid));
15399 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15400 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15401 +            %put &em_codebar;
15402 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15403 +            %put &errormsg;
15404 +            %put &em_codebar;
15405 +            %goto doendm;
15406 +         %end;
15407 +      %end;
15408 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15409 +         proc delete data=&EM_USER_EMTREE;
15410 +         run;
15411 +      %end;
15412 +   %end;
15413 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15414 +      proc delete data=&EM_USER_EMTREE;
15415 +      run;
15416 +   %end;
15418 +   /* load tree macros */
15419 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15420 +   %include temp;
15421 +   filename temp;
15423 +   /* data sets */
15424 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15425 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15426 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15428 +   /* files */
15429 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15431 +   /* check actual num of target levels */
15432 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15433 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15434 +                              nLevel=_nTargetLevel );
15435 +      %if &_nTargetLevel  > 2 %then %do;
15436 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15437 +        %put &em_codebar;
15438 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15439 +        %put &errormsg;
15440 +        %put &em_codebar;
15441 +        %goto doendm;
15442 +      %end;
15443 +   %end;
15445 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15446 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15447 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15448 +        %let costflag=0;
15449 +        data _null_;
15450 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15451 +          if eof then call symput("costflag", _N_);
15452 +        run;
15453 +        %if &costflag gt 0 %then %do;
15454 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15455 +          %put &em_codebar;
15456 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15457 +          %put &errormsg;
15458 +          %put &em_codebar;
15459 +          %goto doendm;
15460 +       %end;
15461 +     %end;
15462 +   %end;
15464 +   /* determine if multiple targets will be processed */
15465 +   %let em_tree_multipleTargets=N;
15466 +   %let em_tree_numTarget = 1;
15467 +   %let em_tree_targetVars=;
15469 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15470 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15471 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15472 +         %let em_tree_multipleTargets=N;
15473 +      %end;
15474 +      %else %do;
15475 +         /* create macro array of targets  */
15476 +         data _null_;
15477 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15478 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15479 +           if eof then
15480 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15481 +        run;
15483 +        %if &em_tree_numTarget gt 1 %then %do;
15484 +           %let em_tree_multipleTargets=Y;
15485 +        %end;
15486 +      %end;
15487 +   %end;
15489 +   /* create view of only necessary variable for performance reasons */
15490 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15491 +   data &tempData / view=&tempData;
15492 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15493 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15494 +       %EM_TARGET
15495 +     %end;
15496 +     %else %do;
15497 +       %if &em_tree_numTarget ne 0 %then %do;
15498 +         %do i=1 %to &em_tree_numTarget;
15499 +            &&em_tree_targetVars&i
15500 +         %end;
15501 +       %end;
15502 +     %end;
15503 +     );
15504 +   run;
15506 +   /* run Tree procedure */
15507 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15509 +   /* Check return code and throw exception if error is detected */
15510 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15511 +   %if &syserr %then %do;
15512 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15513 +     %goto doendm;
15514 +   %end;
15516 +   /* add decision score code if multiple targets are processed */
15517 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15518 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15519 +   %end;
15521 +   /* create outfit dataset if multiple score statements have been executed */
15522 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15524 +   /* create English Rules */
15525 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15526 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15527 +       %em_tree_makeEnglishRules;
15529 +       /* English Rules */
15530 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15532 +     %end;
15533 +   filename x;
15535 +   %doendm:
15536 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15537 +%macro EM_SetProperties;
15539 +   /* train properties */
15540 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15541 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15542 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15543 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15544 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15545 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15546 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15547 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15548 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15549 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15550 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15551 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15552 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15553 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15554 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15555 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15556 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15557 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15558 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15559 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15560 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15561 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15562 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15563 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15564 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15565 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15566 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15567 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15568 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15569 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15570 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15571 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15572 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15573 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15574 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15575 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15576 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15577 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15578 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15579 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15580 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15582 +   /* properties for interactive sample */
15583 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15584 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15585 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15588 +   /* report properties */
15589 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15603 +   /* score properties */
15604 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15607 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE5_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15609 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15610 +  %global &nLevel;
15611 +  proc dmdb batch data=&indata
15612 +    classout=_tmp_dmdbout;
15613 +    class &target;
15614 +  run;
15615 +  data _tmp_dmdbout;
15616 +    set _tmp_dmdbout;
15617 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15618 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15619 +  run;
15620 +  data _null_;
15621 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15622 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15623 +    %let dsid = %sysfunc(close(&dsid));
15624 +     call symput("&nLevel", put(&_obs, Best12.));
15625 +  run;
15627 +  proc datasets lib=work nolist;
15628 +     delete _tmp_dmdbout;
15629 +  run;
15630 +  quit;
15631 +%Mend EM_CheckBinaryTargetLevel;
15634 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15636 +  /* determine the number of obs in training data */
15637 +  proc sql;
15638 +    reset noprint;
15639 +    select count(*) into :em_nobs from &indata;
15640 +  quit;
15642 +  /* determine the number of input variables */
15643 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15644 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15646 +  /* retrieve targetEvent from decmeta */
15647 +  %let targetEvent=;
15648 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15649 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15650 +      data _null_;
15651 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15652 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15653 +      run;
15654 +    %end;
15655 +  %end;
15657 +  /* create targetTable if multipleTar eq Y */
15658 +  data temptarget;
15659 +    set &EM_DATA_VARIABLESET;
15660 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15661 +  run;
15663 + /* data sets */
15664 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15665 + %EM_GETNAME(key=EMTREE,        type=DATA);
15666 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15667 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15668 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15669 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15670 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15671 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15672 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15673 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15675 + /* files */
15676 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15677 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15679 + /* turn on pmml if requested */
15680 + %let nnpmml=0;
15681 + %if %symexist(EM_PMML) %then %do;
15682 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15683 +       %let nnpmml=1;
15685 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15686 +%end;
15688 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15690 + %if &nnpmml or &numClassTarget %then %do;
15692 +       /* create dmdb needed for pmml generation */
15693 +       %let tree_maxlevel = 512;
15694 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15695 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15696 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15697 +         %end;
15698 +       %end;
15699 +       %if &tree_maxlevel gt 0 %then %do;
15700 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15701 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15702 +       %end;
15704 +       %let targetOrderString =;
15705 +       %let targetString = ;
15706 +       data _null_;
15707 +          length orderString nameString $10000;
15708 +          retain orderString nameString;
15709 +          set &em_data_variableset end=eof;
15710 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15711 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15712 +          %end;
15713 +          %else %do;
15714 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15715 +          %end;          select(order);
15716 +            when('')        order ='DESC';
15717 +            when('FMTASC')  order='ASCFMT';
15718 +            when('FMTDESC') order='DESFMT';
15719 +            otherwise;
15720 +          end;
15721 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15722 +          nameString = trim(nameString)!!' '!!trim(NAME);
15724 +          if eof then do;
15725 +             call symput('targetOrderString', trim(orderString));
15726 +             call symput('targetString', trim(nameString));
15727 +          end;
15728 +       run;
15730 +       %let arborkluge= "work._treeDMDB";
15732 +       proc dmdb batch data=&indata
15733 +       %if &nnpmml %then %do;
15734 +           PMML
15735 +       %end;
15736 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15739 +   %if &nnpmml %then %do;
15740 +        %if "%EM_ID" ne "" %then %do;
15741 +          id %EM_ID;
15742 +        %end;
15743 +        %if &EM_NUM_CLASS gt 0 %then %do;
15744 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15745 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15746 +               &targetOrderString;
15747 +        %end;
15748 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15749 +          var %EM_INTERVAL;
15750 +        %end;
15751 +        target &targetString %EM_INTERVAL_TARGET;
15752 +        %if "%EM_FREQ" ne "" %then %do;
15753 +          freq %EM_FREQ;
15754 +        %end;
15755 +  %end;
15756 +  %else %do;
15757 +      class  &targetOrderString;
15758 +      target &targetString %EM_INTERVAL_TARGET;
15759 +  %end;
15760 +       run;
15761 +       quit;
15763 +       proc datasets lib=work nolist;
15764 +          delete classout varout;
15765 +       run;
15766 +       quit;
15768 +    %end;
15769 + %end;
15771 + /* run Arbor procedure */
15772 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15773 +  proc arbor data=&INDATA
15775 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15776 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15777 +  %end;
15779 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15780 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15781 +  %end;
15783 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15784 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15785 +  %end;
15787 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15788 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15789 +  %end;
15791 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15792 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15793 +  %end;
15795 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15796 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15797 +  %end;
15798 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15799 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15800 +  %end;
15801 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15802 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15803 +  %end;
15805 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15806 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15807 +      alpha = &EM_PROPERTY_SIGLEVEL
15808 +    %end;
15809 +  %end;
15811 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15812 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15813 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15814 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15815 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15817 +        padjust =
15818 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15819 +          &chaid
15820 +        %end;
15821 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15822 +          DEPTH
15823 +        %end;
15824 +      %end;
15825 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15826 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15827 +         pvars = &num_inputs
15828 +      %end;
15829 +    %end;
15830 +  %end;
15831 +  %else %do;
15832 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15833 +         padjust = NONE
15834 +      %end;
15835 +  %end;
15837 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15838 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15839 +    Maxrules = &num_nrules
15840 +  %end;
15842 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15843 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15844 +    Maxsurrs = &num_nsurrs
15845 +  %end;
15847 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15848 +     Missing=&EM_PROPERTY_MISSINGVALUE
15849 +  %end;
15851 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15852 +     USEVARONCE
15853 +  %end;
15855 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15856 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15857 +  %end;
15860 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15861 +    event = "&targetEvent"
15862 +  %end;
15864 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15865 +     DECSEARCH
15866 +  %end;
15868 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15869 +     PRIORSSEARCH
15870 +  %end;
15872 +  %if &arbor_1 ne %then %do;
15873 +    &arbor_1
15874 +  %end;
15876 +  %if &em_arbor ne %then %do;
15877 +     &em_arbor
15878 +  %end;
15879 +  ;
15880 + %end;
15881 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15882 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15883 +       interact;
15884 + %end;
15885 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15886 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15887 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15888 +    %put &em_codebar;
15889 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15890 +    %put &errormsg;
15891 +    %put &em_codebar;
15892 +    %goto doendm;
15893 +   %end;
15894 +   %else %do;
15895 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15896 +       interact;
15897 +   %end;
15898 + %end;
15900 + %else %do;
15901 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15902 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15903 +    %put &em_codebar;
15904 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15905 +    %put &errormsg;
15906 +    %put &em_codebar;
15907 +    %goto doendm;
15908 +   %end;
15909 +   %else %do;
15910 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15911 +        interact;
15912 +   %end;
15913 + %end;
15915 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15916 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15917 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15918 +    %end;
15920 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15921 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15922 +    %end;
15924 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15925 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15926 +    %end;
15928 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15929 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15930 +    %end;
15932 +    %if "%EM_FREQ" ne "" %then %do;
15933 +       freq %EM_FREQ;
15934 +    %end;
15936 +    %if "&multipleTar" eq "Y" %then %do;
15937 +       /* cycle through all target vars in variableset */
15938 +       %let tdsid = %sysfunc(open(temptarget));
15939 +       %if &tdsid %then %do;
15940 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15941 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15942 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15943 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15944 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15945 +             target &var / level = &lvl
15946 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15947 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15948 +             %end;
15949 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15950 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15951 +             %end;
15952 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15953 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15954 +             %end;
15955 +          %end;
15956 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
15957 +       %end;
15958 +       useTarget variable = %EM_TARGET;
15959 +    %end;
15960 +    %else %do;
15961 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
15962 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
15963 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
15964 +      %end;
15965 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15966 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
15967 +      %end;
15968 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15969 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
15970 +      %end;
15971 +    %end;
15973 +    %if "&multipleTar" eq "N" %then %do;
15974 +      &EM_DEC_STATEMENT;
15975 +    %end;
15977 +    Performance &EM_PROPERTY_PERFORMANCE
15978 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
15979 +      nodesize=&EM_PROPERTY_NODESAMPLE
15980 +    %end;
15981 +    ;
15983 +    %if "&intFlag" eq "Y" %then %do;
15984 +       INTERACT Largest;
15985 +       Train maxnewdepth=0;
15986 +    %end;
15988 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
15989 +         Assess
15990 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
15991 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
15992 +              %put &em_codebar;
15993 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
15994 +              %put &errormsg;
15995 +              %put &em_codebar;
15996 +            %end;
15997 +            %else %do;
15998 +               Validata=&EM_IMPORT_VALIDATE
15999 +            %end;
16000 +         %end;
16001 +         %else %do;
16002 +           NoValidata
16003 +         %end;
16004 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16005 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16006 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16007 +               %if &dsid %then %do;
16008 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16009 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16010 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16011 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16012 +                   %else %do;
16013 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16014 +                      %else %let measure= MISC;
16015 +                   %end;
16016 +                 %end;
16017 +               %end;
16018 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16019 +            %end;
16020 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16021 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16022 +                 %let measure=ASE;
16023 +              %end;
16024 +              %else %do;
16025 +                 %let measure=MISC;
16026 +              %end;
16027 +            %end;
16028 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16029 +              %let measure=ASE;
16030 +            %end;
16031 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16032 +               %let measure = LIFT;
16033 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16034 +               %if &dsid %then %do;
16035 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16036 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16037 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16038 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16039 +                 %end;
16040 +               %end;
16041 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16042 +            %end;
16043 +            measure=&measure
16044 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16045 +               event = "&targetEvent"
16046 +            %end;
16047 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16048 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16049 +            %end;
16050 +         %end;
16051 +         %if "&multipleTar" eq "N" %then %do;
16052 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16053 +               CV
16054 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16055 +                 CVNITer = &EM_PROPERTY_CVNITER
16056 +               %end;
16057 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16058 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16059 +               %end;
16060 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16061 +                 CVSeed = &EM_PROPERTY_CVSEED
16062 +               %end;
16063 +            %end;
16064 +         %end;
16065 +       %end;
16066 +      ;
16068 +      %if "&intFlag" ne "Y" %then %do;
16069 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16070 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16071 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16072 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16074 +          SUBTREE &subtree
16075 +          %if "&subtree" eq "NLEAVES" %then %do;
16076 +            =&EM_PROPERTY_NSUBTREE
16077 +          %end;
16078 +          ;
16079 +        %end;
16081 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16082 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16083 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16084 +          %end;
16085 +       %end;
16086 +      %end;
16087 + %end;
16090 + MakeMacro nleaves = nleaves;
16091 + save
16092 + %if "&EM_USER_EMTREE" ne "" %then %do;
16093 +   MODEL=&EM_USER_EMTREE
16094 + %end;
16095 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16096 +   SEQUENCE=&EM_USER_OUTSEQ
16097 + %end;
16098 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16099 +   IMPORTANCE=&EM_USER_OUTIMPORT
16100 + %end;
16101 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16102 +   NODESTAT=&EM_USER_OUTNODES
16103 + %end;
16104 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16105 +   SUMMARY=&EM_USER_OUTSUMMARY
16106 + %end;
16107 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16108 +   STATSBYNODE=&EM_USER_OUTSTATS
16109 + %end;
16110 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16111 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16112 + %end;
16113 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16114 +   Pathlistnonmissing=&EM_USER_OUTPATH
16115 + %end;
16116 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16117 +   RULES = &EM_USER_OUTRULES
16118 + %end;
16119 + ;
16121 + %if "&intFlag" ne "Y" %then %do;
16123 +   %let lookupString = ;
16124 +   %if ^%symexist(EM_OPTION) %then
16125 +      %let EM_OPTION=;
16127 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16128 +      %let lookupString = LOOKUP=SELECT;
16129 +   %end;
16131 +   %let codetext=;
16132 +   %let norescodetxt=;
16134 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16135 +     %let codetext=&codetext DUMMY;
16136 +     %let norescodetxt=&norescodetxt DUMMY;
16137 +   %end;
16138 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16139 +     %let codetext=&codetext NOLEAFID;
16140 +     %let norescodetxt=&norescodetxt NOLEAFID;
16141 +   %end;
16142 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16143 +     %let norescodetxt=&norescodetxt NOPRED;
16144 +   %end;
16146 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16147 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16149 +   %if &nnpmml %then %do;
16150 +     code pmml;
16151 +   %end;
16153 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16154 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16155 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16156 +   %end;
16157 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16158 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16159 +   %end;
16160 + %end;
16162 + run;
16163 + quit;
16165 + /*%em_checkerror(); */
16166 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16167 +   /* Delete DMDB catalog */
16168 +   proc datasets lib=work nolist;
16169 +       delete _treeDMDB / mt=cat;
16170 +  run;
16171 +  %end;
16173 + %if &nnpmml %then %do;
16174 +    ods pmml close;
16175 + %end;
16177 +  %doendm:
16179 +%mend em_tree_runTreeProcedure;
16181 +%macro em_tree_createFitStats( multipleTar= );
16184 +  /* create targetTable is multipleTar eq Y */
16185 +  data temptarget;
16186 +    set &EM_DATA_VARIABLESET;
16187 +    where ROLE="TARGET";
16188 +  run;
16190 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16191 +   data &EM_USER_EMOUTFIT;
16192 +     length target $32;
16193 +     merge work.fit_train
16194 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16195 +       work.fit_valid
16196 +     %end;
16197 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16198 +       work.fit_test
16199 +     %end;
16200 +     ;
16201 +     %if "&multipleTar" eq "N" %then %do;
16202 +       target="%EM_TARGET";
16203 +     %end;
16204 +     %else %do;
16205 +       target = _TARGET_;
16206 +     %end;
16207 +     drop _NW_ _SUMW_
16208 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16209 +        _VSUMW_
16210 +     %end;
16211 +     ;
16212 +   run;
16214 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16215 +     proc datasets library=work nolist;
16216 +       delete fit_valid;
16217 +     run;
16218 +   %end;
16219 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16220 +     proc datasets library=work nolist;
16221 +       delete fit_test;
16222 +     run;
16223 +   %end;
16225 +%mend em_tree_createFitStats;
16228 +%macro em_tree_makeEnglishRules;
16230 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16231 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16233 +  /* verify that necessary tables exist and if not, skip processing */
16234 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16235 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16236 +    %goto doendm;
16237 +  %end;
16238 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16239 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16240 +    %goto doendm;
16241 +  %end;
16243 +  /* determine length of variable in outpath dataset */
16244 +  %let vlength= ;
16245 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16246 +  %if &dsid ne %then %do;
16247 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16248 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16249 +  %end;
16250 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16252 +  data tempoutpath;
16253 +    length varname $&vlength;
16254 +    retain varname;
16255 +    set &EM_USER_OUTPATH;
16257 +    if ^missing(variable) then varname=variable;
16258 +    else if ^missing(var_name) then varname=var_name;
16259 +    output;
16260 +  run;
16262 +  /* create an array of generated predicted variable names */
16263 +  %let tree_pred_vars = ;
16264 +  %let tree_pred_label = ;
16265 +  %let numpred= 0;
16266 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16268 +    data _null_;
16269 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16270 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16271 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16272 +     if eof then
16273 +       call symput('numpred', strip(put(_N_, BEST.)));
16274 +    run;
16275 +  %end;
16277 +  /* determine if NPRIORS exists in outnodes  */
16278 +  %local nprior_flag;
16279 +  data _null_;
16280 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16281 +    if eof then do;
16282 +      call symput('nprior_flag', strip(put(npriors, best.)));
16283 +    end;
16284 +  run;
16286 +  proc sort data=tempoutpath; by node; run;
16287 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16289 +  data tempoutpath;
16290 +    merge tempoutpath(in=_a) outnodes(keep= node
16291 +    %if "&nprior_flag" ne "." %then %do;
16292 +      NPRIORS
16293 +    %end;
16294 +    %else %do;
16295 +      N
16296 +    %end;
16297 +    %if &numpred gt 0 %then %do;
16298 +      %do i=1 %to &numpred;
16299 +        &&tree_pred_vars&i
16300 +      %end;
16301 +    %end;
16302 +    );
16303 +    by node;
16304 +    if _a;
16305 +  run;
16307 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16309 +  data _null_;
16310 +    file x;
16311 +    set tempoutpath;
16312 +    by node descending varname;
16313 +    retain origvar oldnode string;
16314 +    length origvar $32 oldnode 8 string $200;
16316 +    if _N_ = 1 then do;
16317 +      origvar = varname;
16318 +      oldnode = node;
16319 +    end;
16321 +    if first.node then do;
16322 +       put "&EM_CODEBAR";
16323 +       put " Node = " node;
16324 +       put "&EM_CODEBAR";
16325 +    end;
16327 +      if first.varname then do;
16328 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16329 +            if MISSING(CHARACTER_VALUE) then do;
16330 +             if NUMERIC_VALUE ne .  then do;
16331 +              if ^first.node then do;
16332 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16333 +              end;
16334 +              else do;
16335 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16336 +              end;
16337 +             end;
16338 +            end;
16339 +            else do;
16340 +              if ^first.node then do;
16341 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16342 +              end;
16343 +              else do;
16344 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16345 +              end;
16346 +             end;
16347 +         end;
16348 +         else if RELATION in ("=") then do;
16349 +            if ^first.node then do;
16350 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16351 +            end;
16352 +            else do;
16353 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16354 +            end;
16355 +         end;
16356 +         else if RELATION in ("ISMISSING") then do;
16357 +            if ^first.node then do;
16358 +              string = " AND "|| strip(varname) || " equals Missing";
16359 +            end;
16360 +            else do;
16361 +              string = "if "|| strip(varname) ||" equals Missing";
16362 +            end;
16363 +         end;
16364 +         else if RELATION in ("ISNOTMISSING") then do;
16365 +            if ^first.node then do;
16366 +              string = " AND "|| strip(varname) || " equals All Values";
16367 +            end;
16368 +            else do;
16369 +              string = "if "|| strip(varname) ||" equals All Values";
16370 +            end;
16371 +         end;
16372 +         if ^missing(varname) then origvar = varname;
16373 +         oldnode=node;
16375 +      end;
16376 +      else do;
16377 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16378 +          if MISSING(CHARACTER_VALUE) then do;
16379 +           if  NUMERIC_VALUE ne .  then do;
16380 +            if ^MISSING(string) then
16381 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16382 +            else
16383 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16384 +           end;
16385 +          end;
16386 +          else do;
16387 +            if ^MISSING(string) then
16388 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16389 +            else
16390 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16391 +          end;
16393 +         end;
16394 +         else if RELATION in ("=") then do;
16395 +           string = strip(string)||", "||strip(character_value);
16396 +         end;
16397 +         else if RELATION in ("ISMISSING") then do;
16399 +         end;
16400 +         if ^missing(varname) then origvar = varname;
16401 +         oldnode=node;
16402 +      end;
16403 +      if last.varname then do;
16404 +         if RELATION in ("ISMISSING") then do;
16405 +           if ^first.varname then do;
16406 +             string = strip(string) || " or MISSING";
16407 +           end;
16408 +         end;
16409 +         put string;
16410 +         if ^missing(varname) then origvar = varname;
16411 +         oldnode=node;
16412 +      end;
16414 +      if last.node then do;
16415 +         put "then ";
16416 +         put " Tree Node Identifier   = " node;
16418 +         %if "&nprior_flag" ne "." %then %do;
16419 +           put " Number of Observations = " NPRIORS;
16420 +         %end;
16421 +         %else %do;
16422 +           put " Number of Observations = " N;
16423 +         %end;
16425 +         %if &numpred gt 0 %then %do;
16426 +           %do i=1 %to &numpred;
16427 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16428 +           %end;
16429 +         %end;
16431 +         put " ";
16432 +         if ^missing(varname) then origvar = varname;
16433 +         oldnode=node;
16434 +      end;
16436 +  run;
16438 +  proc datasets lib=work nolist;
16439 +    delete tempoutpath outnodes;
16440 +  run;
16442 +  %doendm:
16443 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE5.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.EM_TREE5.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE5_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596892 kilobytes of physical memory.
NOTE: Will use 6616 out of 6616 training cases.
NOTE: Using memory pool with 146240512 bytes.
NOTE: Will not search for split on variable campus.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 20 times.
NOTE: Training used 2181040 bytes of work memory.
NOTE: The subtree sequence contains 65 subtrees. The largest has 129 nodes and 65 leaves.
NOTE: Using subtree with 123 nodes and 62 leaves.
NOTE: Using subtree with 123 nodes and 62 leaves.
NOTE: Created macro variable NLEAVES equal to 62.
NOTE: The data set EMWS1.TREE5_OUTIMPORT has 12 observations and 6 variables.
NOTE: The data set EMWS1.TREE5_EMTREE has 5547 observations and 4 variables.
NOTE: The data set EMWS1.TREE5_OUTNODES has 123 observations and 16 variables.
NOTE: The data set EMWS1.TREE5_OUTPATH has 409 observations and 7 variables.
NOTE: The data set EMWS1.TREE5_OUTRULES has 2338 observations and 6 variables.
NOTE: The data set EMWS1.TREE5_OUTSEQ has 65 observations and 18 variables.
NOTE: The data set EMWS1.TREE5_OUTSTATS has 738 observations and 4 variables.
NOTE: The data set EMWS1.TREE5_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE5_OUTTOPOLOGY has 123 observations and 5 variables.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\TREEFLOW.sas opened.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS1.EM_TREE5.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
 
 
NOTE: View EMWS1.EM_TREE5.VIEW used (Total process time):
      real time           4.21 seconds
      cpu time            0.77 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 6616 observations read from the data set EMWS1.EM_TREE5.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           4.54 seconds
      cpu time            0.79 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE5_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE5_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 409 observations read from the data set EMWS1.TREE5_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 409 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE5_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 409 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 409 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 123 observations read from the data set EMWS1.TREE5_OUTNODES.
NOTE: The data set WORK.OUTNODES has 123 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 409 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 123 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 409 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 409 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 409 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=21Apr2016:05:41:56,
      Create Time=21Apr2016:05:41:56
 
NOTE: 626 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 200.
NOTE: There were 409 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.04 seconds
 
 
NOTE: Fileref X has been deassigned.
16445
16446  *------------------------------------------------------------*;
16447  * End TRAIN: Tree5;
16448  *------------------------------------------------------------*;
 
16449  *------------------------------------------------------------*;
16450  * Close any missing semi colons;
16451  *------------------------------------------------------------*;
16452  ;
16453  ;
16454  ;
16455  ;
16456  quit;
16457  *------------------------------------------------------------*;
16458  * Close any unbalanced quotes;
16459  *------------------------------------------------------------*;
16460  /*; *"; *'; */
16461  ;
16462  run;
16463  quit;
16464  /* Reset EM Options */
16465  options formchar="|----|+|---+=|-/\<>*";
16466  options nocenter ls=256 ps=10000;
16467  goptions reset=all device=GIF NODISPLAY;
 
16468  proc sort data=WORK.EM_USER_REPORT;
16469  by ID VIEW;
16470  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 21, 2016
Time:                05:41:58
*------------------------------------------------------------*
16572  %let EMEXCEPTIONSTRING=;
16573  *------------------------------------------------------------*;
16574  * SCORE: Tree5;
16575  *------------------------------------------------------------*;
16576  %let EM_ACTION = SCORE;
16577  %let syscc = 0;
16578  %macro main;
16579
16580    %if %upcase(&EM_ACTION) = CREATE %then %do;
16581      filename temp catalog 'sashelp.emmodl.tree_create.source';
16582      %include temp;
16583      filename temp;
16584
16585      %em_tree_create;
16586    %end;
16587
16588     %else
16589     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16590
16591         filename temp catalog 'sashelp.emmodl.tree_train.source';
16592         %include temp;
16593         filename temp;
16594         %em_tree_train;
16595     %end;
16596
16597    %else
16598    %if %upcase(&EM_ACTION) = SCORE %then %do;
16599      filename temp catalog 'sashelp.emmodl.tree_score.source';
16600      %include temp;
16601      filename temp;
16602
16603      %em_tree_score;
16604
16605    %end;
16606
16607    %else
16608    %if %upcase(&EM_ACTION) = REPORT %then %do;
16609
16610         filename temp catalog 'sashelp.emmodl.tree_report.source';
16611         %include temp;
16612         filename temp;
16613
16614         %em_tree_report;
16615     %end;
16616
16617    %else
16618    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16619
16620         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16621         %include temp;
16622         filename temp;
16623         %EM_TREE_OPENTREEVIEWER;
16624
16625     %end;
16626
16627    %else
16628    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16629
16630         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16631         %include temp;
16632         filename temp;
16633         %EM_TREE_CLOSETREEVIEWER;
16634
16635     %end;
16636
16637
16638     %doendm:
16639  %mend main;
16640
16641  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16643 +%macro em_tree_score;
16645 +   /* determine if multiple targets will be processed */
16646 +   %let em_tree_multipleTargets=N;
16647 +   %let em_tree_numTarget=1;
16648 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16649 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16650 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16651 +         %let em_tree_multipleTargets=N;
16652 +      %end;
16653 +      %else %do;
16654 +         /* create macro array of targets  */
16655 +         data _null_;
16656 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16657 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16658 +           if eof then
16659 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16660 +        run;
16662 +        %if &em_tree_numTarget gt 1 %then %do;
16663 +           %let em_tree_multipleTargets=Y;
16664 +        %end;
16665 +      %end;
16666 +   %end;
16668 +   /* build flow and publish scoring code */
16669 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16670 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16672 +   filename treeflow "&EM_USER_TREEFLOW";
16673 +   filename treepub "&EM_USER_TREEPUBLISH";
16675 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16676 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16678 +   %em_copyfile(infref=treeflow, outfref=flowref);
16679 +   %em_copyfile(infref=treepub, outfref=pubref);
16681 +   filename treeflow;
16682 +   filename treepub;
16684 +   /* if priors are used, add code to generate unadjusted residuals in export */
16685 +   %let useAdjPriors = N;
16686 +   data _null_;
16687 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16688 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16689 +   run;
16690 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16691 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16692 +      %include temp;
16693 +      filename temp;
16695 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16696 +      filename adjref "&EM_USER_adjResidualCode";
16697 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16699 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16701 +      filename adjref;
16702 +   %end;
16704 +   /* LEAF */
16705 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16706 +      data _null_;
16707 +        file flowref mod;
16708 +        put 'drop _LEAF_;';
16709 +      run;
16711 +      data _null_;
16712 +        file pubref mod;
16713 +        put 'drop _LEAF_;';
16714 +      run;
16716 +   %end;
16718 +   filename flowref;
16719 +   filename pubref;
16721 +   /* em_metachange code */
16722 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16723 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16724 +   %end;
16726 +   /* variable selection based on importance stat    */
16727 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16728 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16729 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16730 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16731 +     %let obs = %sysfunc(fetch(&dsid));
16732 +     %do %while(&obs=0);
16733 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16734 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16735 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16736 +       %let obs = %sysfunc(fetch(&dsid));
16737 +     %end;
16738 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16739 +   %end;
16741 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16742 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16743 +    %let tree_pred_vars = ;
16744 +    %let tree_pred_lvl =;
16745 +    %let numpred= 0;
16747 +    data _null_;
16748 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16749 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16750 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16751 +     if eof then
16752 +       call symput('numpred', strip(put(_N_, BEST.)));
16753 +    run;
16754 +   %end;
16756 +   %if &numpred ne 0 %then %do;
16757 +    %do i=1 %to &numpred;
16758 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16759 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16760 +    %end;
16761 +   %end;
16763 +   /* determine if multiple targets will be processed */
16764 +   %let em_tree_multipleTargets=N;
16765 +   %let em_tree_numTarget=1;
16766 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16767 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16768 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16769 +         %let em_tree_multipleTargets=N;
16770 +      %end;
16771 +      %else %do;
16772 +        data _null_;
16773 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16774 +          if eof then
16775 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16776 +        run;
16778 +        %if &em_tree_numTarget gt 1 %then %do;
16779 +           %let em_tree_multipleTargets=Y;
16780 +        %end;
16781 +     %end;
16782 +   %end;
16784 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16785 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16787 +      /* variable importance */
16788 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16789 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16791 +         %let validexist=0;
16792 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16793 +           %let validexist=1;
16794 +         %end;
16796 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16797 +         /* and the columns may not be generated                                                                                 */
16798 +         %let em_tree_cvexists=;
16799 +         %let em_tree_surrexists=.;
16800 +         data _null_;
16801 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16802 +            if eof then do ;
16803 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16804 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16805 +            end;
16806 +         run;
16808 +         data &EM_USER_OUTIMPORT;
16809 +            set &EM_USER_OUTIMPORT;
16811 +            /* format columns based on Precison value specified */
16812 +            format importance 15.&EM_PROPERTY_PRECISION
16813 +                 %if &validexist %then %do;
16814 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16815 +                 %end;
16816 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16817 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16818 +                 %end;
16819 +            ;
16820 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16821 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16822 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16823 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16824 +                 %if "&em_tree_surrexists" ne "" %then %do;
16825 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16826 +                 %end;
16827 +                 %if &validexist %then %do;
16828 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16829 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16830 +                 %end;
16831 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16832 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16833 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16834 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16835 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16836 +                 %end;
16837 +            ;
16838 +         run;
16840 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16841 +      %end;
16842 +   %end;
16844 +   %doendm:
16845 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21Apr2016:05:41:58,
      Create Time=21Apr2016:05:41:58
 
NOTE: 592 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 75.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21Apr2016:05:41:58,
      Create Time=21Apr2016:05:41:58
 
NOTE: 587 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 75.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=23566,
      Last Modified=21Apr2016:05:41:58,
      Create Time=21Apr2016:05:41:58
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=23393,
      Last Modified=21Apr2016:05:41:58,
      Create Time=21Apr2016:05:41:58
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE5_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 12 observations read from the data set EMWS1.TREE5_OUTIMPORT.
NOTE: The data set EMWS1.TREE5_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
16846
16847  *------------------------------------------------------------*;
16848  * End SCORE: Tree5;
16849  *------------------------------------------------------------*;
 
16850  proc sort data=WORK.EM_METACHANGE;
16851  by key uname;
16852  run;
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16853  filename x "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\CDELTA_TRAIN.sas";
16854  data _null_;
16855  file x;
16856  put 'if upcase(NAME) = "AGE" then do;';
16857  put 'ROLE = "REJECTED";';
16858  put 'end;';
16859  put 'else ';
16860  put 'if upcase(NAME) = "CAMPUS" then do;';
16861  put 'ROLE = "REJECTED";';
16862  put 'end;';
16863  put 'else ';
16864  put 'if upcase(NAME) = "DEPT" then do;';
16865  put 'ROLE = "REJECTED";';
16866  put 'end;';
16867  put 'else ';
16868  put 'if upcase(NAME) = "EMPLOYED" then do;';
16869  put 'ROLE = "REJECTED";';
16870  put 'end;';
16871  put 'else ';
16872  put 'if upcase(NAME) = "EXEMPT2" then do;';
16873  put 'ROLE = "REJECTED";';
16874  put 'end;';
16875  put 'else ';
16876  put 'if upcase(NAME) = "FTE" then do;';
16877  put 'ROLE = "REJECTED";';
16878  put 'end;';
16879  put 'else ';
16880  put 'if upcase(NAME) = "GENDER" then do;';
16881  put 'ROLE = "REJECTED";';
16882  put 'end;';
16883  put 'else ';
16884  put 'if upcase(NAME) = "POSITION" then do;';
16885  put 'ROLE = "REJECTED";';
16886  put 'end;';
16887  put 'else ';
16888  put 'if upcase(NAME) = "Q_TOTALSAL" then do;';
16889  put 'ROLE = "ASSESS";';
16890  put 'end;';
16891  put 'else ';
16892  put 'if upcase(NAME) = "STATUS" then do;';
16893  put 'ROLE = "REJECTED";';
16894  put 'end;';
16895  put 'else ';
16896  put 'if upcase(NAME) = "STSERVYR" then do;';
16897  put 'ROLE = "REJECTED";';
16898  put 'end;';
16899  put 'else ';
16900  put 'if upcase(NAME) = "_NODE_" then do;';
16901  put 'ROLE = "SEGMENT";';
16902  put 'LEVEL = "NOMINAL";';
16903  put 'end;';
16904  run;
 
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:03,
      Create Time=20Apr2016:23:09:29
 
NOTE: 48 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
16905  filename x;
NOTE: Fileref X has been deassigned.
 
16906  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas";
16907  *------------------------------------------------------------*;
16908  * Tree5: Scoring DATA data;
16909  *------------------------------------------------------------*;
16910  data EMWS1.Tree5_TRAIN
16911  / view=EMWS1.Tree5_TRAIN
16912  ;
16913  set EMWS1.Part_TRAIN
16914  ;
16915  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas.
16916 +****************************************************************;
16917 +******             DECISION TREE SCORING CODE             ******;
16918 +****************************************************************;
16919 +
16920 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16921 +LENGTH _WARN_  $    4;
16922 +
16923 +******              LABELS FOR NEW VARIABLES              ******;
16924 +label _NODE_ = 'Node' ;
16925 +label _LEAF_ = 'Leaf' ;
16926 +label P_totalsal = 'Predicted: totalsal' ;
16927 +label V_totalsal = 'Validated: totalsal' ;
16928 +label R_totalsal = 'Residual: totalsal' ;
16929 +label _WARN_ = 'Warnings' ;
16930 +
16931 +
16932 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16933 +LENGTH _ARBFMT_30 $     30; DROP _ARBFMT_30;
16934 +_ARBFMT_30 = ' '; /* Initialize to avoid warning. */
16935 +LENGTH _ARBFMT_28 $     28; DROP _ARBFMT_28;
16936 +_ARBFMT_28 = ' '; /* Initialize to avoid warning. */
16937 +
16938 +
16939 +******             ASSIGN OBSERVATION TO NODE             ******;
16940 +IF  NOT MISSING(nonstsal ) AND
16941 +                115051 <= nonstsal  THEN DO;
16942 +  IF  NOT MISSING(nonstsal ) AND
16943 +                257529.5 <= nonstsal  THEN DO;
16944 +    IF  NOT MISSING(nonstsal ) AND
16945 +                  319837.5 <= nonstsal  THEN DO;
16946 +      _NODE_  =                   15;
16947 +      _LEAF_  =                   62;
16948 +      P_totalsal  =             430459.4;
16949 +      V_totalsal  =     417005.789473684;
16950 +      END;
16951 +    ELSE DO;
16952 +      _NODE_  =                   14;
16953 +      _LEAF_  =                   61;
16954 +      P_totalsal  =     298051.519480519;
16955 +      V_totalsal  =         291616.96875;
16956 +      END;
16957 +    END;
16958 +  ELSE DO;
16959 +    IF  NOT MISSING(nonstsal ) AND
16960 +                    180203 <= nonstsal  THEN DO;
16961 +      IF  NOT MISSING(nonstsal ) AND
16962 +        nonstsal  <             209437.5 THEN DO;
16963 +        _NODE_  =                   26;
16964 +        _LEAF_  =                   59;
16965 +        P_totalsal  =     205348.279069767;
16966 +        V_totalsal  =     203595.418604651;
16967 +        END;
16968 +      ELSE DO;
16969 +        _NODE_  =                   27;
16970 +        _LEAF_  =                   60;
16971 +        P_totalsal  =     243136.530973451;
16972 +        V_totalsal  =     245666.222222222;
16973 +        END;
16974 +      END;
16975 +    ELSE DO;
16976 +      IF  NOT MISSING(statesal ) AND
16977 +                      7640.5 <= statesal  THEN DO;
16978 +        _NODE_  =                   25;
16979 +        _LEAF_  =                   58;
16980 +        P_totalsal  =     193310.744897959;
16981 +        V_totalsal  =     188562.465116279;
16982 +        END;
16983 +      ELSE DO;
16984 +        IF  NOT MISSING(nonstsal ) AND
16985 +                      148505.5 <= nonstsal  THEN DO;
16986 +          IF  NOT MISSING(nonstsal ) AND
16987 +            nonstsal  <               163762 THEN DO;
16988 +            _NODE_  =                   58;
16989 +            _LEAF_  =                   56;
16990 +            P_totalsal  =            155528.94;
16991 +            V_totalsal  =     155128.277777777;
16992 +            END;
16993 +          ELSE DO;
16994 +            _NODE_  =                   59;
16995 +            _LEAF_  =                   57;
16996 +            P_totalsal  =     172026.475409836;
16997 +            V_totalsal  =     173655.545454545;
16998 +            END;
16999 +          END;
17000 +        ELSE DO;
17001 +          IF  NOT MISSING(nonstsal ) AND
17002 +                        131707.5 <= nonstsal  THEN DO;
17003 +            _NODE_  =                   57;
17004 +            _LEAF_  =                   55;
17005 +            P_totalsal  =     140011.491525423;
17006 +            V_totalsal  =     140091.541666666;
17007 +            END;
17008 +          ELSE DO;
17009 +            _NODE_  =                   56;
17010 +            _LEAF_  =                   54;
17011 +            P_totalsal  =        123389.078125;
17012 +            V_totalsal  =     123918.555555555;
17013 +            END;
17014 +          END;
17015 +        END;
17016 +      END;
17017 +    END;
17018 +  END;
17019 +ELSE DO;
17020 +  IF  NOT MISSING(statesal ) AND
17021 +                   87510 <= statesal  THEN DO;
17022 +    IF  NOT MISSING(statesal ) AND
17023 +                    157105 <= statesal  THEN DO;
17024 +      IF  NOT MISSING(statesal ) AND
17025 +                      192854 <= statesal  THEN DO;
17026 +        _NODE_  =                   23;
17027 +        _LEAF_  =                   53;
17028 +        P_totalsal  =     264361.269230769;
17029 +        V_totalsal  =     268468.275862069;
17030 +        END;
17031 +      ELSE DO;
17032 +        _NODE_  =                   22;
17033 +        _LEAF_  =                   52;
17034 +        P_totalsal  =     188379.583333333;
17035 +        V_totalsal  =     197484.576923076;
17036 +        END;
17037 +      END;
17038 +    ELSE DO;
17039 +      IF  NOT MISSING(nonstsal ) AND
17040 +                     23033.5 <= nonstsal  THEN DO;
17041 +        IF  NOT MISSING(statesal ) AND
17042 +          statesal  <               111605 THEN DO;
17043 +          _NODE_  =                   36;
17044 +          _LEAF_  =                   50;
17045 +          P_totalsal  =     145322.421052631;
17046 +          V_totalsal  =     141973.761904761;
17047 +          END;
17048 +        ELSE DO;
17049 +          _NODE_  =                   37;
17050 +          _LEAF_  =                   51;
17051 +          P_totalsal  =     175551.742424242;
17052 +          V_totalsal  =     183700.727272727;
17053 +          END;
17054 +        END;
17055 +      ELSE DO;
17056 +        IF  NOT MISSING(statesal ) AND
17057 +                      117576.5 <= statesal  THEN DO;
17058 +          IF  NOT MISSING(statesal ) AND
17059 +                          136441 <= statesal  THEN DO;
17060 +            _NODE_  =                   55;
17061 +            _LEAF_  =                   49;
17062 +            P_totalsal  =     149342.807017543;
17063 +            V_totalsal  =     150521.045454545;
17064 +            END;
17065 +          ELSE DO;
17066 +            _NODE_  =                   54;
17067 +            _LEAF_  =                   48;
17068 +            P_totalsal  =     131039.036144578;
17069 +            V_totalsal  =         128212.84375;
17070 +            END;
17071 +          END;
17072 +        ELSE DO;
17073 +          IF  NOT MISSING(statesal ) AND
17074 +                        101772.5 <= statesal  THEN DO;
17075 +            IF  NOT MISSING(statesal ) AND
17076 +                            110326 <= statesal  THEN DO;
17077 +              _NODE_  =                   81;
17078 +              _LEAF_  =                   47;
17079 +              P_totalsal  =        117554.203125;
17080 +              V_totalsal  =            116456.85;
17081 +              END;
17082 +            ELSE DO;
17083 +              _NODE_  =                   80;
17084 +              _LEAF_  =                   46;
17085 +              P_totalsal  =     109521.424657534;
17086 +              V_totalsal  =     109758.829268292;
17087 +              END;
17088 +            END;
17089 +          ELSE DO;
17090 +            IF  NOT MISSING(statesal ) AND
17091 +                           95789.5 <= statesal  THEN DO;
17092 +              _NODE_  =                   79;
17093 +              _LEAF_  =                   45;
17094 +              P_totalsal  =     101223.018518518;
17095 +              V_totalsal  =          99647.84375;
17096 +              END;
17097 +            ELSE DO;
17098 +              IF  NOT MISSING(statesal ) AND
17099 +                               91975 <= statesal  THEN DO;
17100 +                _NODE_  =                  105;
17101 +                _LEAF_  =                   44;
17102 +                P_totalsal  =     95334.1960784313;
17103 +                V_totalsal  =             95030.85;
17104 +                END;
17105 +              ELSE DO;
17106 +                _NODE_  =                  104;
17107 +                _LEAF_  =                   43;
17108 +                P_totalsal  =     90711.1296296296;
17109 +                V_totalsal  =              91231.4;
17110 +                END;
17111 +              END;
17112 +            END;
17113 +          END;
17114 +        END;
17115 +      END;
17116 +    END;
17117 +  ELSE DO;
17118 +    IF  NOT MISSING(nonstsal ) AND
17119 +                     68358 <= nonstsal  THEN DO;
17120 +      IF  NOT MISSING(statesal ) AND
17121 +                       27171 <= statesal  THEN DO;
17122 +        _NODE_  =                   19;
17123 +        _LEAF_  =                   42;
17124 +        P_totalsal  =     142233.363636363;
17125 +        V_totalsal  =     138015.111111111;
17126 +        END;
17127 +      ELSE DO;
17128 +        IF  NOT MISSING(nonstsal ) AND
17129 +                       89303.5 <= nonstsal  THEN DO;
17130 +          IF  NOT MISSING(nonstsal ) AND
17131 +                        102882.5 <= nonstsal  THEN DO;
17132 +            _NODE_  =                   51;
17133 +            _LEAF_  =                   41;
17134 +            P_totalsal  =          111508.4125;
17135 +            V_totalsal  =     113460.117647058;
17136 +            END;
17137 +          ELSE DO;
17138 +            IF  NOT MISSING(nonstsal ) AND
17139 +                             95966 <= nonstsal  THEN DO;
17140 +              _NODE_  =                   77;
17141 +              _LEAF_  =                   40;
17142 +              P_totalsal  =     100421.356164383;
17143 +              V_totalsal  =     100345.344827586;
17144 +              END;
17145 +            ELSE DO;
17146 +              IF  NOT MISSING(nonstsal ) AND
17147 +                             92349.5 <= nonstsal  THEN DO;
17148 +                _NODE_  =                  103;
17149 +                _LEAF_  =                   39;
17150 +                P_totalsal  =              95371.3;
17151 +                V_totalsal  =            96703.375;
17152 +                END;
17153 +              ELSE DO;
17154 +                _NODE_  =                  102;
17155 +                _LEAF_  =                   38;
17156 +                P_totalsal  =     91942.7910447761;
17157 +                V_totalsal  =              90884.6;
17158 +                END;
17159 +              END;
17160 +            END;
17161 +          END;
17162 +        ELSE DO;
17163 +          IF  NOT MISSING(nonstsal ) AND
17164 +                           79396 <= nonstsal  THEN DO;
17165 +            IF  NOT MISSING(nonstsal ) AND
17166 +                           84951.5 <= nonstsal  THEN DO;
17167 +              _NODE_  =                   75;
17168 +              _LEAF_  =                   37;
17169 +              P_totalsal  =     87713.6266666666;
17170 +              V_totalsal  =          86818.59375;
17171 +              END;
17172 +            ELSE DO;
17173 +              IF  NOT MISSING(nonstsal ) AND
17174 +                               82225 <= nonstsal  THEN DO;
17175 +                _NODE_  =                  101;
17176 +                _LEAF_  =                   36;
17177 +                P_totalsal  =              83984.8;
17178 +                V_totalsal  =     85157.4782608695;
17179 +                END;
17180 +              ELSE DO;
17181 +                _NODE_  =                  100;
17182 +                _LEAF_  =                   35;
17183 +                P_totalsal  =     81679.0512820512;
17184 +                V_totalsal  =     81507.3636363636;
17185 +                END;
17186 +              END;
17187 +            END;
17188 +          ELSE DO;
17189 +            IF  NOT MISSING(nonstsal ) AND
17190 +                             73932 <= nonstsal  THEN DO;
17191 +              _NODE_  =                   73;
17192 +              _LEAF_  =                   34;
17193 +              P_totalsal  =     77790.8088235294;
17194 +              V_totalsal  =     77070.1896551724;
17195 +              END;
17196 +            ELSE DO;
17197 +              IF  NOT MISSING(nonstsal ) AND
17198 +                nonstsal  <                70266 THEN DO;
17199 +                _NODE_  =                   98;
17200 +                _LEAF_  =                   32;
17201 +                P_totalsal  =         70739.328125;
17202 +                V_totalsal  =             69560.12;
17203 +                END;
17204 +              ELSE DO;
17205 +                _NODE_  =                   99;
17206 +                _LEAF_  =                   33;
17207 +                P_totalsal  =     73731.6288659793;
17208 +                V_totalsal  =                73035;
17209 +                END;
17210 +              END;
17211 +            END;
17212 +          END;
17213 +        END;
17214 +      END;
17215 +    ELSE DO;
17216 +      IF  NOT MISSING(statesal ) AND
17217 +                     51742.5 <= statesal  THEN DO;
17218 +        IF  NOT MISSING(nonstsal ) AND
17219 +                       18694.5 <= nonstsal  THEN DO;
17220 +          _NODE_  =                   31;
17221 +          _LEAF_  =                   31;
17222 +          P_totalsal  =     105386.494949494;
17223 +          V_totalsal  =     113819.975609756;
17224 +          END;
17225 +        ELSE DO;
17226 +          IF  NOT MISSING(statesal ) AND
17227 +            statesal  <              66247.5 THEN DO;
17228 +            IF  NOT MISSING(statesal ) AND
17229 +                             59398 <= statesal  THEN DO;
17230 +              IF  NOT MISSING(statesal ) AND
17231 +                             63139.5 <= statesal  THEN DO;
17232 +                _NODE_  =                   93;
17233 +                _LEAF_  =                   25;
17234 +                P_totalsal  =     65855.1803278688;
17235 +                V_totalsal  =     65535.5142857143;
17236 +                END;
17237 +              ELSE DO;
17238 +                _NODE_  =                   92;
17239 +                _LEAF_  =                   24;
17240 +                P_totalsal  =                62329;
17241 +                V_totalsal  =     62293.6363636363;
17242 +                END;
17243 +              END;
17244 +            ELSE DO;
17245 +              IF  NOT MISSING(statesal ) AND
17246 +                statesal  <                54315 THEN DO;
17247 +                _NODE_  =                   90;
17248 +                _LEAF_  =                   22;
17249 +                P_totalsal  =     54687.5932203389;
17250 +                V_totalsal  =     55166.5151515151;
17251 +                END;
17252 +              ELSE DO;
17253 +                _NODE_  =                   91;
17254 +                _LEAF_  =                   23;
17255 +                P_totalsal  =     58492.0076335878;
17256 +                V_totalsal  =     58224.2903225806;
17257 +                END;
17258 +              END;
17259 +            END;
17260 +          ELSE DO;
17261 +            IF  NOT MISSING(statesal ) AND
17262 +                             77561 <= statesal  THEN DO;
17263 +              IF  NOT MISSING(statesal ) AND
17264 +                             82821.5 <= statesal  THEN DO;
17265 +                _NODE_  =                   97;
17266 +                _LEAF_  =                   30;
17267 +                P_totalsal  =              86975.4;
17268 +                V_totalsal  =     86406.1428571428;
17269 +                END;
17270 +              ELSE DO;
17271 +                _NODE_  =                   96;
17272 +                _LEAF_  =                   29;
17273 +                P_totalsal  =     81559.6236559139;
17274 +                V_totalsal  =     80036.2647058823;
17275 +                END;
17276 +              END;
17277 +            ELSE DO;
17278 +              IF  NOT MISSING(statesal ) AND
17279 +                statesal  <              71563.5 THEN DO;
17280 +                _NODE_  =                   94;
17281 +                _LEAF_  =                   26;
17282 +                P_totalsal  =     70544.2612612612;
17283 +                V_totalsal  =     71108.8409090909;
17284 +                END;
17285 +              ELSE DO;
17286 +                IF  NOT MISSING(statesal ) AND
17287 +                  statesal  <                74875 THEN DO;
17288 +                  _NODE_  =                  120;
17289 +                  _LEAF_  =                   27;
17290 +                  P_totalsal  =     73895.7868852459;
17291 +                  V_totalsal  =     75461.8484848484;
17292 +                  END;
17293 +                ELSE DO;
17294 +                  _NODE_  =                  121;
17295 +                  _LEAF_  =                   28;
17296 +                  P_totalsal  =     76233.8923076923;
17297 +                  V_totalsal  =     77924.7037037037;
17298 +                  END;
17299 +                END;
17300 +              END;
17301 +            END;
17302 +          END;
17303 +        END;
17304 +      ELSE DO;
17305 +        IF  NOT MISSING(nonstsal ) AND
17306 +                       47236.5 <= nonstsal  THEN DO;
17307 +          IF  NOT MISSING(nonstsal ) AND
17308 +                         57561.5 <= nonstsal  THEN DO;
17309 +            IF  NOT MISSING(nonstsal ) AND
17310 +                             64045 <= nonstsal  THEN DO;
17311 +              _NODE_  =                   67;
17312 +              _LEAF_  =                   21;
17313 +              P_totalsal  =     67651.3558282208;
17314 +              V_totalsal  =             67018.65;
17315 +              END;
17316 +            ELSE DO;
17317 +              _NODE_  =                   66;
17318 +              _LEAF_  =                   20;
17319 +              P_totalsal  =     62452.1654411764;
17320 +              V_totalsal  =     62460.6293103448;
17321 +              END;
17322 +            END;
17323 +          ELSE DO;
17324 +            _ARBFMT_28 = PUT( position , $28.);
17325 +             %DMNORMIP( _ARBFMT_28);
17326 +            IF _ARBFMT_28 IN ('OTHER' ,'ADMIN' ,'ASSISTANT OTHER' ,
17327 +            'BUILDING' ,'CLINICAL OTHER' ,'CLINICAL RESEARCH' ,'DATA' ,
17328 +            'EXECUTIVE' ,'RESEARCH OTHER' ,'OTHER PROGRAM' ,
17329 +            'PROJECT MANAGER' ,'RESEARCH ASSISTANT' ,'RESEARCH ASSOCIATE' ,
17330 +              'RESEARCH SPECIALIST' ,'RESEARCH TECHNICIAN' ) THEN DO;
17331 +              IF  NOT MISSING(nonstsal ) AND
17332 +                             52314.5 <= nonstsal  THEN DO;
17333 +                IF  NOT MISSING(nonstsal ) AND
17334 +                  nonstsal  <                54069 THEN DO;
17335 +                  _NODE_  =                  118;
17336 +                  _LEAF_  =                   17;
17337 +                  P_totalsal  =     53463.0326086956;
17338 +                  V_totalsal  =     53454.8205128205;
17339 +                  END;
17340 +                ELSE DO;
17341 +                  _NODE_  =                  119;
17342 +                  _LEAF_  =                   18;
17343 +                  P_totalsal  =     56112.2881355932;
17344 +                  V_totalsal  =     56244.7291666666;
17345 +                  END;
17346 +                END;
17347 +              ELSE DO;
17348 +                IF  NOT MISSING(nonstsal ) AND
17349 +                               50208.5 <= nonstsal  THEN DO;
17350 +                  _NODE_  =                  117;
17351 +                  _LEAF_  =                   16;
17352 +                  P_totalsal  =     51353.1333333333;
17353 +                  V_totalsal  =     51452.6818181818;
17354 +                  END;
17355 +                ELSE DO;
17356 +                  IF  NOT MISSING(nonstsal ) AND
17357 +                    nonstsal  <              48572.5 THEN DO;
17358 +                    _NODE_  =                  128;
17359 +                    _LEAF_  =                   14;
17360 +                    P_totalsal  =     48331.1384615384;
17361 +                    V_totalsal  =     48000.1891891891;
17362 +                    END;
17363 +                  ELSE DO;
17364 +                    _NODE_  =                  129;
17365 +                    _LEAF_  =                   15;
17366 +                    P_totalsal  =     49615.2093023255;
17367 +                    V_totalsal  =     49436.8378378378;
17368 +                    END;
17369 +                  END;
17370 +                END;
17371 +              END;
17372 +            ELSE DO;
17373 +              _NODE_  =                   65;
17374 +              _LEAF_  =                   19;
17375 +              P_totalsal  =             59423.75;
17376 +              V_totalsal  =     58581.1666666666;
17377 +              END;
17378 +            END;
17379 +          END;
17380 +        ELSE DO;
17381 +          IF  NOT MISSING(statesal ) AND
17382 +                         39899.5 <= statesal  THEN DO;
17383 +            IF  NOT MISSING(nonstsal ) AND
17384 +                           11020.5 <= nonstsal  THEN DO;
17385 +              _NODE_  =                   63;
17386 +              _LEAF_  =                   13;
17387 +              P_totalsal  =     70818.3703703703;
17388 +              V_totalsal  =            76347.125;
17389 +              END;
17390 +            ELSE DO;
17391 +              IF  NOT MISSING(statesal ) AND
17392 +                             46728.5 <= statesal  THEN DO;
17393 +                IF  NOT MISSING(statesal ) AND
17394 +                                 49470 <= statesal  THEN DO;
17395 +                  _NODE_  =                  115;
17396 +                  _LEAF_  =                   12;
17397 +                  P_totalsal  =     51269.5405405405;
17398 +                  V_totalsal  =     50776.3703703703;
17399 +                  END;
17400 +                ELSE DO;
17401 +                  _NODE_  =                  114;
17402 +                  _LEAF_  =                   11;
17403 +                  P_totalsal  =     48737.9183673469;
17404 +                  V_totalsal  =     48443.6041666666;
17405 +                  END;
17406 +                END;
17407 +              ELSE DO;
17408 +                IF  NOT MISSING(statesal ) AND
17409 +                                 43211 <= statesal  THEN DO;
17410 +                  IF  NOT MISSING(statesal ) AND
17411 +                                 44928.5 <= statesal  THEN DO;
17412 +                    _NODE_  =                  127;
17413 +                    _LEAF_  =                   10;
17414 +                    P_totalsal  =              45916.1;
17415 +                    V_totalsal  =     46094.6470588235;
17416 +                    END;
17417 +                  ELSE DO;
17418 +                    _NODE_  =                  126;
17419 +                    _LEAF_  =                    9;
17420 +                    P_totalsal  =     44672.6947368421;
17421 +                    V_totalsal  =     44674.4871794871;
17422 +                    END;
17423 +                  END;
17424 +                ELSE DO;
17425 +                  _NODE_  =                  112;
17426 +                  _LEAF_  =                    8;
17427 +                  P_totalsal  =     42302.3103448275;
17428 +                  V_totalsal  =      41848.527027027;
17429 +                  END;
17430 +                END;
17431 +              END;
17432 +            END;
17433 +          ELSE DO;
17434 +            IF  NOT MISSING(nonstsal ) AND
17435 +                             36731 <= nonstsal  THEN DO;
17436 +              IF  NOT MISSING(nonstsal ) AND
17437 +                nonstsal  <                41994 THEN DO;
17438 +                IF  NOT MISSING(nonstsal ) AND
17439 +                  nonstsal  <              39506.5 THEN DO;
17440 +                  _NODE_  =                  108;
17441 +                  _LEAF_  =                    5;
17442 +                  P_totalsal  =     39119.9294117647;
17443 +                  V_totalsal  =     38680.7432432432;
17444 +                  END;
17445 +                ELSE DO;
17446 +                  _NODE_  =                  109;
17447 +                  _LEAF_  =                    6;
17448 +                  P_totalsal  =      41742.612745098;
17449 +                  V_totalsal  =     42987.9304347826;
17450 +                  END;
17451 +                END;
17452 +              ELSE DO;
17453 +                _NODE_  =                   85;
17454 +                _LEAF_  =                    7;
17455 +                P_totalsal  =     45920.9526315789;
17456 +                V_totalsal  =      45435.050955414;
17457 +                END;
17458 +              END;
17459 +            ELSE DO;
17460 +              _ARBFMT_30 = PUT( exempt2 , $30.);
17461 +               %DMNORMIP( _ARBFMT_30);
17462 +              IF _ARBFMT_30 IN ('NON-PERMANENT' ) THEN DO;
17463 +                _NODE_  =                   83;
17464 +                _LEAF_  =                    4;
17465 +                P_totalsal  =     18065.0520833333;
17466 +                V_totalsal  =                16201;
17467 +                END;
17468 +              ELSE DO;
17469 +                IF  NOT MISSING(statesal ) AND
17470 +                               30203.5 <= statesal  THEN DO;
17471 +                  _NODE_  =                  107;
17472 +                  _LEAF_  =                    3;
17473 +                  P_totalsal  =     38949.9046153846;
17474 +                  V_totalsal  =     38674.6518518518;
17475 +                  END;
17476 +                ELSE DO;
17477 +                  IF  NOT MISSING(nonstsal ) AND
17478 +                    nonstsal  <                13312 THEN DO;
17479 +                    _NODE_  =                  122;
17480 +                    _LEAF_  =                    1;
17481 +                    P_totalsal  =      26887.873076923;
17482 +                    V_totalsal  =              27700.2;
17483 +                    END;
17484 +                  ELSE DO;
17485 +                    _NODE_  =                  123;
17486 +                    _LEAF_  =                    2;
17487 +                    P_totalsal  =     33620.4532258064;
17488 +                    V_totalsal  =     33052.4937238493;
17489 +                    END;
17490 +                  END;
17491 +                END;
17492 +              END;
17493 +            END;
17494 +          END;
17495 +        END;
17496 +      END;
17497 +    END;
17498 +  END;
17499 +
17500 +*****  RESIDUALS R_ *************;
17501 +IF MISSING( totalsal ) THEN R_totalsal  = .;
17502 +ELSE R_totalsal  = totalsal  - P_totalsal ;
17503 +
17504 +****************************************************************;
17505 +******          END OF DECISION TREE SCORING CODE         ******;
17506 +****************************************************************;
17507 +
17508 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17509  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE5_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
17510  quit;
17511  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17512  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas";
17513  *------------------------------------------------------------*;
17514  * Tree5: Scoring VALIDATE data;
17515  *------------------------------------------------------------*;
17516  data EMWS1.Tree5_VALIDATE
17517  / view=EMWS1.Tree5_VALIDATE
17518  ;
17519  set EMWS1.Part_VALIDATE
17520  ;
17521  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas.
17522 +****************************************************************;
17523 +******             DECISION TREE SCORING CODE             ******;
17524 +****************************************************************;
17525 +
17526 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17527 +LENGTH _WARN_  $    4;
17528 +
17529 +******              LABELS FOR NEW VARIABLES              ******;
17530 +label _NODE_ = 'Node' ;
17531 +label _LEAF_ = 'Leaf' ;
17532 +label P_totalsal = 'Predicted: totalsal' ;
17533 +label V_totalsal = 'Validated: totalsal' ;
17534 +label R_totalsal = 'Residual: totalsal' ;
17535 +label _WARN_ = 'Warnings' ;
17536 +
17537 +
17538 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17539 +LENGTH _ARBFMT_30 $     30; DROP _ARBFMT_30;
17540 +_ARBFMT_30 = ' '; /* Initialize to avoid warning. */
17541 +LENGTH _ARBFMT_28 $     28; DROP _ARBFMT_28;
17542 +_ARBFMT_28 = ' '; /* Initialize to avoid warning. */
17543 +
17544 +
17545 +******             ASSIGN OBSERVATION TO NODE             ******;
17546 +IF  NOT MISSING(nonstsal ) AND
17547 +                115051 <= nonstsal  THEN DO;
17548 +  IF  NOT MISSING(nonstsal ) AND
17549 +                257529.5 <= nonstsal  THEN DO;
17550 +    IF  NOT MISSING(nonstsal ) AND
17551 +                  319837.5 <= nonstsal  THEN DO;
17552 +      _NODE_  =                   15;
17553 +      _LEAF_  =                   62;
17554 +      P_totalsal  =             430459.4;
17555 +      V_totalsal  =     417005.789473684;
17556 +      END;
17557 +    ELSE DO;
17558 +      _NODE_  =                   14;
17559 +      _LEAF_  =                   61;
17560 +      P_totalsal  =     298051.519480519;
17561 +      V_totalsal  =         291616.96875;
17562 +      END;
17563 +    END;
17564 +  ELSE DO;
17565 +    IF  NOT MISSING(nonstsal ) AND
17566 +                    180203 <= nonstsal  THEN DO;
17567 +      IF  NOT MISSING(nonstsal ) AND
17568 +        nonstsal  <             209437.5 THEN DO;
17569 +        _NODE_  =                   26;
17570 +        _LEAF_  =                   59;
17571 +        P_totalsal  =     205348.279069767;
17572 +        V_totalsal  =     203595.418604651;
17573 +        END;
17574 +      ELSE DO;
17575 +        _NODE_  =                   27;
17576 +        _LEAF_  =                   60;
17577 +        P_totalsal  =     243136.530973451;
17578 +        V_totalsal  =     245666.222222222;
17579 +        END;
17580 +      END;
17581 +    ELSE DO;
17582 +      IF  NOT MISSING(statesal ) AND
17583 +                      7640.5 <= statesal  THEN DO;
17584 +        _NODE_  =                   25;
17585 +        _LEAF_  =                   58;
17586 +        P_totalsal  =     193310.744897959;
17587 +        V_totalsal  =     188562.465116279;
17588 +        END;
17589 +      ELSE DO;
17590 +        IF  NOT MISSING(nonstsal ) AND
17591 +                      148505.5 <= nonstsal  THEN DO;
17592 +          IF  NOT MISSING(nonstsal ) AND
17593 +            nonstsal  <               163762 THEN DO;
17594 +            _NODE_  =                   58;
17595 +            _LEAF_  =                   56;
17596 +            P_totalsal  =            155528.94;
17597 +            V_totalsal  =     155128.277777777;
17598 +            END;
17599 +          ELSE DO;
17600 +            _NODE_  =                   59;
17601 +            _LEAF_  =                   57;
17602 +            P_totalsal  =     172026.475409836;
17603 +            V_totalsal  =     173655.545454545;
17604 +            END;
17605 +          END;
17606 +        ELSE DO;
17607 +          IF  NOT MISSING(nonstsal ) AND
17608 +                        131707.5 <= nonstsal  THEN DO;
17609 +            _NODE_  =                   57;
17610 +            _LEAF_  =                   55;
17611 +            P_totalsal  =     140011.491525423;
17612 +            V_totalsal  =     140091.541666666;
17613 +            END;
17614 +          ELSE DO;
17615 +            _NODE_  =                   56;
17616 +            _LEAF_  =                   54;
17617 +            P_totalsal  =        123389.078125;
17618 +            V_totalsal  =     123918.555555555;
17619 +            END;
17620 +          END;
17621 +        END;
17622 +      END;
17623 +    END;
17624 +  END;
17625 +ELSE DO;
17626 +  IF  NOT MISSING(statesal ) AND
17627 +                   87510 <= statesal  THEN DO;
17628 +    IF  NOT MISSING(statesal ) AND
17629 +                    157105 <= statesal  THEN DO;
17630 +      IF  NOT MISSING(statesal ) AND
17631 +                      192854 <= statesal  THEN DO;
17632 +        _NODE_  =                   23;
17633 +        _LEAF_  =                   53;
17634 +        P_totalsal  =     264361.269230769;
17635 +        V_totalsal  =     268468.275862069;
17636 +        END;
17637 +      ELSE DO;
17638 +        _NODE_  =                   22;
17639 +        _LEAF_  =                   52;
17640 +        P_totalsal  =     188379.583333333;
17641 +        V_totalsal  =     197484.576923076;
17642 +        END;
17643 +      END;
17644 +    ELSE DO;
17645 +      IF  NOT MISSING(nonstsal ) AND
17646 +                     23033.5 <= nonstsal  THEN DO;
17647 +        IF  NOT MISSING(statesal ) AND
17648 +          statesal  <               111605 THEN DO;
17649 +          _NODE_  =                   36;
17650 +          _LEAF_  =                   50;
17651 +          P_totalsal  =     145322.421052631;
17652 +          V_totalsal  =     141973.761904761;
17653 +          END;
17654 +        ELSE DO;
17655 +          _NODE_  =                   37;
17656 +          _LEAF_  =                   51;
17657 +          P_totalsal  =     175551.742424242;
17658 +          V_totalsal  =     183700.727272727;
17659 +          END;
17660 +        END;
17661 +      ELSE DO;
17662 +        IF  NOT MISSING(statesal ) AND
17663 +                      117576.5 <= statesal  THEN DO;
17664 +          IF  NOT MISSING(statesal ) AND
17665 +                          136441 <= statesal  THEN DO;
17666 +            _NODE_  =                   55;
17667 +            _LEAF_  =                   49;
17668 +            P_totalsal  =     149342.807017543;
17669 +            V_totalsal  =     150521.045454545;
17670 +            END;
17671 +          ELSE DO;
17672 +            _NODE_  =                   54;
17673 +            _LEAF_  =                   48;
17674 +            P_totalsal  =     131039.036144578;
17675 +            V_totalsal  =         128212.84375;
17676 +            END;
17677 +          END;
17678 +        ELSE DO;
17679 +          IF  NOT MISSING(statesal ) AND
17680 +                        101772.5 <= statesal  THEN DO;
17681 +            IF  NOT MISSING(statesal ) AND
17682 +                            110326 <= statesal  THEN DO;
17683 +              _NODE_  =                   81;
17684 +              _LEAF_  =                   47;
17685 +              P_totalsal  =        117554.203125;
17686 +              V_totalsal  =            116456.85;
17687 +              END;
17688 +            ELSE DO;
17689 +              _NODE_  =                   80;
17690 +              _LEAF_  =                   46;
17691 +              P_totalsal  =     109521.424657534;
17692 +              V_totalsal  =     109758.829268292;
17693 +              END;
17694 +            END;
17695 +          ELSE DO;
17696 +            IF  NOT MISSING(statesal ) AND
17697 +                           95789.5 <= statesal  THEN DO;
17698 +              _NODE_  =                   79;
17699 +              _LEAF_  =                   45;
17700 +              P_totalsal  =     101223.018518518;
17701 +              V_totalsal  =          99647.84375;
17702 +              END;
17703 +            ELSE DO;
17704 +              IF  NOT MISSING(statesal ) AND
17705 +                               91975 <= statesal  THEN DO;
17706 +                _NODE_  =                  105;
17707 +                _LEAF_  =                   44;
17708 +                P_totalsal  =     95334.1960784313;
17709 +                V_totalsal  =             95030.85;
17710 +                END;
17711 +              ELSE DO;
17712 +                _NODE_  =                  104;
17713 +                _LEAF_  =                   43;
17714 +                P_totalsal  =     90711.1296296296;
17715 +                V_totalsal  =              91231.4;
17716 +                END;
17717 +              END;
17718 +            END;
17719 +          END;
17720 +        END;
17721 +      END;
17722 +    END;
17723 +  ELSE DO;
17724 +    IF  NOT MISSING(nonstsal ) AND
17725 +                     68358 <= nonstsal  THEN DO;
17726 +      IF  NOT MISSING(statesal ) AND
17727 +                       27171 <= statesal  THEN DO;
17728 +        _NODE_  =                   19;
17729 +        _LEAF_  =                   42;
17730 +        P_totalsal  =     142233.363636363;
17731 +        V_totalsal  =     138015.111111111;
17732 +        END;
17733 +      ELSE DO;
17734 +        IF  NOT MISSING(nonstsal ) AND
17735 +                       89303.5 <= nonstsal  THEN DO;
17736 +          IF  NOT MISSING(nonstsal ) AND
17737 +                        102882.5 <= nonstsal  THEN DO;
17738 +            _NODE_  =                   51;
17739 +            _LEAF_  =                   41;
17740 +            P_totalsal  =          111508.4125;
17741 +            V_totalsal  =     113460.117647058;
17742 +            END;
17743 +          ELSE DO;
17744 +            IF  NOT MISSING(nonstsal ) AND
17745 +                             95966 <= nonstsal  THEN DO;
17746 +              _NODE_  =                   77;
17747 +              _LEAF_  =                   40;
17748 +              P_totalsal  =     100421.356164383;
17749 +              V_totalsal  =     100345.344827586;
17750 +              END;
17751 +            ELSE DO;
17752 +              IF  NOT MISSING(nonstsal ) AND
17753 +                             92349.5 <= nonstsal  THEN DO;
17754 +                _NODE_  =                  103;
17755 +                _LEAF_  =                   39;
17756 +                P_totalsal  =              95371.3;
17757 +                V_totalsal  =            96703.375;
17758 +                END;
17759 +              ELSE DO;
17760 +                _NODE_  =                  102;
17761 +                _LEAF_  =                   38;
17762 +                P_totalsal  =     91942.7910447761;
17763 +                V_totalsal  =              90884.6;
17764 +                END;
17765 +              END;
17766 +            END;
17767 +          END;
17768 +        ELSE DO;
17769 +          IF  NOT MISSING(nonstsal ) AND
17770 +                           79396 <= nonstsal  THEN DO;
17771 +            IF  NOT MISSING(nonstsal ) AND
17772 +                           84951.5 <= nonstsal  THEN DO;
17773 +              _NODE_  =                   75;
17774 +              _LEAF_  =                   37;
17775 +              P_totalsal  =     87713.6266666666;
17776 +              V_totalsal  =          86818.59375;
17777 +              END;
17778 +            ELSE DO;
17779 +              IF  NOT MISSING(nonstsal ) AND
17780 +                               82225 <= nonstsal  THEN DO;
17781 +                _NODE_  =                  101;
17782 +                _LEAF_  =                   36;
17783 +                P_totalsal  =              83984.8;
17784 +                V_totalsal  =     85157.4782608695;
17785 +                END;
17786 +              ELSE DO;
17787 +                _NODE_  =                  100;
17788 +                _LEAF_  =                   35;
17789 +                P_totalsal  =     81679.0512820512;
17790 +                V_totalsal  =     81507.3636363636;
17791 +                END;
17792 +              END;
17793 +            END;
17794 +          ELSE DO;
17795 +            IF  NOT MISSING(nonstsal ) AND
17796 +                             73932 <= nonstsal  THEN DO;
17797 +              _NODE_  =                   73;
17798 +              _LEAF_  =                   34;
17799 +              P_totalsal  =     77790.8088235294;
17800 +              V_totalsal  =     77070.1896551724;
17801 +              END;
17802 +            ELSE DO;
17803 +              IF  NOT MISSING(nonstsal ) AND
17804 +                nonstsal  <                70266 THEN DO;
17805 +                _NODE_  =                   98;
17806 +                _LEAF_  =                   32;
17807 +                P_totalsal  =         70739.328125;
17808 +                V_totalsal  =             69560.12;
17809 +                END;
17810 +              ELSE DO;
17811 +                _NODE_  =                   99;
17812 +                _LEAF_  =                   33;
17813 +                P_totalsal  =     73731.6288659793;
17814 +                V_totalsal  =                73035;
17815 +                END;
17816 +              END;
17817 +            END;
17818 +          END;
17819 +        END;
17820 +      END;
17821 +    ELSE DO;
17822 +      IF  NOT MISSING(statesal ) AND
17823 +                     51742.5 <= statesal  THEN DO;
17824 +        IF  NOT MISSING(nonstsal ) AND
17825 +                       18694.5 <= nonstsal  THEN DO;
17826 +          _NODE_  =                   31;
17827 +          _LEAF_  =                   31;
17828 +          P_totalsal  =     105386.494949494;
17829 +          V_totalsal  =     113819.975609756;
17830 +          END;
17831 +        ELSE DO;
17832 +          IF  NOT MISSING(statesal ) AND
17833 +            statesal  <              66247.5 THEN DO;
17834 +            IF  NOT MISSING(statesal ) AND
17835 +                             59398 <= statesal  THEN DO;
17836 +              IF  NOT MISSING(statesal ) AND
17837 +                             63139.5 <= statesal  THEN DO;
17838 +                _NODE_  =                   93;
17839 +                _LEAF_  =                   25;
17840 +                P_totalsal  =     65855.1803278688;
17841 +                V_totalsal  =     65535.5142857143;
17842 +                END;
17843 +              ELSE DO;
17844 +                _NODE_  =                   92;
17845 +                _LEAF_  =                   24;
17846 +                P_totalsal  =                62329;
17847 +                V_totalsal  =     62293.6363636363;
17848 +                END;
17849 +              END;
17850 +            ELSE DO;
17851 +              IF  NOT MISSING(statesal ) AND
17852 +                statesal  <                54315 THEN DO;
17853 +                _NODE_  =                   90;
17854 +                _LEAF_  =                   22;
17855 +                P_totalsal  =     54687.5932203389;
17856 +                V_totalsal  =     55166.5151515151;
17857 +                END;
17858 +              ELSE DO;
17859 +                _NODE_  =                   91;
17860 +                _LEAF_  =                   23;
17861 +                P_totalsal  =     58492.0076335878;
17862 +                V_totalsal  =     58224.2903225806;
17863 +                END;
17864 +              END;
17865 +            END;
17866 +          ELSE DO;
17867 +            IF  NOT MISSING(statesal ) AND
17868 +                             77561 <= statesal  THEN DO;
17869 +              IF  NOT MISSING(statesal ) AND
17870 +                             82821.5 <= statesal  THEN DO;
17871 +                _NODE_  =                   97;
17872 +                _LEAF_  =                   30;
17873 +                P_totalsal  =              86975.4;
17874 +                V_totalsal  =     86406.1428571428;
17875 +                END;
17876 +              ELSE DO;
17877 +                _NODE_  =                   96;
17878 +                _LEAF_  =                   29;
17879 +                P_totalsal  =     81559.6236559139;
17880 +                V_totalsal  =     80036.2647058823;
17881 +                END;
17882 +              END;
17883 +            ELSE DO;
17884 +              IF  NOT MISSING(statesal ) AND
17885 +                statesal  <              71563.5 THEN DO;
17886 +                _NODE_  =                   94;
17887 +                _LEAF_  =                   26;
17888 +                P_totalsal  =     70544.2612612612;
17889 +                V_totalsal  =     71108.8409090909;
17890 +                END;
17891 +              ELSE DO;
17892 +                IF  NOT MISSING(statesal ) AND
17893 +                  statesal  <                74875 THEN DO;
17894 +                  _NODE_  =                  120;
17895 +                  _LEAF_  =                   27;
17896 +                  P_totalsal  =     73895.7868852459;
17897 +                  V_totalsal  =     75461.8484848484;
17898 +                  END;
17899 +                ELSE DO;
17900 +                  _NODE_  =                  121;
17901 +                  _LEAF_  =                   28;
17902 +                  P_totalsal  =     76233.8923076923;
17903 +                  V_totalsal  =     77924.7037037037;
17904 +                  END;
17905 +                END;
17906 +              END;
17907 +            END;
17908 +          END;
17909 +        END;
17910 +      ELSE DO;
17911 +        IF  NOT MISSING(nonstsal ) AND
17912 +                       47236.5 <= nonstsal  THEN DO;
17913 +          IF  NOT MISSING(nonstsal ) AND
17914 +                         57561.5 <= nonstsal  THEN DO;
17915 +            IF  NOT MISSING(nonstsal ) AND
17916 +                             64045 <= nonstsal  THEN DO;
17917 +              _NODE_  =                   67;
17918 +              _LEAF_  =                   21;
17919 +              P_totalsal  =     67651.3558282208;
17920 +              V_totalsal  =             67018.65;
17921 +              END;
17922 +            ELSE DO;
17923 +              _NODE_  =                   66;
17924 +              _LEAF_  =                   20;
17925 +              P_totalsal  =     62452.1654411764;
17926 +              V_totalsal  =     62460.6293103448;
17927 +              END;
17928 +            END;
17929 +          ELSE DO;
17930 +            _ARBFMT_28 = PUT( position , $28.);
17931 +             %DMNORMIP( _ARBFMT_28);
17932 +            IF _ARBFMT_28 IN ('OTHER' ,'ADMIN' ,'ASSISTANT OTHER' ,
17933 +            'BUILDING' ,'CLINICAL OTHER' ,'CLINICAL RESEARCH' ,'DATA' ,
17934 +            'EXECUTIVE' ,'RESEARCH OTHER' ,'OTHER PROGRAM' ,
17935 +            'PROJECT MANAGER' ,'RESEARCH ASSISTANT' ,'RESEARCH ASSOCIATE' ,
17936 +              'RESEARCH SPECIALIST' ,'RESEARCH TECHNICIAN' ) THEN DO;
17937 +              IF  NOT MISSING(nonstsal ) AND
17938 +                             52314.5 <= nonstsal  THEN DO;
17939 +                IF  NOT MISSING(nonstsal ) AND
17940 +                  nonstsal  <                54069 THEN DO;
17941 +                  _NODE_  =                  118;
17942 +                  _LEAF_  =                   17;
17943 +                  P_totalsal  =     53463.0326086956;
17944 +                  V_totalsal  =     53454.8205128205;
17945 +                  END;
17946 +                ELSE DO;
17947 +                  _NODE_  =                  119;
17948 +                  _LEAF_  =                   18;
17949 +                  P_totalsal  =     56112.2881355932;
17950 +                  V_totalsal  =     56244.7291666666;
17951 +                  END;
17952 +                END;
17953 +              ELSE DO;
17954 +                IF  NOT MISSING(nonstsal ) AND
17955 +                               50208.5 <= nonstsal  THEN DO;
17956 +                  _NODE_  =                  117;
17957 +                  _LEAF_  =                   16;
17958 +                  P_totalsal  =     51353.1333333333;
17959 +                  V_totalsal  =     51452.6818181818;
17960 +                  END;
17961 +                ELSE DO;
17962 +                  IF  NOT MISSING(nonstsal ) AND
17963 +                    nonstsal  <              48572.5 THEN DO;
17964 +                    _NODE_  =                  128;
17965 +                    _LEAF_  =                   14;
17966 +                    P_totalsal  =     48331.1384615384;
17967 +                    V_totalsal  =     48000.1891891891;
17968 +                    END;
17969 +                  ELSE DO;
17970 +                    _NODE_  =                  129;
17971 +                    _LEAF_  =                   15;
17972 +                    P_totalsal  =     49615.2093023255;
17973 +                    V_totalsal  =     49436.8378378378;
17974 +                    END;
17975 +                  END;
17976 +                END;
17977 +              END;
17978 +            ELSE DO;
17979 +              _NODE_  =                   65;
17980 +              _LEAF_  =                   19;
17981 +              P_totalsal  =             59423.75;
17982 +              V_totalsal  =     58581.1666666666;
17983 +              END;
17984 +            END;
17985 +          END;
17986 +        ELSE DO;
17987 +          IF  NOT MISSING(statesal ) AND
17988 +                         39899.5 <= statesal  THEN DO;
17989 +            IF  NOT MISSING(nonstsal ) AND
17990 +                           11020.5 <= nonstsal  THEN DO;
17991 +              _NODE_  =                   63;
17992 +              _LEAF_  =                   13;
17993 +              P_totalsal  =     70818.3703703703;
17994 +              V_totalsal  =            76347.125;
17995 +              END;
17996 +            ELSE DO;
17997 +              IF  NOT MISSING(statesal ) AND
17998 +                             46728.5 <= statesal  THEN DO;
17999 +                IF  NOT MISSING(statesal ) AND
18000 +                                 49470 <= statesal  THEN DO;
18001 +                  _NODE_  =                  115;
18002 +                  _LEAF_  =                   12;
18003 +                  P_totalsal  =     51269.5405405405;
18004 +                  V_totalsal  =     50776.3703703703;
18005 +                  END;
18006 +                ELSE DO;
18007 +                  _NODE_  =                  114;
18008 +                  _LEAF_  =                   11;
18009 +                  P_totalsal  =     48737.9183673469;
18010 +                  V_totalsal  =     48443.6041666666;
18011 +                  END;
18012 +                END;
18013 +              ELSE DO;
18014 +                IF  NOT MISSING(statesal ) AND
18015 +                                 43211 <= statesal  THEN DO;
18016 +                  IF  NOT MISSING(statesal ) AND
18017 +                                 44928.5 <= statesal  THEN DO;
18018 +                    _NODE_  =                  127;
18019 +                    _LEAF_  =                   10;
18020 +                    P_totalsal  =              45916.1;
18021 +                    V_totalsal  =     46094.6470588235;
18022 +                    END;
18023 +                  ELSE DO;
18024 +                    _NODE_  =                  126;
18025 +                    _LEAF_  =                    9;
18026 +                    P_totalsal  =     44672.6947368421;
18027 +                    V_totalsal  =     44674.4871794871;
18028 +                    END;
18029 +                  END;
18030 +                ELSE DO;
18031 +                  _NODE_  =                  112;
18032 +                  _LEAF_  =                    8;
18033 +                  P_totalsal  =     42302.3103448275;
18034 +                  V_totalsal  =      41848.527027027;
18035 +                  END;
18036 +                END;
18037 +              END;
18038 +            END;
18039 +          ELSE DO;
18040 +            IF  NOT MISSING(nonstsal ) AND
18041 +                             36731 <= nonstsal  THEN DO;
18042 +              IF  NOT MISSING(nonstsal ) AND
18043 +                nonstsal  <                41994 THEN DO;
18044 +                IF  NOT MISSING(nonstsal ) AND
18045 +                  nonstsal  <              39506.5 THEN DO;
18046 +                  _NODE_  =                  108;
18047 +                  _LEAF_  =                    5;
18048 +                  P_totalsal  =     39119.9294117647;
18049 +                  V_totalsal  =     38680.7432432432;
18050 +                  END;
18051 +                ELSE DO;
18052 +                  _NODE_  =                  109;
18053 +                  _LEAF_  =                    6;
18054 +                  P_totalsal  =      41742.612745098;
18055 +                  V_totalsal  =     42987.9304347826;
18056 +                  END;
18057 +                END;
18058 +              ELSE DO;
18059 +                _NODE_  =                   85;
18060 +                _LEAF_  =                    7;
18061 +                P_totalsal  =     45920.9526315789;
18062 +                V_totalsal  =      45435.050955414;
18063 +                END;
18064 +              END;
18065 +            ELSE DO;
18066 +              _ARBFMT_30 = PUT( exempt2 , $30.);
18067 +               %DMNORMIP( _ARBFMT_30);
18068 +              IF _ARBFMT_30 IN ('NON-PERMANENT' ) THEN DO;
18069 +                _NODE_  =                   83;
18070 +                _LEAF_  =                    4;
18071 +                P_totalsal  =     18065.0520833333;
18072 +                V_totalsal  =                16201;
18073 +                END;
18074 +              ELSE DO;
18075 +                IF  NOT MISSING(statesal ) AND
18076 +                               30203.5 <= statesal  THEN DO;
18077 +                  _NODE_  =                  107;
18078 +                  _LEAF_  =                    3;
18079 +                  P_totalsal  =     38949.9046153846;
18080 +                  V_totalsal  =     38674.6518518518;
18081 +                  END;
18082 +                ELSE DO;
18083 +                  IF  NOT MISSING(nonstsal ) AND
18084 +                    nonstsal  <                13312 THEN DO;
18085 +                    _NODE_  =                  122;
18086 +                    _LEAF_  =                    1;
18087 +                    P_totalsal  =      26887.873076923;
18088 +                    V_totalsal  =              27700.2;
18089 +                    END;
18090 +                  ELSE DO;
18091 +                    _NODE_  =                  123;
18092 +                    _LEAF_  =                    2;
18093 +                    P_totalsal  =     33620.4532258064;
18094 +                    V_totalsal  =     33052.4937238493;
18095 +                    END;
18096 +                  END;
18097 +                END;
18098 +              END;
18099 +            END;
18100 +          END;
18101 +        END;
18102 +      END;
18103 +    END;
18104 +  END;
18105 +
18106 +*****  RESIDUALS R_ *************;
18107 +IF MISSING( totalsal ) THEN R_totalsal  = .;
18108 +ELSE R_totalsal  = totalsal  - P_totalsal ;
18109 +
18110 +****************************************************************;
18111 +******          END OF DECISION TREE SCORING CODE         ******;
18112 +****************************************************************;
18113 +
18114 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18115  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE5_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
18116  quit;
18117  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
18118  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas";
18119  *------------------------------------------------------------*;
18120  * Tree5: Scoring TEST data;
18121  *------------------------------------------------------------*;
18122  data EMWS1.Tree5_TEST
18123  / view=EMWS1.Tree5_TEST
18124  ;
18125  set EMWS1.Part_TEST
18126  ;
18127  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree5\EMFLOWSCORE.sas.
18128 +****************************************************************;
18129 +******             DECISION TREE SCORING CODE             ******;
18130 +****************************************************************;
18131 +
18132 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
18133 +LENGTH _WARN_  $    4;
18134 +
18135 +******              LABELS FOR NEW VARIABLES              ******;
18136 +label _NODE_ = 'Node' ;
18137 +label _LEAF_ = 'Leaf' ;
18138 +label P_totalsal = 'Predicted: totalsal' ;
18139 +label V_totalsal = 'Validated: totalsal' ;
18140 +label R_totalsal = 'Residual: totalsal' ;
18141 +label _WARN_ = 'Warnings' ;
18142 +
18143 +
18144 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
18145 +LENGTH _ARBFMT_30 $     30; DROP _ARBFMT_30;
18146 +_ARBFMT_30 = ' '; /* Initialize to avoid warning. */
18147 +LENGTH _ARBFMT_28 $     28; DROP _ARBFMT_28;
18148 +_ARBFMT_28 = ' '; /* Initialize to avoid warning. */
18149 +
18150 +
18151 +******             ASSIGN OBSERVATION TO NODE             ******;
18152 +IF  NOT MISSING(nonstsal ) AND
18153 +                115051 <= nonstsal  THEN DO;
18154 +  IF  NOT MISSING(nonstsal ) AND
18155 +                257529.5 <= nonstsal  THEN DO;
18156 +    IF  NOT MISSING(nonstsal ) AND
18157 +                  319837.5 <= nonstsal  THEN DO;
18158 +      _NODE_  =                   15;
18159 +      _LEAF_  =                   62;
18160 +      P_totalsal  =             430459.4;
18161 +      V_totalsal  =     417005.789473684;
18162 +      END;
18163 +    ELSE DO;
18164 +      _NODE_  =                   14;
18165 +      _LEAF_  =                   61;
18166 +      P_totalsal  =     298051.519480519;
18167 +      V_totalsal  =         291616.96875;
18168 +      END;
18169 +    END;
18170 +  ELSE DO;
18171 +    IF  NOT MISSING(nonstsal ) AND
18172 +                    180203 <= nonstsal  THEN DO;
18173 +      IF  NOT MISSING(nonstsal ) AND
18174 +        nonstsal  <             209437.5 THEN DO;
18175 +        _NODE_  =                   26;
18176 +        _LEAF_  =                   59;
18177 +        P_totalsal  =     205348.279069767;
18178 +        V_totalsal  =     203595.418604651;
18179 +        END;
18180 +      ELSE DO;
18181 +        _NODE_  =                   27;
18182 +        _LEAF_  =                   60;
18183 +        P_totalsal  =     243136.530973451;
18184 +        V_totalsal  =     245666.222222222;
18185 +        END;
18186 +      END;
18187 +    ELSE DO;
18188 +      IF  NOT MISSING(statesal ) AND
18189 +                      7640.5 <= statesal  THEN DO;
18190 +        _NODE_  =                   25;
18191 +        _LEAF_  =                   58;
18192 +        P_totalsal  =     193310.744897959;
18193 +        V_totalsal  =     188562.465116279;
18194 +        END;
18195 +      ELSE DO;
18196 +        IF  NOT MISSING(nonstsal ) AND
18197 +                      148505.5 <= nonstsal  THEN DO;
18198 +          IF  NOT MISSING(nonstsal ) AND
18199 +            nonstsal  <               163762 THEN DO;
18200 +            _NODE_  =                   58;
18201 +            _LEAF_  =                   56;
18202 +            P_totalsal  =            155528.94;
18203 +            V_totalsal  =     155128.277777777;
18204 +            END;
18205 +          ELSE DO;
18206 +            _NODE_  =                   59;
18207 +            _LEAF_  =                   57;
18208 +            P_totalsal  =     172026.475409836;
18209 +            V_totalsal  =     173655.545454545;
18210 +            END;
18211 +          END;
18212 +        ELSE DO;
18213 +          IF  NOT MISSING(nonstsal ) AND
18214 +                        131707.5 <= nonstsal  THEN DO;
18215 +            _NODE_  =                   57;
18216 +            _LEAF_  =                   55;
18217 +            P_totalsal  =     140011.491525423;
18218 +            V_totalsal  =     140091.541666666;
18219 +            END;
18220 +          ELSE DO;
18221 +            _NODE_  =                   56;
18222 +            _LEAF_  =                   54;
18223 +            P_totalsal  =        123389.078125;
18224 +            V_totalsal  =     123918.555555555;
18225 +            END;
18226 +          END;
18227 +        END;
18228 +      END;
18229 +    END;
18230 +  END;
18231 +ELSE DO;
18232 +  IF  NOT MISSING(statesal ) AND
18233 +                   87510 <= statesal  THEN DO;
18234 +    IF  NOT MISSING(statesal ) AND
18235 +                    157105 <= statesal  THEN DO;
18236 +      IF  NOT MISSING(statesal ) AND
18237 +                      192854 <= statesal  THEN DO;
18238 +        _NODE_  =                   23;
18239 +        _LEAF_  =                   53;
18240 +        P_totalsal  =     264361.269230769;
18241 +        V_totalsal  =     268468.275862069;
18242 +        END;
18243 +      ELSE DO;
18244 +        _NODE_  =                   22;
18245 +        _LEAF_  =                   52;
18246 +        P_totalsal  =     188379.583333333;
18247 +        V_totalsal  =     197484.576923076;
18248 +        END;
18249 +      END;
18250 +    ELSE DO;
18251 +      IF  NOT MISSING(nonstsal ) AND
18252 +                     23033.5 <= nonstsal  THEN DO;
18253 +        IF  NOT MISSING(statesal ) AND
18254 +          statesal  <               111605 THEN DO;
18255 +          _NODE_  =                   36;
18256 +          _LEAF_  =                   50;
18257 +          P_totalsal  =     145322.421052631;
18258 +          V_totalsal  =     141973.761904761;
18259 +          END;
18260 +        ELSE DO;
18261 +          _NODE_  =                   37;
18262 +          _LEAF_  =                   51;
18263 +          P_totalsal  =     175551.742424242;
18264 +          V_totalsal  =     183700.727272727;
18265 +          END;
18266 +        END;
18267 +      ELSE DO;
18268 +        IF  NOT MISSING(statesal ) AND
18269 +                      117576.5 <= statesal  THEN DO;
18270 +          IF  NOT MISSING(statesal ) AND
18271 +                          136441 <= statesal  THEN DO;
18272 +            _NODE_  =                   55;
18273 +            _LEAF_  =                   49;
18274 +            P_totalsal  =     149342.807017543;
18275 +            V_totalsal  =     150521.045454545;
18276 +            END;
18277 +          ELSE DO;
18278 +            _NODE_  =                   54;
18279 +            _LEAF_  =                   48;
18280 +            P_totalsal  =     131039.036144578;
18281 +            V_totalsal  =         128212.84375;
18282 +            END;
18283 +          END;
18284 +        ELSE DO;
18285 +          IF  NOT MISSING(statesal ) AND
18286 +                        101772.5 <= statesal  THEN DO;
18287 +            IF  NOT MISSING(statesal ) AND
18288 +                            110326 <= statesal  THEN DO;
18289 +              _NODE_  =                   81;
18290 +              _LEAF_  =                   47;
18291 +              P_totalsal  =        117554.203125;
18292 +              V_totalsal  =            116456.85;
18293 +              END;
18294 +            ELSE DO;
18295 +              _NODE_  =                   80;
18296 +              _LEAF_  =                   46;
18297 +              P_totalsal  =     109521.424657534;
18298 +              V_totalsal  =     109758.829268292;
18299 +              END;
18300 +            END;
18301 +          ELSE DO;
18302 +            IF  NOT MISSING(statesal ) AND
18303 +                           95789.5 <= statesal  THEN DO;
18304 +              _NODE_  =                   79;
18305 +              _LEAF_  =                   45;
18306 +              P_totalsal  =     101223.018518518;
18307 +              V_totalsal  =          99647.84375;
18308 +              END;
18309 +            ELSE DO;
18310 +              IF  NOT MISSING(statesal ) AND
18311 +                               91975 <= statesal  THEN DO;
18312 +                _NODE_  =                  105;
18313 +                _LEAF_  =                   44;
18314 +                P_totalsal  =     95334.1960784313;
18315 +                V_totalsal  =             95030.85;
18316 +                END;
18317 +              ELSE DO;
18318 +                _NODE_  =                  104;
18319 +                _LEAF_  =                   43;
18320 +                P_totalsal  =     90711.1296296296;
18321 +                V_totalsal  =              91231.4;
18322 +                END;
18323 +              END;
18324 +            END;
18325 +          END;
18326 +        END;
18327 +      END;
18328 +    END;
18329 +  ELSE DO;
18330 +    IF  NOT MISSING(nonstsal ) AND
18331 +                     68358 <= nonstsal  THEN DO;
18332 +      IF  NOT MISSING(statesal ) AND
18333 +                       27171 <= statesal  THEN DO;
18334 +        _NODE_  =                   19;
18335 +        _LEAF_  =                   42;
18336 +        P_totalsal  =     142233.363636363;
18337 +        V_totalsal  =     138015.111111111;
18338 +        END;
18339 +      ELSE DO;
18340 +        IF  NOT MISSING(nonstsal ) AND
18341 +                       89303.5 <= nonstsal  THEN DO;
18342 +          IF  NOT MISSING(nonstsal ) AND
18343 +                        102882.5 <= nonstsal  THEN DO;
18344 +            _NODE_  =                   51;
18345 +            _LEAF_  =                   41;
18346 +            P_totalsal  =          111508.4125;
18347 +            V_totalsal  =     113460.117647058;
18348 +            END;
18349 +          ELSE DO;
18350 +            IF  NOT MISSING(nonstsal ) AND
18351 +                             95966 <= nonstsal  THEN DO;
18352 +              _NODE_  =                   77;
18353 +              _LEAF_  =                   40;
18354 +              P_totalsal  =     100421.356164383;
18355 +              V_totalsal  =     100345.344827586;
18356 +              END;
18357 +            ELSE DO;
18358 +              IF  NOT MISSING(nonstsal ) AND
18359 +                             92349.5 <= nonstsal  THEN DO;
18360 +                _NODE_  =                  103;
18361 +                _LEAF_  =                   39;
18362 +                P_totalsal  =              95371.3;
18363 +                V_totalsal  =            96703.375;
18364 +                END;
18365 +              ELSE DO;
18366 +                _NODE_  =                  102;
18367 +                _LEAF_  =                   38;
18368 +                P_totalsal  =     91942.7910447761;
18369 +                V_totalsal  =              90884.6;
18370 +                END;
18371 +              END;
18372 +            END;
18373 +          END;
18374 +        ELSE DO;
18375 +          IF  NOT MISSING(nonstsal ) AND
18376 +                           79396 <= nonstsal  THEN DO;
18377 +            IF  NOT MISSING(nonstsal ) AND
18378 +                           84951.5 <= nonstsal  THEN DO;
18379 +              _NODE_  =                   75;
18380 +              _LEAF_  =                   37;
18381 +              P_totalsal  =     87713.6266666666;
18382 +              V_totalsal  =          86818.59375;
18383 +              END;
18384 +            ELSE DO;
18385 +              IF  NOT MISSING(nonstsal ) AND
18386 +                               82225 <= nonstsal  THEN DO;
18387 +                _NODE_  =                  101;
18388 +                _LEAF_  =                   36;
18389 +                P_totalsal  =              83984.8;
18390 +                V_totalsal  =     85157.4782608695;
18391 +                END;
18392 +              ELSE DO;
18393 +                _NODE_  =                  100;
18394 +                _LEAF_  =                   35;
18395 +                P_totalsal  =     81679.0512820512;
18396 +                V_totalsal  =     81507.3636363636;
18397 +                END;
18398 +              END;
18399 +            END;
18400 +          ELSE DO;
18401 +            IF  NOT MISSING(nonstsal ) AND
18402 +                             73932 <= nonstsal  THEN DO;
18403 +              _NODE_  =                   73;
18404 +              _LEAF_  =                   34;
18405 +              P_totalsal  =     77790.8088235294;
18406 +              V_totalsal  =     77070.1896551724;
18407 +              END;
18408 +            ELSE DO;
18409 +              IF  NOT MISSING(nonstsal ) AND
18410 +                nonstsal  <                70266 THEN DO;
18411 +                _NODE_  =                   98;
18412 +                _LEAF_  =                   32;
18413 +                P_totalsal  =         70739.328125;
18414 +                V_totalsal  =             69560.12;
18415 +                END;
18416 +              ELSE DO;
18417 +                _NODE_  =                   99;
18418 +                _LEAF_  =                   33;
18419 +                P_totalsal  =     73731.6288659793;
18420 +                V_totalsal  =                73035;
18421 +                END;
18422 +              END;
18423 +            END;
18424 +          END;
18425 +        END;
18426 +      END;
18427 +    ELSE DO;
18428 +      IF  NOT MISSING(statesal ) AND
18429 +                     51742.5 <= statesal  THEN DO;
18430 +        IF  NOT MISSING(nonstsal ) AND
18431 +                       18694.5 <= nonstsal  THEN DO;
18432 +          _NODE_  =                   31;
18433 +          _LEAF_  =                   31;
18434 +          P_totalsal  =     105386.494949494;
18435 +          V_totalsal  =     113819.975609756;
18436 +          END;
18437 +        ELSE DO;
18438 +          IF  NOT MISSING(statesal ) AND
18439 +            statesal  <              66247.5 THEN DO;
18440 +            IF  NOT MISSING(statesal ) AND
18441 +                             59398 <= statesal  THEN DO;
18442 +              IF  NOT MISSING(statesal ) AND
18443 +                             63139.5 <= statesal  THEN DO;
18444 +                _NODE_  =                   93;
18445 +                _LEAF_  =                   25;
18446 +                P_totalsal  =     65855.1803278688;
18447 +                V_totalsal  =     65535.5142857143;
18448 +                END;
18449 +              ELSE DO;
18450 +                _NODE_  =                   92;
18451 +                _LEAF_  =                   24;
18452 +                P_totalsal  =                62329;
18453 +                V_totalsal  =     62293.6363636363;
18454 +                END;
18455 +              END;
18456 +            ELSE DO;
18457 +              IF  NOT MISSING(statesal ) AND
18458 +                statesal  <                54315 THEN DO;
18459 +                _NODE_  =                   90;
18460 +                _LEAF_  =                   22;
18461 +                P_totalsal  =     54687.5932203389;
18462 +                V_totalsal  =     55166.5151515151;
18463 +                END;
18464 +              ELSE DO;
18465 +                _NODE_  =                   91;
18466 +                _LEAF_  =                   23;
18467 +                P_totalsal  =     58492.0076335878;
18468 +                V_totalsal  =     58224.2903225806;
18469 +                END;
18470 +              END;
18471 +            END;
18472 +          ELSE DO;
18473 +            IF  NOT MISSING(statesal ) AND
18474 +                             77561 <= statesal  THEN DO;
18475 +              IF  NOT MISSING(statesal ) AND
18476 +                             82821.5 <= statesal  THEN DO;
18477 +                _NODE_  =                   97;
18478 +                _LEAF_  =                   30;
18479 +                P_totalsal  =              86975.4;
18480 +                V_totalsal  =     86406.1428571428;
18481 +                END;
18482 +              ELSE DO;
18483 +                _NODE_  =                   96;
18484 +                _LEAF_  =                   29;
18485 +                P_totalsal  =     81559.6236559139;
18486 +                V_totalsal  =     80036.2647058823;
18487 +                END;
18488 +              END;
18489 +            ELSE DO;
18490 +              IF  NOT MISSING(statesal ) AND
18491 +                statesal  <              71563.5 THEN DO;
18492 +                _NODE_  =                   94;
18493 +                _LEAF_  =                   26;
18494 +                P_totalsal  =     70544.2612612612;
18495 +                V_totalsal  =     71108.8409090909;
18496 +                END;
18497 +              ELSE DO;
18498 +                IF  NOT MISSING(statesal ) AND
18499 +                  statesal  <                74875 THEN DO;
18500 +                  _NODE_  =                  120;
18501 +                  _LEAF_  =                   27;
18502 +                  P_totalsal  =     73895.7868852459;
18503 +                  V_totalsal  =     75461.8484848484;
18504 +                  END;
18505 +                ELSE DO;
18506 +                  _NODE_  =                  121;
18507 +                  _LEAF_  =                   28;
18508 +                  P_totalsal  =     76233.8923076923;
18509 +                  V_totalsal  =     77924.7037037037;
18510 +                  END;
18511 +                END;
18512 +              END;
18513 +            END;
18514 +          END;
18515 +        END;
18516 +      ELSE DO;
18517 +        IF  NOT MISSING(nonstsal ) AND
18518 +                       47236.5 <= nonstsal  THEN DO;
18519 +          IF  NOT MISSING(nonstsal ) AND
18520 +                         57561.5 <= nonstsal  THEN DO;
18521 +            IF  NOT MISSING(nonstsal ) AND
18522 +                             64045 <= nonstsal  THEN DO;
18523 +              _NODE_  =                   67;
18524 +              _LEAF_  =                   21;
18525 +              P_totalsal  =     67651.3558282208;
18526 +              V_totalsal  =             67018.65;
18527 +              END;
18528 +            ELSE DO;
18529 +              _NODE_  =                   66;
18530 +              _LEAF_  =                   20;
18531 +              P_totalsal  =     62452.1654411764;
18532 +              V_totalsal  =     62460.6293103448;
18533 +              END;
18534 +            END;
18535 +          ELSE DO;
18536 +            _ARBFMT_28 = PUT( position , $28.);
18537 +             %DMNORMIP( _ARBFMT_28);
18538 +            IF _ARBFMT_28 IN ('OTHER' ,'ADMIN' ,'ASSISTANT OTHER' ,
18539 +            'BUILDING' ,'CLINICAL OTHER' ,'CLINICAL RESEARCH' ,'DATA' ,
18540 +            'EXECUTIVE' ,'RESEARCH OTHER' ,'OTHER PROGRAM' ,
18541 +            'PROJECT MANAGER' ,'RESEARCH ASSISTANT' ,'RESEARCH ASSOCIATE' ,
18542 +              'RESEARCH SPECIALIST' ,'RESEARCH TECHNICIAN' ) THEN DO;
18543 +              IF  NOT MISSING(nonstsal ) AND
18544 +                             52314.5 <= nonstsal  THEN DO;
18545 +                IF  NOT MISSING(nonstsal ) AND
18546 +                  nonstsal  <                54069 THEN DO;
18547 +                  _NODE_  =                  118;
18548 +                  _LEAF_  =                   17;
18549 +                  P_totalsal  =     53463.0326086956;
18550 +                  V_totalsal  =     53454.8205128205;
18551 +                  END;
18552 +                ELSE DO;
18553 +                  _NODE_  =                  119;
18554 +                  _LEAF_  =                   18;
18555 +                  P_totalsal  =     56112.2881355932;
18556 +                  V_totalsal  =     56244.7291666666;
18557 +                  END;
18558 +                END;
18559 +              ELSE DO;
18560 +                IF  NOT MISSING(nonstsal ) AND
18561 +                               50208.5 <= nonstsal  THEN DO;
18562 +                  _NODE_  =                  117;
18563 +                  _LEAF_  =                   16;
18564 +                  P_totalsal  =     51353.1333333333;
18565 +                  V_totalsal  =     51452.6818181818;
18566 +                  END;
18567 +                ELSE DO;
18568 +                  IF  NOT MISSING(nonstsal ) AND
18569 +                    nonstsal  <              48572.5 THEN DO;
18570 +                    _NODE_  =                  128;
18571 +                    _LEAF_  =                   14;
18572 +                    P_totalsal  =     48331.1384615384;
18573 +                    V_totalsal  =     48000.1891891891;
18574 +                    END;
18575 +                  ELSE DO;
18576 +                    _NODE_  =                  129;
18577 +                    _LEAF_  =                   15;
18578 +                    P_totalsal  =     49615.2093023255;
18579 +                    V_totalsal  =     49436.8378378378;
18580 +                    END;
18581 +                  END;
18582 +                END;
18583 +              END;
18584 +            ELSE DO;
18585 +              _NODE_  =                   65;
18586 +              _LEAF_  =                   19;
18587 +              P_totalsal  =             59423.75;
18588 +              V_totalsal  =     58581.1666666666;
18589 +              END;
18590 +            END;
18591 +          END;
18592 +        ELSE DO;
18593 +          IF  NOT MISSING(statesal ) AND
18594 +                         39899.5 <= statesal  THEN DO;
18595 +            IF  NOT MISSING(nonstsal ) AND
18596 +                           11020.5 <= nonstsal  THEN DO;
18597 +              _NODE_  =                   63;
18598 +              _LEAF_  =                   13;
18599 +              P_totalsal  =     70818.3703703703;
18600 +              V_totalsal  =            76347.125;
18601 +              END;
18602 +            ELSE DO;
18603 +              IF  NOT MISSING(statesal ) AND
18604 +                             46728.5 <= statesal  THEN DO;
18605 +                IF  NOT MISSING(statesal ) AND
18606 +                                 49470 <= statesal  THEN DO;
18607 +                  _NODE_  =                  115;
18608 +                  _LEAF_  =                   12;
18609 +                  P_totalsal  =     51269.5405405405;
18610 +                  V_totalsal  =     50776.3703703703;
18611 +                  END;
18612 +                ELSE DO;
18613 +                  _NODE_  =                  114;
18614 +                  _LEAF_  =                   11;
18615 +                  P_totalsal  =     48737.9183673469;
18616 +                  V_totalsal  =     48443.6041666666;
18617 +                  END;
18618 +                END;
18619 +              ELSE DO;
18620 +                IF  NOT MISSING(statesal ) AND
18621 +                                 43211 <= statesal  THEN DO;
18622 +                  IF  NOT MISSING(statesal ) AND
18623 +                                 44928.5 <= statesal  THEN DO;
18624 +                    _NODE_  =                  127;
18625 +                    _LEAF_  =                   10;
18626 +                    P_totalsal  =              45916.1;
18627 +                    V_totalsal  =     46094.6470588235;
18628 +                    END;
18629 +                  ELSE DO;
18630 +                    _NODE_  =                  126;
18631 +                    _LEAF_  =                    9;
18632 +                    P_totalsal  =     44672.6947368421;
18633 +                    V_totalsal  =     44674.4871794871;
18634 +                    END;
18635 +                  END;
18636 +                ELSE DO;
18637 +                  _NODE_  =                  112;
18638 +                  _LEAF_  =                    8;
18639 +                  P_totalsal  =     42302.3103448275;
18640 +                  V_totalsal  =      41848.527027027;
18641 +                  END;
18642 +                END;
18643 +              END;
18644 +            END;
18645 +          ELSE DO;
18646 +            IF  NOT MISSING(nonstsal ) AND
18647 +                             36731 <= nonstsal  THEN DO;
18648 +              IF  NOT MISSING(nonstsal ) AND
18649 +                nonstsal  <                41994 THEN DO;
18650 +                IF  NOT MISSING(nonstsal ) AND
18651 +                  nonstsal  <              39506.5 THEN DO;
18652 +                  _NODE_  =                  108;
18653 +                  _LEAF_  =                    5;
18654 +                  P_totalsal  =     39119.9294117647;
18655 +                  V_totalsal  =     38680.7432432432;
18656 +                  END;
18657 +                ELSE DO;
18658 +                  _NODE_  =                  109;
18659 +                  _LEAF_  =                    6;
18660 +                  P_totalsal  =      41742.612745098;
18661 +                  V_totalsal  =     42987.9304347826;
18662 +                  END;
18663 +                END;
18664 +              ELSE DO;
18665 +                _NODE_  =                   85;
18666 +                _LEAF_  =                    7;
18667 +                P_totalsal  =     45920.9526315789;
18668 +                V_totalsal  =      45435.050955414;
18669 +                END;
18670 +              END;
18671 +            ELSE DO;
18672 +              _ARBFMT_30 = PUT( exempt2 , $30.);
18673 +               %DMNORMIP( _ARBFMT_30);
18674 +              IF _ARBFMT_30 IN ('NON-PERMANENT' ) THEN DO;
18675 +                _NODE_  =                   83;
18676 +                _LEAF_  =                    4;
18677 +                P_totalsal  =     18065.0520833333;
18678 +                V_totalsal  =                16201;
18679 +                END;
18680 +              ELSE DO;
18681 +                IF  NOT MISSING(statesal ) AND
18682 +                               30203.5 <= statesal  THEN DO;
18683 +                  _NODE_  =                  107;
18684 +                  _LEAF_  =                    3;
18685 +                  P_totalsal  =     38949.9046153846;
18686 +                  V_totalsal  =     38674.6518518518;
18687 +                  END;
18688 +                ELSE DO;
18689 +                  IF  NOT MISSING(nonstsal ) AND
18690 +                    nonstsal  <                13312 THEN DO;
18691 +                    _NODE_  =                  122;
18692 +                    _LEAF_  =                    1;
18693 +                    P_totalsal  =      26887.873076923;
18694 +                    V_totalsal  =              27700.2;
18695 +                    END;
18696 +                  ELSE DO;
18697 +                    _NODE_  =                  123;
18698 +                    _LEAF_  =                    2;
18699 +                    P_totalsal  =     33620.4532258064;
18700 +                    V_totalsal  =     33052.4937238493;
18701 +                    END;
18702 +                  END;
18703 +                END;
18704 +              END;
18705 +            END;
18706 +          END;
18707 +        END;
18708 +      END;
18709 +    END;
18710 +  END;
18711 +
18712 +*****  RESIDUALS R_ *************;
18713 +IF MISSING( totalsal ) THEN R_totalsal  = .;
18714 +ELSE R_totalsal  = totalsal  - P_totalsal ;
18715 +
18716 +****************************************************************;
18717 +******          END OF DECISION TREE SCORING CODE         ******;
18718 +****************************************************************;
18719 +
18720 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18721  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE5_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
18722  quit;
18723  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE5_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
18725  proc sort data=WORK.EM_USER_REPORT;
18726  by ID VIEW;
18727  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18728  *------------------------------------------------------------*;
18729  * Tree5: Computing metadata for TRAIN data;
18730  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE5_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
19125  data WORK.MODELTEMP_INFO;
19126  set EMWS1.Tree5_EMINFO;
19127  where DATA='Tree5' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
19128  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE5_EMINFO.
      WHERE (DATA='Tree5') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19129  data EMWS1.Tree5_EMINFO;
19130  length TARGET KEY $32 DATA $43;
19131  input TARGET KEY DATA $;
19132  cards;
 
NOTE: The data set EMWS1.TREE5_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19136  run;
19137  data EMWS1.Tree5_EMINFO;
19138  set EMWS1.Tree5_EMINFO WORK.MODELTEMP_INFO;
19139  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE5_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE5_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19140  proc sort data = EMWS1.Tree5_EMINFO NOTHREADS;
19141  by TARGET KEY;
19142  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE5_EMINFO.
NOTE: The data set EMWS1.TREE5_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19143  proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
19144  by TARGET KEY;
19145  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19146  proc sort data = EMWS1.Tree5_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
19147  by TARGET KEY;
19148  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE5_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19149  data EMWS1.Tree5_EMINFO;
19150  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
19151  by TARGET KEY;
19152  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE5_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19153  proc datasets lib=work nolist;
19154  delete TEMP_INFO SORTEDEMINFO;
19155  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
19156  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE5_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE5_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE5_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 21, 2016
Time:                05:42:06
*------------------------------------------------------------*
19180  data EMWS1.Tree5_EMOUTFIT;
19181  set EMWS1.Tree5_EMOUTFIT;
19182  length TargetLabel $200;
19183  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
19184  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE5_EMOUTFIT.
NOTE: The data set EMWS1.TREE5_EMOUTFIT has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19185  proc sort data=EMWS1.Tree5_EMREPORTFIT nothreads;
19186  by TARGET;
19187  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE5_EMREPORTFIT.
NOTE: The data set EMWS1.TREE5_EMREPORTFIT has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19188  %let _EMwarndup = 0;
19189  %let _EMtargetdup =;
19190  %let _EMASEtargetdup =;
19191  data _null_;
19192  set EMWS1.Tree5_EMOUTFIT;
19193  if .<_ASE_<0.000001 then do;
19194  call symput('_EMwarndup', '1');
19195  call symput('_EMtargetdup', target);
19196  call symput('_EMASEtargetdup', put(_ASE_, best.));
19197  end;
19198  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE5_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19199  %let EMEXCEPTIONSTRING=;
19200  *------------------------------------------------------------*;
19201  * REPORT: Tree5;
19202  *------------------------------------------------------------*;
19203  %let EM_ACTION = REPORT;
19204  %let syscc = 0;
19205  %macro main;
19206
19207    %if %upcase(&EM_ACTION) = CREATE %then %do;
19208      filename temp catalog 'sashelp.emmodl.tree_create.source';
19209      %include temp;
19210      filename temp;
19211
19212      %em_tree_create;
19213    %end;
19214
19215     %else
19216     %if %upcase(&EM_ACTION) = TRAIN %then %do;
19217
19218         filename temp catalog 'sashelp.emmodl.tree_train.source';
19219         %include temp;
19220         filename temp;
19221         %em_tree_train;
19222     %end;
19223
19224    %else
19225    %if %upcase(&EM_ACTION) = SCORE %then %do;
19226      filename temp catalog 'sashelp.emmodl.tree_score.source';
19227      %include temp;
19228      filename temp;
19229
19230      %em_tree_score;
19231
19232    %end;
19233
19234    %else
19235    %if %upcase(&EM_ACTION) = REPORT %then %do;
19236
19237         filename temp catalog 'sashelp.emmodl.tree_report.source';
19238         %include temp;
19239         filename temp;
19240
19241         %em_tree_report;
19242     %end;
19243
19244    %else
19245    %if %upcase(&EM_ACTION) = OPENINT %then %do;
19246
19247         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19248         %include temp;
19249         filename temp;
19250         %EM_TREE_OPENTREEVIEWER;
19251
19252     %end;
19253
19254    %else
19255    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19256
19257         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19258         %include temp;
19259         filename temp;
19260         %EM_TREE_CLOSETREEVIEWER;
19261
19262     %end;
19263
19264
19265     %doendm:
19266  %mend main;
19267
19268  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
19270 +%macro em_tree_makePlotDs( multipleTar= );
19272 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19273 +  %EM_GETNAME(key=OUTNODES, type=DATA);
19274 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19275 +  %EM_GETNAME(key=OUTRULES, type=DATA);
19277 +  /* determine if validation statistics will be displayed */
19278 +  %let validflag=N;
19279 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
19280 +    /* determine if validation data exists */
19281 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
19282 +      %let validflag=Y;
19283 +    %end;
19284 +  %end;
19286 +   /* retrieve name of decmeta even in presence of multiple targets */
19287 +   %let decmeta = ;
19288 +   %if &EM_DEC_DECMETA eq %then %do;
19289 +     data _Target;
19290 +       set &em_data_variableset;
19291 +       where ROLE='TARGET' and USE in('D', 'Y');
19292 +       keep NAME;
19293 +     run;
19294 +     proc sort data=_Target;
19295 +       by NAME;
19296 +     run;
19297 +     proc sort data=EM_TARGETDECINFO;
19298 +       by TARGET;
19299 +     run;
19300 +     data _Target;
19301 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
19302 +       by NAME;
19303 +       if _a then do;
19304 +         call symput('decmeta', trim(DECMETA));
19305 +       end;
19306 +     run;
19307 +     proc delete data=_Target;run;
19308 +   %end;
19309 +   %else %let decmeta = &EM_DEC_DECMETA;
19312 +  /* retrieve targetEvent from decmeta */
19313 +  %let targetEvent=;
19314 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19315 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19316 +      data _null_;
19317 +       set &DECMETA(where=(_TYPE_="TARGET"));
19318 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19319 +      run;
19320 +    %end;
19321 +  %end;
19323 +  /* retrieve predicted var for targetEvent from decmeta */
19324 +  %let predTarget=;
19325 +  %let predLvl=;
19326 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19327 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19328 +      data _null_;
19329 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
19330 +       call symput('predTarget', strip(VARIABLE));
19331 +       call symput('predLvl', strip(LEVEL));
19332 +      run;
19333 +    %end;
19334 +  %end;
19335 +  %else %do;
19336 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19337 +      data _null_;
19338 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
19339 +       call symput('predTarget', strip(VARIABLE));
19340 +      run;
19341 +    %end;
19342 +  %end;
19344 +  /* create BelowText value */
19345 +  data belowtext;
19346 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
19347 +    keep node belowtext;
19348 +  run;
19350 +  /* relace belowtext with variable label if it exists */
19351 +  data belowtext2;
19352 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
19353 +    keep node belowtextlbl;
19354 +  run;
19356 +  proc sort data=belowtext; by node; run;
19357 +  proc sort data=belowtext2; by node; run;
19359 +  data belowtext;
19360 +    merge belowtext belowtext2(in=_a);
19361 +    by node;
19362 +    if _a then belowtext=belowtextlbl;
19363 +    keep node belowtext;
19364 +  run;
19366 +  /* create AboveText value */
19367 +  data abovetext;
19368 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
19369 +  run;
19370 +  proc sort data=abovetext; by node numeric_value; run;
19372 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
19373 +  data abovetext;
19374 +    set abovetext(rename=(node=parent));
19375 +    by parent numeric_value;
19376 +    retain abovetext tempstring flag branch origval origchar ;
19377 +    length abovetext $256;
19378 +    length tempstring origchar $64;
19380 +    if STAT in ("INTERVAL", "ORDINAL") then do;
19381 +      if first.parent then do;
19382 +        if missing(character_value) then do;
19383 +          numeric_value = round(numeric_value, &sp_precision);
19384 +          abovetext = "< "||strip(NUMERIC_VALUE);
19385 +          branch = 1;
19386 +          origval = numeric_value;
19387 +          output;
19388 +        end;
19389 +        else do;
19390 +          abovetext = "< "||strip(CHARACTER_VALUE);
19391 +          branch = 1;
19392 +          origchar = character_value;
19393 +          output;
19394 +        end;
19396 +        if first.parent AND last.parent then do;
19397 +          if missing(character_value) then do;
19398 +            numeric_value = round(numeric_value, &sp_precision);
19399 +            branch = branch + 1;
19400 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19401 +            output;
19402 +          end;
19403 +          else do;
19404 +            branch = branch + 1;
19405 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19406 +            output;
19407 +          end;
19408 +        end;
19409 +      end;
19410 +      else if last.parent then do;
19411 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19412 +          if missing(character_value) then do;
19413 +            numeric_value = round(numeric_value, &sp_precision);
19414 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19415 +          end;
19416 +          else do;
19417 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19418 +          end;
19419 +          branch = branch + 1;
19420 +          output;
19422 +          if missing(character_value) then do;
19423 +            numeric_value = round(numeric_value, &sp_precision);
19424 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19425 +          end;
19426 +          else do;
19427 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19428 +          end;
19429 +          branch = branch + 1;
19430 +          output;
19431 +        end;
19432 +        else do;
19433 +          if missing(character_value) then do;
19434 +            numeric_value = round(numeric_value, &sp_precision);
19435 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19436 +          end;
19437 +          else do;
19438 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19439 +          end;
19440 +          branch = branch + 1;
19441 +          output;
19442 +        end;
19443 +      end;
19444 +      else do;
19445 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19446 +          if missing(character_value) then do;
19447 +            numeric_value = round(numeric_value,&sp_precision);
19448 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19449 +            origval = numeric_value;
19450 +          end;
19451 +          else do;
19452 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19453 +            origchar = character_value;
19454 +          end;
19455 +          branch = branch + 1;
19456 +          output;
19458 +        end;
19459 +        else do;
19460 +          if missing(character_value) then do;
19461 +            numeric_value = round(numeric_value, &sp_precision);
19462 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19463 +            origval = numeric_value;
19464 +          end;
19465 +          else do;
19466 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19467 +            origval = character_value;
19468 +          end;
19469 +          branch = branch + 1;
19470 +          output;
19471 +        end;
19472 +      end;
19473 +    end;
19474 +    else do;
19475 +       if first.numeric_value then do;
19476 +         flag = 0;
19477 +         abovetext = strip(CHARACTER_VALUE);
19478 +         branch = numeric_value;
19479 +         if first.numeric_value AND last.numeric_value then do;
19480 +           output;
19481 +         end;
19482 +       end;
19483 +       else if last.numeric_value then do;
19484 +         if flag=0 then do;
19485 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19486 +           length = length(strip(tempstring));
19487 +           if length < 32 then do;
19488 +             abovetext = strip(tempstring);
19489 +           end;
19490 +           else do;
19491 +             abovetext = strip(abovetext)||", ...";
19492 +             flag = 1;
19493 +           end;
19494 +         end;
19495 +         branch = numeric_value;
19496 +         output;
19497 +       end;
19498 +       else do;
19499 +         if flag=0 then do;
19500 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19501 +           length = length(strip(tempstring));
19502 +           if length < 32 then do;
19503 +             abovetext = strip(tempstring);
19504 +           end;
19505 +           else do;
19506 +             abovetext = strip(abovetext)||", ...";
19507 +             flag=1;
19508 +           end;
19509 +         end;
19510 +         branch = numeric_value;
19511 +       end;
19512 +    end;
19513 +    keep parent branch abovetext;
19514 +  run;
19516 +  /* MIssing value to abovetext */
19517 +  data tempmissing;
19518 +    set &EM_USER_OUTRULES;
19519 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
19520 +    rename node=parent numeric_value=branch character_value=misschar;
19521 +  run;
19524 +  proc sort data=abovetext; by parent branch; run;
19525 +  proc sort data=tempmissing; by parent branch; run;
19526 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19528 +  data tempoutnodes;
19529 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19530 +    by parent branch;
19531 +    length traintotal validtotal 8;
19532 +    retain traintotal validtotal;
19534 +    if _a then do;
19535 +      if ^MISSING(abovetext) then do;
19536 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19537 +      end;
19538 +      else do;
19539 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19540 +      end;
19541 +    end;
19542 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19544 +    if node=1 then do;
19545 +      traintotal = N;
19546 +      validtotal=VN;
19547 +    end;
19549 +    drop role rank stat misschar belowtext;
19550 +  run;
19551 +  proc sort data=tempoutnodes; by node; run;
19552 +  proc sort data=belowtext; by node; run;
19554 +  data tempoutnodes;
19555 +    merge tempoutnodes belowtext;
19556 +    by node;
19558 +  run;
19560 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19561 +  %let adjusted = N;
19562 +  %let npriors = 0;
19563 +  data _null_ ;
19564 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19565 +    if eof then do ;
19566 +      call symput("npriors" , strip(put(_N_,best.))) ;
19567 +    end;
19568 +  run;
19569 +  %if &npriors gt 0 %then %let adjusted=Y;
19572 +  /* create a table with targetUsed and targetLevel columns for each node */
19573 +  data temptarmeta;
19574 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19575 +    %if &multipleTar eq N %then %do;
19576 +      AND USE in ('D', 'Y')
19577 +    %end;
19578 +    ));
19579 +    length TARGET $32;
19580 +    Target=name;
19581 +    keep target level;
19582 +  run;
19584 +  %if &multipleTar eq Y %then %do;
19585 +    data temptargetused;
19586 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19587 +      keep node target;
19588 +    run;
19589 +    proc sort data=temptargetused; by target; run;
19590 +    proc sort data=temptarmeta; by target; run;
19591 +    data temptargetused;
19592 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19593 +      by target;
19594 +      if _a and _b;
19595 +    run;
19596 +  %end;
19597 +  %else %do;
19598 +    data temptargetused;
19599 +      set &EM_USER_OUTSTATS;
19600 +      length target $32 tarlevel $10;
19601 +      target="%EM_TARGET";
19602 +      tarlevel="%EM_TARGET_LEVEL";
19603 +      keep node target tarlevel;
19604 +    run;
19605 +    proc sort data=temptargetused nodupkey; by node; run;
19606 +  %end;
19608 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
19609 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19610 +  proc sort data=temptargetused; by node; run;
19613 +  /* create tables for all interval targets as well as all class targets */
19614 +  data tempinterval tempclass;
19615 +    merge tempoutstats temptargetused( rename=(target=targetused));
19616 +    by node;
19617 +    %if "&multipleTar" eq "Y" %then %do;
19618 +      if ((missing(Target)) OR (target=targetused ));
19619 +    %end;
19621 +    if tarlevel="INTERVAL" then output tempinterval;
19622 +    else output tempclass;
19623 +  run;
19625 +  /* iniitalize intTarget and classTarget flags */
19626 +  %let em_intNobs =0;
19627 +  %let em_classNobs = 0;
19628 +  %let em_intTarget= N;
19629 +  %let em_classTarget= N;
19631 +  proc sql;
19632 +    reset noprint;
19633 +    select count(*) into :em_intNobs from tempinterval;
19634 +  quit;
19635 +  proc sql;
19636 +    reset noprint;
19637 +    select count(*) into :em_classNobs from tempclass;
19638 +  quit;
19640 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19641 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19643 +  /* retrieve all information for interval targets */
19644 +  %if &em_intTarget eq Y %then %do;
19646 +    /* determine if leaf variable exists */
19647 +    %let dsid=%sysfunc(open(tempinterval,i));
19648 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19649 +    %let rc=%sysfunc(close(&dsid));
19651 +    proc transpose data=tempinterval
19652 +      %if &leafexists %then %do;
19653 +        (drop=leaf)
19654 +      %end;
19655 +      %if &validexist %then %do;
19656 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19657 +      %end;
19658 +      %else %do;
19659 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19660 +      %end;
19661 +      by node;
19662 +      id statname;
19663 +    run;
19664 +    data tempinterval;
19665 +      set tempinterval;
19666 +      if missing(N) then delete;
19667 +    run;
19668 +  %end;
19670 +  /* retrieve all information for class targets */
19671 +  %if &em_classTarget eq Y %then %do;
19672 +    proc sort data=tempclass; by node category; run;
19673 +    %if &validflag eq N %then %do;
19674 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19675 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19676 +    %end;
19677 +    %else %do;
19678 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19679 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19680 +    %end;
19681 +      set tempclass;
19683 +      %if &validflag eq N %then %do;
19684 +        %if "&adjusted" eq "N" %then %do;
19685 +          if statname="N" then output tempn;
19686 +        %end;
19687 +        %else %do;
19688 +          if statname="NPRIORS" then output tempn;
19689 +        %end;
19690 +        else if statname="PREDICTION" then output temppredict;
19691 +        else if statname="PROBABILITY" then output tempprob;
19692 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19693 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19694 +      %end;
19695 +      %else %do;
19696 +        %if "&adjusted" eq "N" %then %do;
19697 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19698 +        %end;
19699 +        %else %do;
19700 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19701 +        %end;
19702 +        else if statname="PREDICTION" then output temppredict;
19703 +        else if statname="PROBABILITY" then output tempprob;
19704 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19705 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19706 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19707 +      %end;
19708 +    run;
19711 +    /* determine if profit/loss exists in tempprofit */
19712 +    %let em_profitflag=0;
19713 +    %let em_lossflag=0;
19714 +    proc sql;
19715 +      reset noprint;
19716 +      select count(*) into :em_profitflag from tempprofit;
19717 +    quit;
19718 +    proc sql;
19719 +      reset noprint;
19720 +      select count(*) into :em_lossflag from temploss;
19721 +    quit;
19723 +    %if &validFlag eq Y %then %do;
19724 +      proc transpose data=tempn
19725 +        %if "&adjusted" eq "N" %then %do;
19726 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19727 +        %end;
19728 +        %else %do;
19729 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19730 +        %end;
19731 +        by node;
19732 +        id statname;
19733 +      run;
19734 +      %if &em_profitflag ne 0 %then %do;
19735 +        proc transpose data=tempprofit out=tempprofit;
19736 +          by node category;
19737 +          id statname ;
19738 +        run;
19739 +      %end;
19740 +      %if &em_lossflag ne 0 %then %do;
19741 +        proc transpose data=temploss out=temploss;
19742 +          by node category;
19743 +          id statname ;
19744 +        run;
19745 +      %end;
19746 +      data tempprob;
19747 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19748 +        by node
19749 +        %if &multipleTar eq Y %then %do;
19750 +          target
19751 +        %end;
19752 +        category;
19753 +      run;
19754 +    %end;
19756 +    /* store percentcorrect value */
19757 +    data temppredict;
19758 +      merge tempprob temppredict(in=_a);
19759 +      by node category;
19760 +      if _a then do;
19761 +        percentCorrect = statvalue;
19762 +        %if &validFlag eq Y %then %do;
19763 +          vpercentCorrect= vstatvalue;
19764 +        %end;
19765 +      end;
19766 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19767 +      %if &validFlag eq Y %then %do;
19768 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19769 +      %end;
19770 +      ;
19771 +      if missing(percentCorrect) then delete;
19772 +      drop target;
19773 +    run;
19775 +    /* build profittext */
19776 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19777 +      data tempprofittext(keep= node profittext profitloss);
19778 +        length profittext $800 profitloss 8.;
19779 +        retain profittext profitloss;
19781 +        merge tempprob
19782 +        %if &em_profitflag ne 0 %then %do;
19783 +          tempprofit
19784 +        %end;
19785 +        %else %if &em_lossflag ne 0 %then %do;
19786 +          temploss
19787 +        %end;
19788 +        ;
19789 +        by node category;
19791 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19792 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19793 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19794 +          %let profittype = ALL;
19795 +        %end;
19797 +        /* create the profitloss variable for nodecolor if selected */
19798 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19800 +        %if "&profittype" eq "ALL" %then %do;
19801 +          if strip(CATEGORY)="&targetEvent" then do;
19802 +            profitloss=statvalue;
19803 +          end;
19804 +          if first.node then do;
19805 +            %if &validFlag eq N %then %do;
19806 +             %if &em_profitflag ne 0 %then %do;
19807 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19808 +             %end;
19809 +             %if &em_lossflag ne 0 %then %do;
19810 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19811 +             %end;
19812 +            %end;
19813 +            %else %do;
19814 +             %if &em_profitflag ne 0 %then %do;
19815 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19815!+;
19816 +             %end;
19817 +             %if &em_lossflag ne 0 %then %do;
19818 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19819 +             %end;
19820 +            %end;
19821 +          end;
19822 +          else if last.node then do;
19823 +            %if &validFlag eq N %then %do;
19824 +             %if &em_profitflag ne 0 %then %do;
19825 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19826 +             %end;
19827 +             %if &em_lossflag ne 0 %then %do;
19828 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19829 +             %end;
19830 +             /*if CATEGORY="&targetEvent" then do;
19831 +               profitloss=statvalue;
19832 +             end;*/
19833 +            %end;
19834 +            %else %do;
19835 +             %if &em_profitflag ne 0 %then %do;
19836 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19836!+14.&EM_PROPERTY_SPLITPRECISION);
19837 +                if CATEGORY="&targetEvent" then do;
19838 +                 profitloss=ALTERNATIVE_PROFIT;
19839 +                end;
19840 +             %end;
19841 +             %if &em_lossflag ne 0 %then %do;
19842 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19842!+14.&EM_PROPERTY_SPLITPRECISION);
19843 +                if CATEGORY="&targetEvent" then do;
19844 +                  profitloss=ALTERNATIVE_LOSS;
19845 +                end;
19846 +             %end;
19847 +            %end;
19848 +            output;
19849 +          end;
19850 +          else do;
19851 +            %if &validFlag eq N %then %do;
19852 +             %if &em_profitflag ne 0 %then %do;
19853 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19854 +             %end;
19855 +             %if &em_lossflag ne 0 %then %do;
19856 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19857 +             %end;
19858 +            %end;
19859 +            %else %do;
19860 +             %if &em_profitflag ne 0 %then %do;
19861 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19861!+14.&EM_PROPERTY_SPLITPRECISION);
19862 +             %end;
19863 +             %if &em_lossflag ne 0 %then %do;
19864 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19864!+14.&EM_PROPERTY_SPLITPRECISION);
19865 +             %end;
19866 +            %end;
19867 +          end;
19868 +        %end;
19869 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19870 +          if strip(CATEGORY) = "&targetevent" then do;
19871 +            %if &validFlag eq N %then %do;
19872 +             %if &em_profitflag ne 0 %then %do;
19873 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19874 +             %end;
19875 +             %if &em_lossflag ne 0 %then %do;
19876 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19877 +             %end;
19878 +             profitloss=statvalue;
19879 +            %end;
19880 +            %else %do;
19881 +             %if &em_profitflag ne 0 %then %do;
19882 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19882!+;
19883 +                profitloss=ALTERNATIVE_PROFIT;
19884 +             %end;
19885 +             %if &em_lossflag ne 0 %then %do;
19886 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19887 +                profitloss=ALTERNATIVE_LOSS;
19888 +             %end;
19889 +            %end;
19890 +            output;
19891 +          end;
19892 +        %end;
19893 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19894 +          if strip(CATEGORY) = "&targetevent" then do;
19895 +            %if &validFlag eq N %then %do;
19896 +             profitloss=statvalue;
19897 +            %end;
19898 +            %else %do;
19899 +             %if &em_profitflag ne 0 %then %do;
19900 +                profitloss=ALTERNATIVE_PROFIT;
19901 +             %end;
19902 +             %if &em_lossflag ne 0 %then %do;
19903 +                profitloss=ALTERNATIVE_LOSS;
19904 +             %end;
19905 +            %end;
19906 +            output;
19907 +          end;
19908 +        %end;
19909 +      run;
19910 +    %end;
19912 +    data tempprob(keep= node probtext);
19913 +      length probtext $800;
19914 +      retain probtext;
19915 +      set tempprob ;
19916 +      by node;
19918 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19919 +      %let probtype = &EM_PROPERTY_TARGET;
19920 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19921 +        %let probtype = ALL;
19922 +      %end;
19924 +      %if "&probtype" eq "ALL" %then %do;
19925 +        if first.node then do;
19926 +          %if &validFlag eq N %then %do;
19927 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19928 +          %end;
19929 +          %else %do;
19930 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19931 +          %end;
19932 +        end;
19933 +        else if last.node then do;
19934 +          %if &validFlag eq N %then %do;
19935 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19936 +          %end;
19937 +          %else %do;
19938 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19939 +          %end;
19940 +          output;
19941 +        end;
19942 +        else do;
19943 +          %if &validFlag eq N %then %do;
19944 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19945 +          %end;
19946 +          %else %do;
19947 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19948 +          %end;
19949 +        end;
19950 +      %end;
19951 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19952 +        if strip(CATEGORY) = "&targetevent" then do;
19953 +          %if &validFlag eq N %then %do;
19954 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19955 +          %end;
19956 +          %else %do;
19957 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19958 +          %end;
19959 +          output;
19960 +        end;
19961 +      %end;
19962 +      %else %if "&probtype" eq "NONE" %then %do;
19963 +        if last.node then do;
19964 +          output;
19965 +        end;
19966 +      %end;
19967 +    run;
19968 +  %end;
19970 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19972 +  %let oldexists=0;
19973 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19974 +     data old_tree_plot;
19975 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19976 +        rename nodecolor=oldnodecolor;
19977 +     run;
19979 +     proc sort data=old_tree_plot;
19980 +        by node;
19981 +     run;
19983 +     %let oldexists=1;
19984 +  %end;
19986 +  data &EM_USER_TREE_PLOT;
19987 +    length textall $800;
19988 +    merge tempoutnodes temptargetused
19990 +    %if &em_intTarget eq Y %then %do;
19991 +      tempinterval
19992 +    %end;
19994 +    %if &em_classTarget eq Y %then %do;
19996 +      %if &validFlag eq N %then %do;
19997 +        tempn(rename=(statvalue=N))
19998 +      %end;
19999 +      %else %do;
20000 +        tempn
20001 +      %end;
20003 +      temppredict tempprob
20005 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20006 +        tempprofittext
20007 +      %end;
20008 +    %end;
20009 +    ;
20010 +    by node;
20012 +    /* build nodetext based on user selection */
20013 +    textall="";
20015 +    %if &em_intTarget eq Y %then %do;
20016 +    if tarlevel="INTERVAL" then do;
20017 +      /* Nodeid */
20018 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20019 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20020 +      %end;
20022 +      /* Target identifier if multiple targets are used */
20023 +      %if "&multipleTar" eq "Y" %then %do;
20024 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20025 +      %end;
20027 +      %if &validFlag eq Y %then %do;
20028 +         /* Column labels displayed in validflag eq Y only */
20029 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20030 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20030!+noquote ))";
20031 +         %end;
20033 +         /* Average values */
20034 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20035 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20036 +         %end;
20038 +         /* RASE */
20039 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20040 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
20041 +         %end;
20043 +         /* Count */
20044 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20045 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
20046 +         %end;
20047 +      %end;
20048 +      %else %do;
20049 +         /* Average values */
20050 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20051 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20052 +         %end;
20054 +         /* RASE */
20055 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20056 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
20057 +         %end;
20059 +         /* Count */
20060 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20061 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
20062 +         %end;
20063 +      %end;
20065 +      /* nodecolor */
20066 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
20067 +        nodecolor=PREDICTION;
20068 +      %end;
20069 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
20070 +        nodecolor=RASE;
20071 +      %end;
20072 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
20073 +        nodecolor=1;
20074 +      %end;
20076 +    end;
20077 +    %end;
20078 +    %if &em_classTarget eq Y %then %do;
20079 +    if tarlevel^="INTERVAL" then  do;
20081 +      /* Nodeid */
20082 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20083 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20084 +      %end;
20085 +      /* Target identifier if multiple targets are used */
20086 +      %if "&multipleTar" eq "Y" %then %do;
20087 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20088 +      %end;
20090 +      /* Predicted values */
20091 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
20092 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
20093 +      %end;
20095 +      /* Column labels displayed in validflag eq Y only */
20096 +      %if "&ValidFlag" eq "Y" %then %do;
20097 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20098 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20098!+noquote ))";
20099 +        %end;
20100 +      %end;
20102 +      /* Target Values */
20103 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
20104 +        textall=strip(textall)||"0A"x||strip(probtext);
20105 +      %end;
20107 +      /* include profit or loss for all target levels */
20108 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
20109 +        textall=strip(textall)||"0A"x||strip(profittext);
20110 +      %end;
20112 +      %if &validFlag eq N %then %do;
20113 +        /* Percent Correct */
20114 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20115 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
20116 +        %end;
20118 +         /* Count */
20119 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20120 +          %if "&adjusted" eq "N" %then %do;
20121 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
20122 +          %end;
20123 +          %else %do;
20124 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
20125 +          %end;
20126 +         %end;
20127 +      %end;
20128 +      %else %do;
20129 +        /* Percent Correct */
20130 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20131 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
20132 +        %end;
20134 +         /* Count */
20135 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20136 +          %if "&adjusted" eq "N" %then %do;
20137 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
20138 +          %end;
20139 +          %else %do;
20140 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
20141 +          %end;
20142 +         %end;
20143 +      %end;
20145 +      /* nodecolor */
20146 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
20147 +       %if &multipleTar ne Y %then %do;
20148 +        nodecolor=&predTarget;
20149 +       %end;
20150 +       %else %do;
20151 +         nodecolor=percentcorrect;
20152 +       %end;
20153 +      %end;
20154 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
20155 +        nodecolor=percentcorrect;
20156 +      %end;
20157 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
20158 +        nodecolor=1;
20159 +      %end;
20160 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
20161 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
20162 +          nodecolor=percentcorrect;
20163 +        %end;
20164 +        %else %do;
20165 +          nodecolor=profitloss;
20166 +        %end;
20167 +      %end;
20169 +    end;
20170 +    %end;
20171 +    %if &em_intTarget eq Y %then %do;
20172 +     drop  PREDICTION  TARGET TARLEVEL
20173 +     %if &ValidFlag eq Y %then %do;
20174 +         VPREDICTION
20175 +     %end;
20176 +     ;
20177 +    %end;
20178 +    %if &em_classTarget eq Y %then %do;
20179 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
20180 +     %if &ValidFlag eq Y %then %do;
20181 +         VSTATVALUE
20182 +     %end;
20183 +     ;
20184 +    %end;
20186 +  run;
20188 +  /* add leaf index information to plotds - based on primary target only*/
20189 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20190 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20191 +      set &EM_USER_OUTSTATS;
20192 +      if ((statname="PROBABILITY"
20193 +      %if &validexist %then %do;
20194 +       or statname="VALID: PROBABILITY"
20195 +      %end;
20196 +      ) AND (CATEGORY="&TARGETEVENT")
20197 +      %if "&multipleTar" eq "Y" %then %do;
20198 +        AND (Target="%EM_TARGET")
20199 +      %end;
20200 +      );
20201 +    run;
20203 +    %if &validexist %then %do;
20204 +      proc sort data=tempprob; by node; run;
20205 +      %let vpredTarget = V%substr(&predTarget, 2);
20206 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
20207 +         by node;
20208 +         id statname;
20209 +      run;
20210 +    %end;
20211 +  %end;
20212 +  %else %do;
20213 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20214 +      set &EM_USER_OUTSTATS;
20215 +      if ((statname="PREDICTION"
20216 +      %if &validexist %then %do;
20217 +       or statname="VALID: PREDICTION"
20218 +      %end;
20219 +      )
20220 +      %if "&multipleTar" eq "Y" %then %do;
20221 +        AND (Target="%EM_TARGET")
20222 +      %end;
20223 +      );
20224 +    run;
20225 +    %if &validexist %then %do;
20226 +      proc sort data=tempprob; by node; run;
20227 +      %let vpredTarget = V%substr(&predTarget, 2);
20228 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
20229 +         by node;
20230 +         id statname;
20231 +      run;
20232 +    %end;
20233 +  %end;
20235 +  proc sort data=tempprob; by node; run;
20236 +  data tempoutnodes;
20237 +    merge tempoutnodes tempprob;
20238 +    by node;
20239 +  run;
20241 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
20242 +  data tempnodes;
20243 +    retain traintotal validtotal;
20244 +    set tempnodes(where=(leaf ne . ));
20245 +    tprob=round(&predTarget, .01);
20246 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20247 +      percevent_train=round(tprob*100, .01);
20248 +    %end;
20249 +    %else %do;
20250 +      percevent_train=tprob;
20251 +    %end;
20253 +    perc_train=round((n/traintotal)*100, 0.01);
20254 +    /* leafwidth already has a *10 multiplier */
20255 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
20257 +    %if &validexist %then %do;
20258 +      %let vpredTarget = V%substr(&predTarget,2);
20259 +      vprob=round(&vpredTarget, .01);
20260 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20261 +        percevent_valid=round(vprob*100, .01);
20262 +      %end;
20263 +      %else %do;
20264 +        percevent_valid=vprob;
20265 +      %end;
20266 +      perc_valid=round((vn/validtotal)*100, .01);
20267 +    %end;
20269 +    index=_N_;
20270 +    keep node index tprob perc_train percevent_train
20271 +    %if &validexist %then %do;
20272 +        vprob percevent_valid perc_valid
20273 +    %end;
20274 +    ;
20275 +  run;
20276 +  proc sort data=tempnodes; by node; run;
20277 +  data &EM_USER_TREE_PLOT;
20278 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
20279 +    by node;
20280 +    if missing(node) then delete;
20281 +    %if &oldexists %then %do;
20282 +      if missing(nodecolor) then nodecolor=oldnodecolor;
20283 +      drop oldnodecolor;
20284 +    %end;
20285 +    abovetext = compbl(abovetext);
20287 +    /* add variable labels */
20288 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
20289 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
20290 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
20291 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
20292 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
20293 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
20295 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20296 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
20297 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
20298 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20299 +          %end;
20300 +          %else %do;
20301 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
20302 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
20303 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20304 +          %end;
20305 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
20307 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
20308 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
20309 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20310 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
20311 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20312 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
20313 +          %end;
20314 +          %else %do;
20315 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
20316 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20317 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
20318 +          %end;
20319 +    ;
20320 +  run;
20322 +  /* delete temporary tables */
20323 +  proc datasets lib=work nolist;
20324 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
20325 +  run;
20327 +%mend em_tree_makePlotDs;
20331 +%macro em_tree_report;
20333 +   /* report properties */
20334 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
20335 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
20336 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
20337 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
20338 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
20339 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
20340 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
20341 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
20342 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
20343 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
20344 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
20345 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
20346 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
20348 +   %let validexist=0;
20349 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
20350 +     %let validexist=1;
20351 +   %end;
20353 +   /* determine if multiple targets will be processed */
20354 +   %let em_tree_multipleTargets=N;
20355 +   %let em_tree_numTarget=1;
20356 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
20357 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
20358 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
20359 +         %let em_tree_multipleTargets=N;
20360 +      %end;
20361 +      %else %do;
20362 +        data _null_;
20363 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
20364 +          if eof then
20365 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
20366 +        run;
20368 +        %if &em_tree_numTarget gt 1 %then %do;
20369 +           %let em_tree_multipleTargets=Y;
20370 +        %end;
20371 +     %end;
20372 +   %end;
20374 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
20376 +   /* variable importance */
20377 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
20378 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
20380 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
20381 +     /* and the columns may not be generated                                                                                 */
20382 +     %let em_tree_cvexists=;
20383 +     %let em_tree_surrexists=.;
20384 +     data _null_;
20385 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
20386 +       if eof then do ;
20387 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
20388 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
20389 +       end;
20390 +     run;
20392 +     data &EM_USER_OUTIMPORT;
20393 +         set &EM_USER_OUTIMPORT;
20394 +         /* format columns based on Precison value specified */
20395 +         format importance 15.&EM_PROPERTY_PRECISION
20396 +              %if &validexist %then %do;
20397 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
20398 +              %end;
20399 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
20400 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
20401 +              %end;
20402 +         ;
20403 +     run;
20405 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
20406 +     proc print data=&EM_USER_OUTIMPORT
20407 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
20408 +          (where=((nrules>0) OR (nsurrogates>0)))
20409 +        %end;
20410 +        %else %do;
20411 +           (where=(nrules>0))
20412 +        %end;
20413 +        label noobs
20414 +        ;
20415 +     run;
20416 +     title10;
20418 +   %end;
20420 +   /* Sequence */
20421 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
20422 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
20423 +   data _null_ ;
20424 +      set &EM_USER_outseq (obs=2) end=eof ;
20425 +      if eof then do ;
20426 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
20427 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
20428 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
20429 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
20430 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
20431 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
20432 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
20433 +      end;
20434 +    run;
20436 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
20437 +      data &EM_USER_OUTSEQ;
20438 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
20439 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
20440 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20441 +           _XMISC_=_VMISC_
20442 +        %end;
20443 +        %if "&em_tree_aprof" ne "."  %then %do;
20444 +           _XAPROF_=_VAPROF_
20445 +           _XPROF_ = _VPROF_
20446 +        %end;
20447 +        %if "&em_tree_aloss" ne "."  %then %do;
20448 +           _XALOSS_=_VALOSS_
20449 +        %end;
20450 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
20451 +           _XPASE_ = _VPASE_
20452 +           _XPMISC_ = _VPMISC_
20453 +        %end;
20455 +        ));
20456 +     %end;
20457 +     %else %do;
20458 +        set &EM_USER_OUTSEQ;
20459 +     %end;
20461 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
20462 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20463 +            _MISC_   15.&EM_PROPERTY_PRECISION
20464 +         %end;
20465 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
20466 +            _PASE_  15.&EM_PROPERTY_PRECISION
20467 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
20468 +         %end;
20469 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
20470 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
20471 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20472 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20473 +            %end;
20474 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
20475 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20476 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20477 +            %end;
20478 +         %end;
20479 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20480 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20481 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20482 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20483 +            %end;
20484 +         %end;
20485 +         %if "&em_tree_seq" ne "." %then %do;
20486 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20487 +         %end;
20488 +         %if "&em_tree_vseq" ne "." %then %do;
20489 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20490 +         %end;
20491 +         %if "&em_tree_aprof" ne "." %then %do;
20492 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20493 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20494 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20495 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20496 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20497 +           %end;
20498 +         %end;
20499 +         %else %if "&em_tree_aloss" ne "." %then %do;
20500 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
20501 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20502 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
20503 +           %end;
20504 +         %end;
20505 +      ;
20506 +    run;
20507 +   %end;
20509 +   /* Observation Based Importance */
20510 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
20512 +      /* need to check for 0 obs */
20513 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
20514 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
20515 +      %let rc=%sysfunc(close(&dsid));
20517 +      %if &onobs %then %do;
20518 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
20519 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
20521 +         data &EM_USER_OUTOBSIMP;
20522 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20523 +           if _a;
20524 +           by _INPUT1_;
20525 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20526 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20527 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20528 +                   %end;
20529 +                   ;
20530 +         run;
20531 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20532 +      %end;
20533 +   %end;
20535 +  %end;
20537 +  /* create dataset to support tree diagram and icicle plot */
20538 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20539 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20541 +  /* display tree diagram */
20542 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20543 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20545 +  /* display icicle diagram */
20546 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20547 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20549 +  /* Leaf Statistics Plot */
20550 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20552 +  /* print leaf information to output window */
20553 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20555 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20556 +       by descending N;
20557 +     run;
20559 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20560 +     %local vn;
20561 +     data _null_;
20562 +       set t (obs=2) end=eof;
20563 +       if eof then do;
20564 +         call symput("vn", strip(put(vn, best.)));
20565 +       end;
20566 +     run;
20568 +     data t;
20569 +       set t;
20570 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20571 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20572 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20573 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20574 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20575 +       %end;
20576 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20577 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20578 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20579 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20580 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20581 +          %end;
20582 +       %end;
20583 +       ;
20584 +     run;
20586 +     /* determine if rase is found in t */
20587 +    %let dsid=%sysfunc(open(t,i));
20588 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20589 +    %let rc=%sysfunc(close(&dsid));
20591 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20592 +     proc print data=t noobs label;
20593 +       where tprob ne .;
20594 +       var node depth N tprob
20595 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20596 +         %if "&vn" ne "." %then %do;
20597 +           VN
20598 +         %end;
20599 +         vprob
20600 +       %end;
20601 +       %if &raseexists %then %do;
20602 +            RASE
20603 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20604 +              VRASE
20605 +            %end;
20606 +       %end;
20607 +       ;
20608 +     run;
20609 +     title10;
20610 +  %end;
20612 +  /* create plots that are done during training of node */
20613 +  /* display iterative plot, including reference line */
20614 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20615 +   /* %if &nleaves eq  %then %do; */
20616 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20617 +      data _null_;
20618 +        set &EM_USER_OUTTOPOLOGY end=eof;
20619 +        if eof then do;
20620 +          call symput('nleaves', LEAF);
20621 +        end;
20622 +      run;
20623 +   /* %end; */
20625 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20626 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20627 +  %end;
20629 +  /* display leaf statistics */
20630 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20632 +  /* stats by node if multiple targets = Y */
20633 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20634 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20635 +    data &EM_USER_OUTSTATS;
20636 +      set &EM_USER_OUTSTATS;
20638 +     * if STATNAME="TARGET" then delete;
20639 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20640 +      drop leaf;
20641 +    run;
20642 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20644 +  %end;
20645 +  %else %do;
20646 +    /* add outstats and outdescribe to spk but not results */
20647 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20648 +  %end;
20650 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE5_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS1.TREE5_OUTIMPORT.
NOTE: The data set EMWS1.TREE5_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.TREE5_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE5_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 65 observations read from the data set EMWS1.TREE5_OUTSEQ.
NOTE: The data set EMWS1.TREE5_OUTSEQ has 65 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 61 observations read from the data set EMWS1.TREE5_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 61 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE5_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 61 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 61 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 80 observations read from the data set EMWS1.TREE5_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 80 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 80 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 80 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      155:103   204:136   247:102   247:125   279:104   313:104   355:103   355:126   398:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      414:99
NOTE: There were 80 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 122 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2338 observations read from the data set EMWS1.TREE5_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 61 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 122 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 122 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 61 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 123 observations read from the data set EMWS1.TREE5_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 123 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 122 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 123 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 61 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 123 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 123 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 123 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 61 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 123 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 61 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 123 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE5_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE5_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 738 observations read from the data set EMWS1.TREE5_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 738 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 738 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 615 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 123 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 738 observations read from the data set EMWS1.TREE5_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 738 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 738 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 123 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 738 observations and 6 variables.
NOTE: The data set WORK.TEMPCLASS has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 738 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 123 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 123 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 123 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 123 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 123 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      942:196   958:204   958:221
NOTE: There were 123 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 123 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 123 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set EMWS1.TREE5_TREE_PLOT has 123 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 738 observations read from the data set EMWS1.TREE5_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 246 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 246 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 246 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 246 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 123 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 123 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 123 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 123 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 123 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 123 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 123 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 123 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 62 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 62 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 123 observations read from the data set EMWS1.TREE5_TREE_PLOT.
NOTE: There were 62 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE5_TREE_PLOT has 123 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 123 observations read from the data set EMWS1.TREE5_TREE_PLOT.
NOTE: The data set WORK.T has 123 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 123 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 123 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      316:141
NOTE: There were 123 observations read from the data set EMWS1.TREE5_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
20651
20652  *------------------------------------------------------------*;
20653  * End REPORT: Tree5;
20654  *------------------------------------------------------------*;
 
20655  /* Reset EM Options */
20656  options formchar="|----|+|---+=|-/\<>*";
20657  options nocenter ls=256 ps=10000;
20658  goptions reset=all device=GIF NODISPLAY;
 
20659  proc sort data=WORK.EM_USER_REPORT;
20660  by ID VIEW;
20661  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20662  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20663  by NAME;
20664  run;
 
NOTE: There were 16 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 16 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
20665  proc sort data=EMWS1.Tree5_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20666  by NAME;
20667  run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE5_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 16 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
20668  data WORK.ASSESS_META;
20669  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20670  by NAME;
20671  run;
 
NOTE: There were 16 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 16 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 16 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
20672  data EM_temp_assessMeta;
20673  set EMWS1.Tree5_CMeta_TRAIN;
20674  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20675  run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE5_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20676  data EM_temp_assessdata;
20677  set EMWS1.Tree5_TRAIN(keep=
20678  P_totalsal
20679  R_totalsal
20680  V_totalsal
20681  _WARN_
20682  totalsal
20683  );
20684  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE5_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 6616 observations read from the data set EMWS1.TREE5_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 6616 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
25015   data EM_temp_assessMeta;
25016   set EMWS1.Tree5_CMeta_TRAIN;
25017   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
25018   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE5_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
25019   data EM_temp_assessdata;
25020   set EMWS1.Tree5_VALIDATE(keep=
25021   P_totalsal
25022   R_totalsal
25023   V_totalsal
25024   _WARN_
25025   totalsal
25026   );
25027   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE5_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2835 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 2835 observations read from the data set EMWS1.TREE5_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2835 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
29368   %let _cn = %sysfunc(getoption(CENTER));
29369   options nocenter;
29370   proc print data=EMWS1.Tree5_EMREPORTFIT noobs label;
29371   var STAT LABEL TRAIN
29372   VALIDATE
29373   TEST
29374   ;
29375   by TARGET TARGETLABEL;
29376   title9 ' ';
29377   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
29378   run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE5_EMREPORTFIT.
NOTE: At least one W.D format was too small for the number to be printed. The decimal may be shifted by the "BEST" format.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
29379   title10;
29380   options &_cn;
 
29381   proc datasets library=EMWS1 nolist;
29382   modify Tree5_EMRANK;
29383   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
29384   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29385   run;
 
NOTE: MODIFY was successful for EMWS1.TREE5_EMRANK.DATA.
29386   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29387   %let _cn = %sysfunc(getoption(CENTER));
29388   options nocenter;
29389   proc print data=EMWS1.Tree5_EMRANK label noobs;
29390   var
29391   decile N _targetMean_ _meanP_;
29392   by
29393   notsorted DATAROLE
29394   notsorted TARGET
29395   notsorted TARGETLABEL
29396   ;
29397   title9 ' ';
29398   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
29399   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE5_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
29400   title10;
29401   options &_cn;
 
29402   proc datasets library=EMWS1 nolist;
29403   modify Tree5_EMSCOREDIST;
29404   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
29405   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29406   run;
 
NOTE: MODIFY was successful for EMWS1.TREE5_EMSCOREDIST.DATA.
29407   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
