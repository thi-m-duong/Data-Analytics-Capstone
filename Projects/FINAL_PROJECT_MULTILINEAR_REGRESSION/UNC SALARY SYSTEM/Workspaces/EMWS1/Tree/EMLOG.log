*------------------------------------------------------------*
User:                Intern Three
Date:                April 21, 2016
Time:                05:42:46
Site:                70085778
Platform:            X64_7HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 21, 2016
Time:                05:42:22
*------------------------------------------------------------*
14715  proc freq data=EMWS1.Tree_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.TreeMETA;
14717  run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.TreeMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 8 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
"No decisions defined for target "totalsal"."
14726  proc print data = EMWS1.Ids_totalsal_DM noobs label;
14727  var _type_ variable label;
14728  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14729  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14730  title9 ' ';
14731  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14732  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14733  title10;
 
14734  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15252  *------------------------------------------------------------*;
15253  * Tree: Generation of macros and macro variables;
15254  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15255  *------------------------------------------------------------*;
 
15256  %let EMEXCEPTIONSTRING=;
15257  *------------------------------------------------------------*;
15258  * TRAIN: Tree;
15259  *------------------------------------------------------------*;
15260  %let EM_ACTION = TRAIN;
15261  %let syscc = 0;
15262  %macro main;
15263
15264    %if %upcase(&EM_ACTION) = CREATE %then %do;
15265      filename temp catalog 'sashelp.emmodl.tree_create.source';
15266      %include temp;
15267      filename temp;
15268
15269      %em_tree_create;
15270    %end;
15271
15272     %else
15273     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15274
15275         filename temp catalog 'sashelp.emmodl.tree_train.source';
15276         %include temp;
15277         filename temp;
15278         %em_tree_train;
15279     %end;
15280
15281    %else
15282    %if %upcase(&EM_ACTION) = SCORE %then %do;
15283      filename temp catalog 'sashelp.emmodl.tree_score.source';
15284      %include temp;
15285      filename temp;
15286
15287      %em_tree_score;
15288
15289    %end;
15290
15291    %else
15292    %if %upcase(&EM_ACTION) = REPORT %then %do;
15293
15294         filename temp catalog 'sashelp.emmodl.tree_report.source';
15295         %include temp;
15296         filename temp;
15297
15298         %em_tree_report;
15299     %end;
15300
15301    %else
15302    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15303
15304         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15305         %include temp;
15306         filename temp;
15307         %EM_TREE_OPENTREEVIEWER;
15308
15309     %end;
15310
15311    %else
15312    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15313
15314         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15315         %include temp;
15316         filename temp;
15317         %EM_TREE_CLOSETREEVIEWER;
15318
15319     %end;
15320
15321
15322     %doendm:
15323  %mend main;
15324
15325  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15327 +%macro em_tree_train;
15329 +   %if &EM_IMPORT_DATA eq %then %do;
15330 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15331 +       %put &em_codebar;
15332 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15333 +       %put &errormsg;
15334 +       %put &em_codebar;
15335 +       %goto doendm;
15336 +   %end;
15337 +   %else
15338 +       %let EMEXCEPTIONSTRING =;
15340 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15341 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15342 +        %put &em_codebar;
15343 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15344 +        %put &errormsg;
15345 +        %put &em_codebar;
15346 +        %goto doendm;
15347 +   %end;
15349 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15350 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15351 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15352 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15353 +        %put &em_codebar;
15354 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15355 +        %put &errormsg;
15356 +        %put &em_codebar;
15357 +        %goto doendm;
15358 +   %end;
15360 +   /* Initialize property macro variables */
15361 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15362 +   %include temp;
15363 +   filename temp;
15365 +   %EM_SetProperties;
15367 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15368 +   %EM_GETNAME(key=EMTREE, type=DATA);
15369 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15370 +     /* if import eq Y and no importtable defined, throw an exception */
15371 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15372 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15373 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15374 +         %put &em_codebar;
15375 +         %put &errmsg;
15376 +         %put &em_codebar;
15377 +         %goto doendm;
15378 +      %end;
15379 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15380 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15381 +         %put &em_codebar;
15382 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15383 +         %put &errormsg;
15384 +         %put &em_codebar;
15385 +         %goto doendm;
15386 +      %end;
15387 +      %else %do;
15388 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15389 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15390 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15391 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15392 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15393 +         %let dsid = %sysfunc(close(&dsid));
15394 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15395 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15396 +            %put &em_codebar;
15397 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15398 +            %put &errormsg;
15399 +            %put &em_codebar;
15400 +            %goto doendm;
15401 +         %end;
15402 +      %end;
15403 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15404 +         proc delete data=&EM_USER_EMTREE;
15405 +         run;
15406 +      %end;
15407 +   %end;
15408 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15409 +      proc delete data=&EM_USER_EMTREE;
15410 +      run;
15411 +   %end;
15413 +   /* load tree macros */
15414 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15415 +   %include temp;
15416 +   filename temp;
15418 +   /* data sets */
15419 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15420 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15421 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15423 +   /* files */
15424 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15426 +   /* check actual num of target levels */
15427 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15428 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15429 +                              nLevel=_nTargetLevel );
15430 +      %if &_nTargetLevel  > 2 %then %do;
15431 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15432 +        %put &em_codebar;
15433 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15434 +        %put &errormsg;
15435 +        %put &em_codebar;
15436 +        %goto doendm;
15437 +      %end;
15438 +   %end;
15440 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15441 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15442 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15443 +        %let costflag=0;
15444 +        data _null_;
15445 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15446 +          if eof then call symput("costflag", _N_);
15447 +        run;
15448 +        %if &costflag gt 0 %then %do;
15449 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15450 +          %put &em_codebar;
15451 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15452 +          %put &errormsg;
15453 +          %put &em_codebar;
15454 +          %goto doendm;
15455 +       %end;
15456 +     %end;
15457 +   %end;
15459 +   /* determine if multiple targets will be processed */
15460 +   %let em_tree_multipleTargets=N;
15461 +   %let em_tree_numTarget = 1;
15462 +   %let em_tree_targetVars=;
15464 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15465 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15466 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15467 +         %let em_tree_multipleTargets=N;
15468 +      %end;
15469 +      %else %do;
15470 +         /* create macro array of targets  */
15471 +         data _null_;
15472 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15473 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15474 +           if eof then
15475 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15476 +        run;
15478 +        %if &em_tree_numTarget gt 1 %then %do;
15479 +           %let em_tree_multipleTargets=Y;
15480 +        %end;
15481 +      %end;
15482 +   %end;
15484 +   /* create view of only necessary variable for performance reasons */
15485 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15486 +   data &tempData / view=&tempData;
15487 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15488 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15489 +       %EM_TARGET
15490 +     %end;
15491 +     %else %do;
15492 +       %if &em_tree_numTarget ne 0 %then %do;
15493 +         %do i=1 %to &em_tree_numTarget;
15494 +            &&em_tree_targetVars&i
15495 +         %end;
15496 +       %end;
15497 +     %end;
15498 +     );
15499 +   run;
15501 +   /* run Tree procedure */
15502 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15504 +   /* Check return code and throw exception if error is detected */
15505 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15506 +   %if &syserr %then %do;
15507 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15508 +     %goto doendm;
15509 +   %end;
15511 +   /* add decision score code if multiple targets are processed */
15512 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15513 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15514 +   %end;
15516 +   /* create outfit dataset if multiple score statements have been executed */
15517 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15519 +   /* create English Rules */
15520 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15521 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15522 +       %em_tree_makeEnglishRules;
15524 +       /* English Rules */
15525 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15527 +     %end;
15528 +   filename x;
15530 +   %doendm:
15531 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15532 +%macro EM_SetProperties;
15534 +   /* train properties */
15535 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15536 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15537 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15538 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15539 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15540 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15541 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15542 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15543 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15544 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15545 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15546 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15547 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15548 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15549 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15550 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15551 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15552 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15553 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15554 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15555 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15556 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15557 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15558 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15559 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15560 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15561 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15562 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15563 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15564 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15565 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15566 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15567 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15568 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15569 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15570 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15571 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15572 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15573 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15574 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15575 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15577 +   /* properties for interactive sample */
15578 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15579 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15580 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15581 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15583 +   /* report properties */
15584 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15585 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15587 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15588 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15589 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15598 +   /* score properties */
15599 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15602 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15604 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15605 +  %global &nLevel;
15606 +  proc dmdb batch data=&indata
15607 +    classout=_tmp_dmdbout;
15608 +    class &target;
15609 +  run;
15610 +  data _tmp_dmdbout;
15611 +    set _tmp_dmdbout;
15612 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15613 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15614 +  run;
15615 +  data _null_;
15616 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15617 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15618 +    %let dsid = %sysfunc(close(&dsid));
15619 +     call symput("&nLevel", put(&_obs, Best12.));
15620 +  run;
15622 +  proc datasets lib=work nolist;
15623 +     delete _tmp_dmdbout;
15624 +  run;
15625 +  quit;
15626 +%Mend EM_CheckBinaryTargetLevel;
15629 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15631 +  /* determine the number of obs in training data */
15632 +  proc sql;
15633 +    reset noprint;
15634 +    select count(*) into :em_nobs from &indata;
15635 +  quit;
15637 +  /* determine the number of input variables */
15638 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15639 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15641 +  /* retrieve targetEvent from decmeta */
15642 +  %let targetEvent=;
15643 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15644 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15645 +      data _null_;
15646 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15647 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15648 +      run;
15649 +    %end;
15650 +  %end;
15652 +  /* create targetTable if multipleTar eq Y */
15653 +  data temptarget;
15654 +    set &EM_DATA_VARIABLESET;
15655 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15656 +  run;
15658 + /* data sets */
15659 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15660 + %EM_GETNAME(key=EMTREE,        type=DATA);
15661 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15662 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15663 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15664 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15665 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15666 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15667 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15668 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15670 + /* files */
15671 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15672 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15674 + /* turn on pmml if requested */
15675 + %let nnpmml=0;
15676 + %if %symexist(EM_PMML) %then %do;
15677 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15678 +       %let nnpmml=1;
15680 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15681 +%end;
15683 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15685 + %if &nnpmml or &numClassTarget %then %do;
15687 +       /* create dmdb needed for pmml generation */
15688 +       %let tree_maxlevel = 512;
15689 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15690 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15691 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15692 +         %end;
15693 +       %end;
15694 +       %if &tree_maxlevel gt 0 %then %do;
15695 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15696 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15697 +       %end;
15699 +       %let targetOrderString =;
15700 +       %let targetString = ;
15701 +       data _null_;
15702 +          length orderString nameString $10000;
15703 +          retain orderString nameString;
15704 +          set &em_data_variableset end=eof;
15705 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15706 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15707 +          %end;
15708 +          %else %do;
15709 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15710 +          %end;          select(order);
15711 +            when('')        order ='DESC';
15712 +            when('FMTASC')  order='ASCFMT';
15713 +            when('FMTDESC') order='DESFMT';
15714 +            otherwise;
15715 +          end;
15716 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15717 +          nameString = trim(nameString)!!' '!!trim(NAME);
15719 +          if eof then do;
15720 +             call symput('targetOrderString', trim(orderString));
15721 +             call symput('targetString', trim(nameString));
15722 +          end;
15723 +       run;
15725 +       %let arborkluge= "work._treeDMDB";
15727 +       proc dmdb batch data=&indata
15728 +       %if &nnpmml %then %do;
15729 +           PMML
15730 +       %end;
15731 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15734 +   %if &nnpmml %then %do;
15735 +        %if "%EM_ID" ne "" %then %do;
15736 +          id %EM_ID;
15737 +        %end;
15738 +        %if &EM_NUM_CLASS gt 0 %then %do;
15739 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15740 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15741 +               &targetOrderString;
15742 +        %end;
15743 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15744 +          var %EM_INTERVAL;
15745 +        %end;
15746 +        target &targetString %EM_INTERVAL_TARGET;
15747 +        %if "%EM_FREQ" ne "" %then %do;
15748 +          freq %EM_FREQ;
15749 +        %end;
15750 +  %end;
15751 +  %else %do;
15752 +      class  &targetOrderString;
15753 +      target &targetString %EM_INTERVAL_TARGET;
15754 +  %end;
15755 +       run;
15756 +       quit;
15758 +       proc datasets lib=work nolist;
15759 +          delete classout varout;
15760 +       run;
15761 +       quit;
15763 +    %end;
15764 + %end;
15766 + /* run Arbor procedure */
15767 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15768 +  proc arbor data=&INDATA
15770 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15771 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15772 +  %end;
15774 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15775 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15776 +  %end;
15778 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15779 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15780 +  %end;
15782 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15783 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15784 +  %end;
15786 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15787 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15788 +  %end;
15790 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15791 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15792 +  %end;
15793 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15794 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15795 +  %end;
15796 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15797 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15798 +  %end;
15800 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15801 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15802 +      alpha = &EM_PROPERTY_SIGLEVEL
15803 +    %end;
15804 +  %end;
15806 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15807 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15808 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15809 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15810 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15812 +        padjust =
15813 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15814 +          &chaid
15815 +        %end;
15816 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15817 +          DEPTH
15818 +        %end;
15819 +      %end;
15820 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15821 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15822 +         pvars = &num_inputs
15823 +      %end;
15824 +    %end;
15825 +  %end;
15826 +  %else %do;
15827 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15828 +         padjust = NONE
15829 +      %end;
15830 +  %end;
15832 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15833 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15834 +    Maxrules = &num_nrules
15835 +  %end;
15837 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15838 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15839 +    Maxsurrs = &num_nsurrs
15840 +  %end;
15842 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15843 +     Missing=&EM_PROPERTY_MISSINGVALUE
15844 +  %end;
15846 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15847 +     USEVARONCE
15848 +  %end;
15850 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15851 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15852 +  %end;
15855 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15856 +    event = "&targetEvent"
15857 +  %end;
15859 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15860 +     DECSEARCH
15861 +  %end;
15863 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15864 +     PRIORSSEARCH
15865 +  %end;
15867 +  %if &arbor_1 ne %then %do;
15868 +    &arbor_1
15869 +  %end;
15871 +  %if &em_arbor ne %then %do;
15872 +     &em_arbor
15873 +  %end;
15874 +  ;
15875 + %end;
15876 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15877 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15878 +       interact;
15879 + %end;
15880 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15881 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15882 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15883 +    %put &em_codebar;
15884 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15885 +    %put &errormsg;
15886 +    %put &em_codebar;
15887 +    %goto doendm;
15888 +   %end;
15889 +   %else %do;
15890 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15891 +       interact;
15892 +   %end;
15893 + %end;
15895 + %else %do;
15896 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15897 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15898 +    %put &em_codebar;
15899 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15900 +    %put &errormsg;
15901 +    %put &em_codebar;
15902 +    %goto doendm;
15903 +   %end;
15904 +   %else %do;
15905 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15906 +        interact;
15907 +   %end;
15908 + %end;
15910 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15911 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15912 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15913 +    %end;
15915 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15916 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15917 +    %end;
15919 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15920 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15921 +    %end;
15923 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15924 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15925 +    %end;
15927 +    %if "%EM_FREQ" ne "" %then %do;
15928 +       freq %EM_FREQ;
15929 +    %end;
15931 +    %if "&multipleTar" eq "Y" %then %do;
15932 +       /* cycle through all target vars in variableset */
15933 +       %let tdsid = %sysfunc(open(temptarget));
15934 +       %if &tdsid %then %do;
15935 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15936 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15937 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15938 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15939 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15940 +             target &var / level = &lvl
15941 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15942 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15943 +             %end;
15944 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15945 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15946 +             %end;
15947 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15948 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15949 +             %end;
15950 +          %end;
15951 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
15952 +       %end;
15953 +       useTarget variable = %EM_TARGET;
15954 +    %end;
15955 +    %else %do;
15956 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
15957 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
15958 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
15959 +      %end;
15960 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15961 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
15962 +      %end;
15963 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15964 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
15965 +      %end;
15966 +    %end;
15968 +    %if "&multipleTar" eq "N" %then %do;
15969 +      &EM_DEC_STATEMENT;
15970 +    %end;
15972 +    Performance &EM_PROPERTY_PERFORMANCE
15973 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
15974 +      nodesize=&EM_PROPERTY_NODESAMPLE
15975 +    %end;
15976 +    ;
15978 +    %if "&intFlag" eq "Y" %then %do;
15979 +       INTERACT Largest;
15980 +       Train maxnewdepth=0;
15981 +    %end;
15983 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
15984 +         Assess
15985 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
15986 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
15987 +              %put &em_codebar;
15988 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
15989 +              %put &errormsg;
15990 +              %put &em_codebar;
15991 +            %end;
15992 +            %else %do;
15993 +               Validata=&EM_IMPORT_VALIDATE
15994 +            %end;
15995 +         %end;
15996 +         %else %do;
15997 +           NoValidata
15998 +         %end;
15999 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16000 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16001 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16002 +               %if &dsid %then %do;
16003 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16004 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16005 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16006 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16007 +                   %else %do;
16008 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16009 +                      %else %let measure= MISC;
16010 +                   %end;
16011 +                 %end;
16012 +               %end;
16013 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16014 +            %end;
16015 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16016 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16017 +                 %let measure=ASE;
16018 +              %end;
16019 +              %else %do;
16020 +                 %let measure=MISC;
16021 +              %end;
16022 +            %end;
16023 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16024 +              %let measure=ASE;
16025 +            %end;
16026 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16027 +               %let measure = LIFT;
16028 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16029 +               %if &dsid %then %do;
16030 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16031 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16032 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16033 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16034 +                 %end;
16035 +               %end;
16036 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16037 +            %end;
16038 +            measure=&measure
16039 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16040 +               event = "&targetEvent"
16041 +            %end;
16042 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16043 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16044 +            %end;
16045 +         %end;
16046 +         %if "&multipleTar" eq "N" %then %do;
16047 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16048 +               CV
16049 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16050 +                 CVNITer = &EM_PROPERTY_CVNITER
16051 +               %end;
16052 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16053 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16054 +               %end;
16055 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16056 +                 CVSeed = &EM_PROPERTY_CVSEED
16057 +               %end;
16058 +            %end;
16059 +         %end;
16060 +       %end;
16061 +      ;
16063 +      %if "&intFlag" ne "Y" %then %do;
16064 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16065 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16066 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16067 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16069 +          SUBTREE &subtree
16070 +          %if "&subtree" eq "NLEAVES" %then %do;
16071 +            =&EM_PROPERTY_NSUBTREE
16072 +          %end;
16073 +          ;
16074 +        %end;
16076 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16077 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16078 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16079 +          %end;
16080 +       %end;
16081 +      %end;
16082 + %end;
16085 + MakeMacro nleaves = nleaves;
16086 + save
16087 + %if "&EM_USER_EMTREE" ne "" %then %do;
16088 +   MODEL=&EM_USER_EMTREE
16089 + %end;
16090 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16091 +   SEQUENCE=&EM_USER_OUTSEQ
16092 + %end;
16093 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16094 +   IMPORTANCE=&EM_USER_OUTIMPORT
16095 + %end;
16096 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16097 +   NODESTAT=&EM_USER_OUTNODES
16098 + %end;
16099 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16100 +   SUMMARY=&EM_USER_OUTSUMMARY
16101 + %end;
16102 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16103 +   STATSBYNODE=&EM_USER_OUTSTATS
16104 + %end;
16105 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16106 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16107 + %end;
16108 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16109 +   Pathlistnonmissing=&EM_USER_OUTPATH
16110 + %end;
16111 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16112 +   RULES = &EM_USER_OUTRULES
16113 + %end;
16114 + ;
16116 + %if "&intFlag" ne "Y" %then %do;
16118 +   %let lookupString = ;
16119 +   %if ^%symexist(EM_OPTION) %then
16120 +      %let EM_OPTION=;
16122 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16123 +      %let lookupString = LOOKUP=SELECT;
16124 +   %end;
16126 +   %let codetext=;
16127 +   %let norescodetxt=;
16129 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16130 +     %let codetext=&codetext DUMMY;
16131 +     %let norescodetxt=&norescodetxt DUMMY;
16132 +   %end;
16133 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16134 +     %let codetext=&codetext NOLEAFID;
16135 +     %let norescodetxt=&norescodetxt NOLEAFID;
16136 +   %end;
16137 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16138 +     %let norescodetxt=&norescodetxt NOPRED;
16139 +   %end;
16141 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16142 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16144 +   %if &nnpmml %then %do;
16145 +     code pmml;
16146 +   %end;
16148 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16149 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16150 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16151 +   %end;
16152 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16153 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16154 +   %end;
16155 + %end;
16157 + run;
16158 + quit;
16160 + /*%em_checkerror(); */
16161 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16162 +   /* Delete DMDB catalog */
16163 +   proc datasets lib=work nolist;
16164 +       delete _treeDMDB / mt=cat;
16165 +  run;
16166 +  %end;
16168 + %if &nnpmml %then %do;
16169 +    ods pmml close;
16170 + %end;
16172 +  %doendm:
16174 +%mend em_tree_runTreeProcedure;
16176 +%macro em_tree_createFitStats( multipleTar= );
16179 +  /* create targetTable is multipleTar eq Y */
16180 +  data temptarget;
16181 +    set &EM_DATA_VARIABLESET;
16182 +    where ROLE="TARGET";
16183 +  run;
16185 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16186 +   data &EM_USER_EMOUTFIT;
16187 +     length target $32;
16188 +     merge work.fit_train
16189 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16190 +       work.fit_valid
16191 +     %end;
16192 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16193 +       work.fit_test
16194 +     %end;
16195 +     ;
16196 +     %if "&multipleTar" eq "N" %then %do;
16197 +       target="%EM_TARGET";
16198 +     %end;
16199 +     %else %do;
16200 +       target = _TARGET_;
16201 +     %end;
16202 +     drop _NW_ _SUMW_
16203 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16204 +        _VSUMW_
16205 +     %end;
16206 +     ;
16207 +   run;
16209 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16210 +     proc datasets library=work nolist;
16211 +       delete fit_valid;
16212 +     run;
16213 +   %end;
16214 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16215 +     proc datasets library=work nolist;
16216 +       delete fit_test;
16217 +     run;
16218 +   %end;
16220 +%mend em_tree_createFitStats;
16223 +%macro em_tree_makeEnglishRules;
16225 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16226 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16228 +  /* verify that necessary tables exist and if not, skip processing */
16229 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16230 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16231 +    %goto doendm;
16232 +  %end;
16233 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16234 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16235 +    %goto doendm;
16236 +  %end;
16238 +  /* determine length of variable in outpath dataset */
16239 +  %let vlength= ;
16240 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16241 +  %if &dsid ne %then %do;
16242 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16243 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16244 +  %end;
16245 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16247 +  data tempoutpath;
16248 +    length varname $&vlength;
16249 +    retain varname;
16250 +    set &EM_USER_OUTPATH;
16252 +    if ^missing(variable) then varname=variable;
16253 +    else if ^missing(var_name) then varname=var_name;
16254 +    output;
16255 +  run;
16257 +  /* create an array of generated predicted variable names */
16258 +  %let tree_pred_vars = ;
16259 +  %let tree_pred_label = ;
16260 +  %let numpred= 0;
16261 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16263 +    data _null_;
16264 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16265 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16266 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16267 +     if eof then
16268 +       call symput('numpred', strip(put(_N_, BEST.)));
16269 +    run;
16270 +  %end;
16272 +  /* determine if NPRIORS exists in outnodes  */
16273 +  %local nprior_flag;
16274 +  data _null_;
16275 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16276 +    if eof then do;
16277 +      call symput('nprior_flag', strip(put(npriors, best.)));
16278 +    end;
16279 +  run;
16281 +  proc sort data=tempoutpath; by node; run;
16282 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16284 +  data tempoutpath;
16285 +    merge tempoutpath(in=_a) outnodes(keep= node
16286 +    %if "&nprior_flag" ne "." %then %do;
16287 +      NPRIORS
16288 +    %end;
16289 +    %else %do;
16290 +      N
16291 +    %end;
16292 +    %if &numpred gt 0 %then %do;
16293 +      %do i=1 %to &numpred;
16294 +        &&tree_pred_vars&i
16295 +      %end;
16296 +    %end;
16297 +    );
16298 +    by node;
16299 +    if _a;
16300 +  run;
16302 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16304 +  data _null_;
16305 +    file x;
16306 +    set tempoutpath;
16307 +    by node descending varname;
16308 +    retain origvar oldnode string;
16309 +    length origvar $32 oldnode 8 string $200;
16311 +    if _N_ = 1 then do;
16312 +      origvar = varname;
16313 +      oldnode = node;
16314 +    end;
16316 +    if first.node then do;
16317 +       put "&EM_CODEBAR";
16318 +       put " Node = " node;
16319 +       put "&EM_CODEBAR";
16320 +    end;
16322 +      if first.varname then do;
16323 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16324 +            if MISSING(CHARACTER_VALUE) then do;
16325 +             if NUMERIC_VALUE ne .  then do;
16326 +              if ^first.node then do;
16327 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16328 +              end;
16329 +              else do;
16330 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16331 +              end;
16332 +             end;
16333 +            end;
16334 +            else do;
16335 +              if ^first.node then do;
16336 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16337 +              end;
16338 +              else do;
16339 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16340 +              end;
16341 +             end;
16342 +         end;
16343 +         else if RELATION in ("=") then do;
16344 +            if ^first.node then do;
16345 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16346 +            end;
16347 +            else do;
16348 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16349 +            end;
16350 +         end;
16351 +         else if RELATION in ("ISMISSING") then do;
16352 +            if ^first.node then do;
16353 +              string = " AND "|| strip(varname) || " equals Missing";
16354 +            end;
16355 +            else do;
16356 +              string = "if "|| strip(varname) ||" equals Missing";
16357 +            end;
16358 +         end;
16359 +         else if RELATION in ("ISNOTMISSING") then do;
16360 +            if ^first.node then do;
16361 +              string = " AND "|| strip(varname) || " equals All Values";
16362 +            end;
16363 +            else do;
16364 +              string = "if "|| strip(varname) ||" equals All Values";
16365 +            end;
16366 +         end;
16367 +         if ^missing(varname) then origvar = varname;
16368 +         oldnode=node;
16370 +      end;
16371 +      else do;
16372 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16373 +          if MISSING(CHARACTER_VALUE) then do;
16374 +           if  NUMERIC_VALUE ne .  then do;
16375 +            if ^MISSING(string) then
16376 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16377 +            else
16378 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16379 +           end;
16380 +          end;
16381 +          else do;
16382 +            if ^MISSING(string) then
16383 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16384 +            else
16385 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16386 +          end;
16388 +         end;
16389 +         else if RELATION in ("=") then do;
16390 +           string = strip(string)||", "||strip(character_value);
16391 +         end;
16392 +         else if RELATION in ("ISMISSING") then do;
16394 +         end;
16395 +         if ^missing(varname) then origvar = varname;
16396 +         oldnode=node;
16397 +      end;
16398 +      if last.varname then do;
16399 +         if RELATION in ("ISMISSING") then do;
16400 +           if ^first.varname then do;
16401 +             string = strip(string) || " or MISSING";
16402 +           end;
16403 +         end;
16404 +         put string;
16405 +         if ^missing(varname) then origvar = varname;
16406 +         oldnode=node;
16407 +      end;
16409 +      if last.node then do;
16410 +         put "then ";
16411 +         put " Tree Node Identifier   = " node;
16413 +         %if "&nprior_flag" ne "." %then %do;
16414 +           put " Number of Observations = " NPRIORS;
16415 +         %end;
16416 +         %else %do;
16417 +           put " Number of Observations = " N;
16418 +         %end;
16420 +         %if &numpred gt 0 %then %do;
16421 +           %do i=1 %to &numpred;
16422 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16423 +           %end;
16424 +         %end;
16426 +         put " ";
16427 +         if ^missing(varname) then origvar = varname;
16428 +         oldnode=node;
16429 +      end;
16431 +  run;
16433 +  proc datasets lib=work nolist;
16434 +    delete tempoutpath outnodes;
16435 +  run;
16437 +  %doendm:
16438 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: 1596892 kilobytes of physical memory.
NOTE: Will use 6616 out of 6616 training cases.
NOTE: Using memory pool with 146240512 bytes.
NOTE: Will not search for split on variable campus.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 12 times.
NOTE: Training used 2181040 bytes of work memory.
NOTE: The subtree sequence contains 46 subtrees. The largest has 91 nodes and 46 leaves.
NOTE: Using subtree with 87 nodes and 44 leaves.
NOTE: Using subtree with 87 nodes and 44 leaves.
NOTE: Created macro variable NLEAVES equal to 44.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 12 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 4324 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 87 observations and 16 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 222 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 1871 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 46 observations and 18 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 522 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 87 observations and 5 variables.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
 
 
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.54 seconds
      cpu time            0.51 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 6616 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.55 seconds
      cpu time            0.51 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 222 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 222 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 222 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 222 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 87 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 87 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 222 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 87 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 222 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 222 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 222 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:30,
      Create Time=21Apr2016:05:42:30
 
NOTE: 437 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 222 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16440
16441  *------------------------------------------------------------*;
16442  * End TRAIN: Tree;
16443  *------------------------------------------------------------*;
 
16444  *------------------------------------------------------------*;
16445  * Close any missing semi colons;
16446  *------------------------------------------------------------*;
16447  ;
16448  ;
16449  ;
16450  ;
16451  quit;
16452  *------------------------------------------------------------*;
16453  * Close any unbalanced quotes;
16454  *------------------------------------------------------------*;
16455  /*; *"; *'; */
16456  ;
16457  run;
16458  quit;
16459  /* Reset EM Options */
16460  options formchar="|----|+|---+=|-/\<>*";
16461  options nocenter ls=256 ps=10000;
16462  goptions reset=all device=GIF NODISPLAY;
 
16463  proc sort data=WORK.EM_USER_REPORT;
16464  by ID VIEW;
16465  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 21, 2016
Time:                05:42:31
*------------------------------------------------------------*
16567  %let EMEXCEPTIONSTRING=;
16568  *------------------------------------------------------------*;
16569  * SCORE: Tree;
16570  *------------------------------------------------------------*;
16571  %let EM_ACTION = SCORE;
16572  %let syscc = 0;
16573  %macro main;
16574
16575    %if %upcase(&EM_ACTION) = CREATE %then %do;
16576      filename temp catalog 'sashelp.emmodl.tree_create.source';
16577      %include temp;
16578      filename temp;
16579
16580      %em_tree_create;
16581    %end;
16582
16583     %else
16584     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16585
16586         filename temp catalog 'sashelp.emmodl.tree_train.source';
16587         %include temp;
16588         filename temp;
16589         %em_tree_train;
16590     %end;
16591
16592    %else
16593    %if %upcase(&EM_ACTION) = SCORE %then %do;
16594      filename temp catalog 'sashelp.emmodl.tree_score.source';
16595      %include temp;
16596      filename temp;
16597
16598      %em_tree_score;
16599
16600    %end;
16601
16602    %else
16603    %if %upcase(&EM_ACTION) = REPORT %then %do;
16604
16605         filename temp catalog 'sashelp.emmodl.tree_report.source';
16606         %include temp;
16607         filename temp;
16608
16609         %em_tree_report;
16610     %end;
16611
16612    %else
16613    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16614
16615         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16616         %include temp;
16617         filename temp;
16618         %EM_TREE_OPENTREEVIEWER;
16619
16620     %end;
16621
16622    %else
16623    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16624
16625         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16626         %include temp;
16627         filename temp;
16628         %EM_TREE_CLOSETREEVIEWER;
16629
16630     %end;
16631
16632
16633     %doendm:
16634  %mend main;
16635
16636  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16638 +%macro em_tree_score;
16640 +   /* determine if multiple targets will be processed */
16641 +   %let em_tree_multipleTargets=N;
16642 +   %let em_tree_numTarget=1;
16643 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16644 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16645 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16646 +         %let em_tree_multipleTargets=N;
16647 +      %end;
16648 +      %else %do;
16649 +         /* create macro array of targets  */
16650 +         data _null_;
16651 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16652 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16653 +           if eof then
16654 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16655 +        run;
16657 +        %if &em_tree_numTarget gt 1 %then %do;
16658 +           %let em_tree_multipleTargets=Y;
16659 +        %end;
16660 +      %end;
16661 +   %end;
16663 +   /* build flow and publish scoring code */
16664 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16665 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16667 +   filename treeflow "&EM_USER_TREEFLOW";
16668 +   filename treepub "&EM_USER_TREEPUBLISH";
16670 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16671 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16673 +   %em_copyfile(infref=treeflow, outfref=flowref);
16674 +   %em_copyfile(infref=treepub, outfref=pubref);
16676 +   filename treeflow;
16677 +   filename treepub;
16679 +   /* if priors are used, add code to generate unadjusted residuals in export */
16680 +   %let useAdjPriors = N;
16681 +   data _null_;
16682 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16683 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16684 +   run;
16685 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16686 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16687 +      %include temp;
16688 +      filename temp;
16690 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16691 +      filename adjref "&EM_USER_adjResidualCode";
16692 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16694 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16696 +      filename adjref;
16697 +   %end;
16699 +   /* LEAF */
16700 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16701 +      data _null_;
16702 +        file flowref mod;
16703 +        put 'drop _LEAF_;';
16704 +      run;
16706 +      data _null_;
16707 +        file pubref mod;
16708 +        put 'drop _LEAF_;';
16709 +      run;
16711 +   %end;
16713 +   filename flowref;
16714 +   filename pubref;
16716 +   /* em_metachange code */
16717 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16718 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16719 +   %end;
16721 +   /* variable selection based on importance stat    */
16722 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16723 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16724 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16725 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16726 +     %let obs = %sysfunc(fetch(&dsid));
16727 +     %do %while(&obs=0);
16728 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16729 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16730 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16731 +       %let obs = %sysfunc(fetch(&dsid));
16732 +     %end;
16733 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16734 +   %end;
16736 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16737 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16738 +    %let tree_pred_vars = ;
16739 +    %let tree_pred_lvl =;
16740 +    %let numpred= 0;
16742 +    data _null_;
16743 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16744 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16745 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16746 +     if eof then
16747 +       call symput('numpred', strip(put(_N_, BEST.)));
16748 +    run;
16749 +   %end;
16751 +   %if &numpred ne 0 %then %do;
16752 +    %do i=1 %to &numpred;
16753 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16754 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16755 +    %end;
16756 +   %end;
16758 +   /* determine if multiple targets will be processed */
16759 +   %let em_tree_multipleTargets=N;
16760 +   %let em_tree_numTarget=1;
16761 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16762 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16763 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16764 +         %let em_tree_multipleTargets=N;
16765 +      %end;
16766 +      %else %do;
16767 +        data _null_;
16768 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16769 +          if eof then
16770 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16771 +        run;
16773 +        %if &em_tree_numTarget gt 1 %then %do;
16774 +           %let em_tree_multipleTargets=Y;
16775 +        %end;
16776 +     %end;
16777 +   %end;
16779 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16780 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16782 +      /* variable importance */
16783 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16784 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16786 +         %let validexist=0;
16787 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16788 +           %let validexist=1;
16789 +         %end;
16791 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16792 +         /* and the columns may not be generated                                                                                 */
16793 +         %let em_tree_cvexists=;
16794 +         %let em_tree_surrexists=.;
16795 +         data _null_;
16796 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16797 +            if eof then do ;
16798 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16799 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16800 +            end;
16801 +         run;
16803 +         data &EM_USER_OUTIMPORT;
16804 +            set &EM_USER_OUTIMPORT;
16806 +            /* format columns based on Precison value specified */
16807 +            format importance 15.&EM_PROPERTY_PRECISION
16808 +                 %if &validexist %then %do;
16809 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16810 +                 %end;
16811 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16812 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16813 +                 %end;
16814 +            ;
16815 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16816 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16817 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16818 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16819 +                 %if "&em_tree_surrexists" ne "" %then %do;
16820 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16821 +                 %end;
16822 +                 %if &validexist %then %do;
16823 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16824 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16825 +                 %end;
16826 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16827 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16828 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16829 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16830 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16831 +                 %end;
16832 +            ;
16833 +         run;
16835 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16836 +      %end;
16837 +   %end;
16839 +   %doendm:
16840 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:30,
      Create Time=21Apr2016:05:42:30
 
NOTE: 418 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:31,
      Create Time=21Apr2016:05:42:31
 
NOTE: 413 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=15221,
      Last Modified=21Apr2016:05:42:30,
      Create Time=21Apr2016:05:42:30
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=15048,
      Last Modified=21Apr2016:05:42:31,
      Create Time=21Apr2016:05:42:31
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 12 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
16841
16842  *------------------------------------------------------------*;
16843  * End SCORE: Tree;
16844  *------------------------------------------------------------*;
 
16845  proc sort data=WORK.EM_METACHANGE;
16846  by key uname;
16847  run;
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16848  filename x "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
16849  data _null_;
16850  file x;
16851  put 'if upcase(NAME) = "AGE" then do;';
16852  put 'ROLE = "REJECTED";';
16853  put 'end;';
16854  put 'else ';
16855  put 'if upcase(NAME) = "CAMPUS" then do;';
16856  put 'ROLE = "REJECTED";';
16857  put 'end;';
16858  put 'else ';
16859  put 'if upcase(NAME) = "DEPT" then do;';
16860  put 'ROLE = "REJECTED";';
16861  put 'end;';
16862  put 'else ';
16863  put 'if upcase(NAME) = "EMPLOYED" then do;';
16864  put 'ROLE = "REJECTED";';
16865  put 'end;';
16866  put 'else ';
16867  put 'if upcase(NAME) = "EXEMPT2" then do;';
16868  put 'ROLE = "REJECTED";';
16869  put 'end;';
16870  put 'else ';
16871  put 'if upcase(NAME) = "FTE" then do;';
16872  put 'ROLE = "REJECTED";';
16873  put 'end;';
16874  put 'else ';
16875  put 'if upcase(NAME) = "GENDER" then do;';
16876  put 'ROLE = "REJECTED";';
16877  put 'end;';
16878  put 'else ';
16879  put 'if upcase(NAME) = "POSITION" then do;';
16880  put 'ROLE = "REJECTED";';
16881  put 'end;';
16882  put 'else ';
16883  put 'if upcase(NAME) = "Q_TOTALSAL" then do;';
16884  put 'ROLE = "ASSESS";';
16885  put 'end;';
16886  put 'else ';
16887  put 'if upcase(NAME) = "STATUS" then do;';
16888  put 'ROLE = "REJECTED";';
16889  put 'end;';
16890  put 'else ';
16891  put 'if upcase(NAME) = "STSERVYR" then do;';
16892  put 'ROLE = "REJECTED";';
16893  put 'end;';
16894  put 'else ';
16895  put 'if upcase(NAME) = "_NODE_" then do;';
16896  put 'ROLE = "SEGMENT";';
16897  put 'LEVEL = "NOMINAL";';
16898  put 'end;';
16899  run;
 
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:32,
      Create Time=20Apr2016:20:49:23
 
NOTE: 48 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16900  filename x;
NOTE: Fileref X has been deassigned.
 
16901  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
16902  *------------------------------------------------------------*;
16903  * Tree: Scoring DATA data;
16904  *------------------------------------------------------------*;
16905  data EMWS1.Tree_TRAIN
16906  / view=EMWS1.Tree_TRAIN
16907  ;
16908  set EMWS1.Part_TRAIN
16909  ;
16910  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
16911 +****************************************************************;
16912 +******             DECISION TREE SCORING CODE             ******;
16913 +****************************************************************;
16914 +
16915 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16916 +LENGTH _WARN_  $    4;
16917 +
16918 +******              LABELS FOR NEW VARIABLES              ******;
16919 +label _NODE_ = 'Node' ;
16920 +label _LEAF_ = 'Leaf' ;
16921 +label P_totalsal = 'Predicted: totalsal' ;
16922 +label V_totalsal = 'Validated: totalsal' ;
16923 +label R_totalsal = 'Residual: totalsal' ;
16924 +label _WARN_ = 'Warnings' ;
16925 +
16926 +
16927 +
16928 +******             ASSIGN OBSERVATION TO NODE             ******;
16929 +IF  NOT MISSING(nonstsal ) AND
16930 +                115051 <= nonstsal  THEN DO;
16931 +  IF  NOT MISSING(nonstsal ) AND
16932 +                257529.5 <= nonstsal  THEN DO;
16933 +    IF  NOT MISSING(nonstsal ) AND
16934 +                  372771.5 <= nonstsal  THEN DO;
16935 +      IF  NOT MISSING(nonstsal ) AND
16936 +                    512979.5 <= nonstsal  THEN DO;
16937 +        _NODE_  =                   31;
16938 +        _LEAF_  =                   44;
16939 +        P_totalsal  =            582917.75;
16940 +        V_totalsal  =     596384.333333333;
16941 +        END;
16942 +      ELSE DO;
16943 +        _NODE_  =                   30;
16944 +        _LEAF_  =                   43;
16945 +        P_totalsal  =     449206.769230769;
16946 +        V_totalsal  =            420689.75;
16947 +        END;
16948 +      END;
16949 +    ELSE DO;
16950 +      IF  NOT MISSING(nonstsal ) AND
16951 +                    315230.5 <= nonstsal  THEN DO;
16952 +        _NODE_  =                   29;
16953 +        _LEAF_  =                   42;
16954 +        P_totalsal  =            347255.75;
16955 +        V_totalsal  =               341249;
16956 +        END;
16957 +      ELSE DO;
16958 +        IF  NOT MISSING(statesal ) AND
16959 +                         70181 <= statesal  THEN DO;
16960 +          _NODE_  =                   55;
16961 +          _LEAF_  =                   41;
16962 +          P_totalsal  =     385892.666666666;
16963 +          V_totalsal  =               371409;
16964 +          END;
16965 +        ELSE DO;
16966 +          IF  NOT MISSING(nonstsal ) AND
16967 +                          285730 <= nonstsal  THEN DO;
16968 +            _NODE_  =                   91;
16969 +            _LEAF_  =                   40;
16970 +            P_totalsal  =     305890.966666666;
16971 +            V_totalsal  =     301179.555555555;
16972 +            END;
16973 +          ELSE DO;
16974 +            _NODE_  =                   90;
16975 +            _LEAF_  =                   39;
16976 +            P_totalsal  =     274289.210526315;
16977 +            V_totalsal  =     277074.631578947;
16978 +            END;
16979 +          END;
16980 +        END;
16981 +      END;
16982 +    END;
16983 +  ELSE DO;
16984 +    IF  NOT MISSING(nonstsal ) AND
16985 +                    180203 <= nonstsal  THEN DO;
16986 +      IF  NOT MISSING(statesal ) AND
16987 +                     51060.5 <= statesal  THEN DO;
16988 +        _NODE_  =                   27;
16989 +        _LEAF_  =                   38;
16990 +        P_totalsal  =     309176.928571428;
16991 +        V_totalsal  =     310101.888888888;
16992 +        END;
16993 +      ELSE DO;
16994 +        IF  NOT MISSING(nonstsal ) AND
16995 +                        223651 <= nonstsal  THEN DO;
16996 +          IF  NOT MISSING(nonstsal ) AND
16997 +                        241883.5 <= nonstsal  THEN DO;
16998 +            _NODE_  =                   89;
16999 +            _LEAF_  =                   37;
17000 +            P_totalsal  =     253022.555555555;
17001 +            V_totalsal  =           250817.875;
17002 +            END;
17003 +          ELSE DO;
17004 +            _NODE_  =                   88;
17005 +            _LEAF_  =                   36;
17006 +            P_totalsal  =            235625.56;
17007 +            V_totalsal  =            239422.15;
17008 +            END;
17009 +          END;
17010 +        ELSE DO;
17011 +          IF  NOT MISSING(statesal ) AND
17012 +                           27296 <= statesal  THEN DO;
17013 +            _NODE_  =                   87;
17014 +            _LEAF_  =                   35;
17015 +            P_totalsal  =             237379.8;
17016 +            V_totalsal  =               220000;
17017 +            END;
17018 +          ELSE DO;
17019 +            _NODE_  =                   86;
17020 +            _LEAF_  =                   34;
17021 +            P_totalsal  =     202236.918367347;
17022 +            V_totalsal  =             200073.6;
17023 +            END;
17024 +          END;
17025 +        END;
17026 +      END;
17027 +    ELSE DO;
17028 +      IF  NOT MISSING(statesal ) AND
17029 +                     69813.5 <= statesal  THEN DO;
17030 +        IF  NOT MISSING(statesal ) AND
17031 +                      118874.5 <= statesal  THEN DO;
17032 +          _NODE_  =                   51;
17033 +          _LEAF_  =                   33;
17034 +          P_totalsal  =            320843.75;
17035 +          V_totalsal  =             305409.5;
17036 +          END;
17037 +        ELSE DO;
17038 +          _NODE_  =                   50;
17039 +          _LEAF_  =                   32;
17040 +          P_totalsal  =      228098.23076923;
17041 +          V_totalsal  =     237538.666666666;
17042 +          END;
17043 +        END;
17044 +      ELSE DO;
17045 +        IF  NOT MISSING(nonstsal ) AND
17046 +          nonstsal  <             140119.5 THEN DO;
17047 +          IF  NOT MISSING(statesal ) AND
17048 +                           36550 <= statesal  THEN DO;
17049 +            _NODE_  =                   83;
17050 +            _LEAF_  =                   29;
17051 +            P_totalsal  =     184263.533333333;
17052 +            V_totalsal  =     171906.142857142;
17053 +            END;
17054 +          ELSE DO;
17055 +            _NODE_  =                   82;
17056 +            _LEAF_  =                   28;
17057 +            P_totalsal  =     130354.704347826;
17058 +            V_totalsal  =     133023.814814814;
17059 +            END;
17060 +          END;
17061 +        ELSE DO;
17062 +          IF  NOT MISSING(statesal ) AND
17063 +                         16167.5 <= statesal  THEN DO;
17064 +            _NODE_  =                   85;
17065 +            _LEAF_  =                   31;
17066 +            P_totalsal  =     187574.903225806;
17067 +            V_totalsal  =     189994.285714285;
17068 +            END;
17069 +          ELSE DO;
17070 +            _NODE_  =                   84;
17071 +            _LEAF_  =                   30;
17072 +            P_totalsal  =            161803.34;
17073 +            V_totalsal  =     161883.142857142;
17074 +            END;
17075 +          END;
17076 +        END;
17077 +      END;
17078 +    END;
17079 +  END;
17080 +ELSE DO;
17081 +  IF  NOT MISSING(statesal ) AND
17082 +                   87510 <= statesal  THEN DO;
17083 +    IF  NOT MISSING(statesal ) AND
17084 +                    157105 <= statesal  THEN DO;
17085 +      IF  NOT MISSING(statesal ) AND
17086 +                    217772.5 <= statesal  THEN DO;
17087 +        IF  NOT MISSING(statesal ) AND
17088 +                      300737.5 <= statesal  THEN DO;
17089 +          _NODE_  =                   47;
17090 +          _LEAF_  =                   27;
17091 +          P_totalsal  =            371259.25;
17092 +          V_totalsal  =     385116.666666666;
17093 +          END;
17094 +        ELSE DO;
17095 +          _NODE_  =                   46;
17096 +          _LEAF_  =                   26;
17097 +          P_totalsal  =     270754.181818181;
17098 +          V_totalsal  =     292902.833333333;
17099 +          END;
17100 +        END;
17101 +      ELSE DO;
17102 +        IF  NOT MISSING(nonstsal ) AND
17103 +                         53207 <= nonstsal  THEN DO;
17104 +          _NODE_  =                   45;
17105 +          _LEAF_  =                   25;
17106 +          P_totalsal  =               259173;
17107 +          V_totalsal  =     242883.142857142;
17108 +          END;
17109 +        ELSE DO;
17110 +          IF  NOT MISSING(statesal ) AND
17111 +                        193022.5 <= statesal  THEN DO;
17112 +            _NODE_  =                   81;
17113 +            _LEAF_  =                   24;
17114 +            P_totalsal  =            212712.05;
17115 +            V_totalsal  =     216177.153846153;
17116 +            END;
17117 +          ELSE DO;
17118 +            _NODE_  =                   80;
17119 +            _LEAF_  =                   23;
17120 +            P_totalsal  =     181393.888888888;
17121 +            V_totalsal  =             186975.5;
17122 +            END;
17123 +          END;
17124 +        END;
17125 +      END;
17126 +    ELSE DO;
17127 +      IF  NOT MISSING(nonstsal ) AND
17128 +                     23033.5 <= nonstsal  THEN DO;
17129 +        IF  NOT MISSING(nonstsal ) AND
17130 +                       75175.5 <= nonstsal  THEN DO;
17131 +          _NODE_  =                   43;
17132 +          _LEAF_  =                   22;
17133 +          P_totalsal  =     209111.866666666;
17134 +          V_totalsal  =     217810.166666666;
17135 +          END;
17136 +        ELSE DO;
17137 +          IF  NOT MISSING(statesal ) AND
17138 +                          115253 <= statesal  THEN DO;
17139 +            _NODE_  =                   79;
17140 +            _LEAF_  =                   21;
17141 +            P_totalsal  =     169171.775510204;
17142 +            V_totalsal  =     176223.142857142;
17143 +            END;
17144 +          ELSE DO;
17145 +            _NODE_  =                   78;
17146 +            _LEAF_  =                   20;
17147 +            P_totalsal  =     143113.525423728;
17148 +            V_totalsal  =     141255.652173913;
17149 +            END;
17150 +          END;
17151 +        END;
17152 +      ELSE DO;
17153 +        IF  NOT MISSING(statesal ) AND
17154 +                      117576.5 <= statesal  THEN DO;
17155 +          IF  NOT MISSING(statesal ) AND
17156 +                          136441 <= statesal  THEN DO;
17157 +            _NODE_  =                   77;
17158 +            _LEAF_  =                   19;
17159 +            P_totalsal  =     149342.807017543;
17160 +            V_totalsal  =     150521.045454545;
17161 +            END;
17162 +          ELSE DO;
17163 +            _NODE_  =                   76;
17164 +            _LEAF_  =                   18;
17165 +            P_totalsal  =     131039.036144578;
17166 +            V_totalsal  =         128212.84375;
17167 +            END;
17168 +          END;
17169 +        ELSE DO;
17170 +          IF  NOT MISSING(statesal ) AND
17171 +                        101772.5 <= statesal  THEN DO;
17172 +            _NODE_  =                   75;
17173 +            _LEAF_  =                   17;
17174 +            P_totalsal  =     113273.963503649;
17175 +            V_totalsal  =     111954.901639344;
17176 +            END;
17177 +          ELSE DO;
17178 +            _NODE_  =                   74;
17179 +            _LEAF_  =                   16;
17180 +            P_totalsal  =     95764.0754716981;
17181 +            V_totalsal  =      95716.012987013;
17182 +            END;
17183 +          END;
17184 +        END;
17185 +      END;
17186 +    END;
17187 +  ELSE DO;
17188 +    IF  NOT MISSING(nonstsal ) AND
17189 +                     68358 <= nonstsal  THEN DO;
17190 +      IF  NOT MISSING(statesal ) AND
17191 +                       27171 <= statesal  THEN DO;
17192 +        IF  NOT MISSING(statesal ) AND
17193 +                       61462.5 <= statesal  THEN DO;
17194 +          _NODE_  =                   39;
17195 +          _LEAF_  =                   15;
17196 +          P_totalsal  =             158219.4;
17197 +          V_totalsal  =             156590.2;
17198 +          END;
17199 +        ELSE DO;
17200 +          IF  NOT MISSING(nonstsal ) AND
17201 +            nonstsal  <                88475 THEN DO;
17202 +            _NODE_  =                   70;
17203 +            _LEAF_  =                   13;
17204 +            P_totalsal  =     119892.210526315;
17205 +            V_totalsal  =     122956.166666666;
17206 +            END;
17207 +          ELSE DO;
17208 +            _NODE_  =                   71;
17209 +            _LEAF_  =                   14;
17210 +            P_totalsal  =     143362.045454545;
17211 +            V_totalsal  =             146798.3;
17212 +            END;
17213 +          END;
17214 +        END;
17215 +      ELSE DO;
17216 +        IF  NOT MISSING(nonstsal ) AND
17217 +                       89303.5 <= nonstsal  THEN DO;
17218 +          IF  NOT MISSING(nonstsal ) AND
17219 +                        102882.5 <= nonstsal  THEN DO;
17220 +            _NODE_  =                   69;
17221 +            _LEAF_  =                   12;
17222 +            P_totalsal  =          111508.4125;
17223 +            V_totalsal  =     113460.117647058;
17224 +            END;
17225 +          ELSE DO;
17226 +            _NODE_  =                   68;
17227 +            _LEAF_  =                   11;
17228 +            P_totalsal  =             96066.02;
17229 +            V_totalsal  =     96570.5555555555;
17230 +            END;
17231 +          END;
17232 +        ELSE DO;
17233 +          IF  NOT MISSING(nonstsal ) AND
17234 +                           79396 <= nonstsal  THEN DO;
17235 +            _NODE_  =                   67;
17236 +            _LEAF_  =                   10;
17237 +            P_totalsal  =     84476.4926108374;
17238 +            V_totalsal  =      84804.922077922;
17239 +            END;
17240 +          ELSE DO;
17241 +            _NODE_  =                   66;
17242 +            _LEAF_  =                    9;
17243 +            P_totalsal  =     74945.5723905724;
17244 +            V_totalsal  =     74261.4083333333;
17245 +            END;
17246 +          END;
17247 +        END;
17248 +      END;
17249 +    ELSE DO;
17250 +      IF  NOT MISSING(statesal ) AND
17251 +                     51742.5 <= statesal  THEN DO;
17252 +        IF  NOT MISSING(nonstsal ) AND
17253 +                       18694.5 <= nonstsal  THEN DO;
17254 +          IF  NOT MISSING(nonstsal ) AND
17255 +                           38297 <= nonstsal  THEN DO;
17256 +            _NODE_  =                   65;
17257 +            _LEAF_  =                    8;
17258 +            P_totalsal  =     116668.477272727;
17259 +            V_totalsal  =     123298.826086956;
17260 +            END;
17261 +          ELSE DO;
17262 +            _NODE_  =                   64;
17263 +            _LEAF_  =                    7;
17264 +            P_totalsal  =     96360.9090909091;
17265 +            V_totalsal  =     101708.111111111;
17266 +            END;
17267 +          END;
17268 +        ELSE DO;
17269 +          IF  NOT MISSING(statesal ) AND
17270 +            statesal  <              66247.5 THEN DO;
17271 +            _NODE_  =                   62;
17272 +            _LEAF_  =                    5;
17273 +            P_totalsal  =     60063.9938650306;
17274 +            V_totalsal  =      59998.981595092;
17275 +            END;
17276 +          ELSE DO;
17277 +            _NODE_  =                   63;
17278 +            _LEAF_  =                    6;
17279 +            P_totalsal  =            77416.455;
17280 +            V_totalsal  =     78184.9333333333;
17281 +            END;
17282 +          END;
17283 +        END;
17284 +      ELSE DO;
17285 +        IF  NOT MISSING(nonstsal ) AND
17286 +                       47236.5 <= nonstsal  THEN DO;
17287 +          IF  NOT MISSING(statesal ) AND
17288 +                         12307.5 <= statesal  THEN DO;
17289 +            _NODE_  =                   61;
17290 +            _LEAF_  =                    4;
17291 +            P_totalsal  =     85280.3333333333;
17292 +            V_totalsal  =     84780.2105263158;
17293 +            END;
17294 +          ELSE DO;
17295 +            _NODE_  =                   60;
17296 +            _LEAF_  =                    3;
17297 +            P_totalsal  =     56825.5541535226;
17298 +            V_totalsal  =     56393.1634146341;
17299 +            END;
17300 +          END;
17301 +        ELSE DO;
17302 +          IF  NOT MISSING(statesal ) AND
17303 +                         39899.5 <= statesal  THEN DO;
17304 +            _NODE_  =                   59;
17305 +            _LEAF_  =                    2;
17306 +            P_totalsal  =     48164.7592920354;
17307 +            V_totalsal  =     48515.8536585365;
17308 +            END;
17309 +          ELSE DO;
17310 +            _NODE_  =                   58;
17311 +            _LEAF_  =                    1;
17312 +            P_totalsal  =      36420.600973236;
17313 +            V_totalsal  =     36209.7162471395;
17314 +            END;
17315 +          END;
17316 +        END;
17317 +      END;
17318 +    END;
17319 +  END;
17320 +
17321 +*****  RESIDUALS R_ *************;
17322 +IF MISSING( totalsal ) THEN R_totalsal  = .;
17323 +ELSE R_totalsal  = totalsal  - P_totalsal ;
17324 +
17325 +****************************************************************;
17326 +******          END OF DECISION TREE SCORING CODE         ******;
17327 +****************************************************************;
17328 +
17329 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17330  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17331  quit;
17332  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17333  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17334  *------------------------------------------------------------*;
17335  * Tree: Scoring VALIDATE data;
17336  *------------------------------------------------------------*;
17337  data EMWS1.Tree_VALIDATE
17338  / view=EMWS1.Tree_VALIDATE
17339  ;
17340  set EMWS1.Part_VALIDATE
17341  ;
17342  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17343 +****************************************************************;
17344 +******             DECISION TREE SCORING CODE             ******;
17345 +****************************************************************;
17346 +
17347 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17348 +LENGTH _WARN_  $    4;
17349 +
17350 +******              LABELS FOR NEW VARIABLES              ******;
17351 +label _NODE_ = 'Node' ;
17352 +label _LEAF_ = 'Leaf' ;
17353 +label P_totalsal = 'Predicted: totalsal' ;
17354 +label V_totalsal = 'Validated: totalsal' ;
17355 +label R_totalsal = 'Residual: totalsal' ;
17356 +label _WARN_ = 'Warnings' ;
17357 +
17358 +
17359 +
17360 +******             ASSIGN OBSERVATION TO NODE             ******;
17361 +IF  NOT MISSING(nonstsal ) AND
17362 +                115051 <= nonstsal  THEN DO;
17363 +  IF  NOT MISSING(nonstsal ) AND
17364 +                257529.5 <= nonstsal  THEN DO;
17365 +    IF  NOT MISSING(nonstsal ) AND
17366 +                  372771.5 <= nonstsal  THEN DO;
17367 +      IF  NOT MISSING(nonstsal ) AND
17368 +                    512979.5 <= nonstsal  THEN DO;
17369 +        _NODE_  =                   31;
17370 +        _LEAF_  =                   44;
17371 +        P_totalsal  =            582917.75;
17372 +        V_totalsal  =     596384.333333333;
17373 +        END;
17374 +      ELSE DO;
17375 +        _NODE_  =                   30;
17376 +        _LEAF_  =                   43;
17377 +        P_totalsal  =     449206.769230769;
17378 +        V_totalsal  =            420689.75;
17379 +        END;
17380 +      END;
17381 +    ELSE DO;
17382 +      IF  NOT MISSING(nonstsal ) AND
17383 +                    315230.5 <= nonstsal  THEN DO;
17384 +        _NODE_  =                   29;
17385 +        _LEAF_  =                   42;
17386 +        P_totalsal  =            347255.75;
17387 +        V_totalsal  =               341249;
17388 +        END;
17389 +      ELSE DO;
17390 +        IF  NOT MISSING(statesal ) AND
17391 +                         70181 <= statesal  THEN DO;
17392 +          _NODE_  =                   55;
17393 +          _LEAF_  =                   41;
17394 +          P_totalsal  =     385892.666666666;
17395 +          V_totalsal  =               371409;
17396 +          END;
17397 +        ELSE DO;
17398 +          IF  NOT MISSING(nonstsal ) AND
17399 +                          285730 <= nonstsal  THEN DO;
17400 +            _NODE_  =                   91;
17401 +            _LEAF_  =                   40;
17402 +            P_totalsal  =     305890.966666666;
17403 +            V_totalsal  =     301179.555555555;
17404 +            END;
17405 +          ELSE DO;
17406 +            _NODE_  =                   90;
17407 +            _LEAF_  =                   39;
17408 +            P_totalsal  =     274289.210526315;
17409 +            V_totalsal  =     277074.631578947;
17410 +            END;
17411 +          END;
17412 +        END;
17413 +      END;
17414 +    END;
17415 +  ELSE DO;
17416 +    IF  NOT MISSING(nonstsal ) AND
17417 +                    180203 <= nonstsal  THEN DO;
17418 +      IF  NOT MISSING(statesal ) AND
17419 +                     51060.5 <= statesal  THEN DO;
17420 +        _NODE_  =                   27;
17421 +        _LEAF_  =                   38;
17422 +        P_totalsal  =     309176.928571428;
17423 +        V_totalsal  =     310101.888888888;
17424 +        END;
17425 +      ELSE DO;
17426 +        IF  NOT MISSING(nonstsal ) AND
17427 +                        223651 <= nonstsal  THEN DO;
17428 +          IF  NOT MISSING(nonstsal ) AND
17429 +                        241883.5 <= nonstsal  THEN DO;
17430 +            _NODE_  =                   89;
17431 +            _LEAF_  =                   37;
17432 +            P_totalsal  =     253022.555555555;
17433 +            V_totalsal  =           250817.875;
17434 +            END;
17435 +          ELSE DO;
17436 +            _NODE_  =                   88;
17437 +            _LEAF_  =                   36;
17438 +            P_totalsal  =            235625.56;
17439 +            V_totalsal  =            239422.15;
17440 +            END;
17441 +          END;
17442 +        ELSE DO;
17443 +          IF  NOT MISSING(statesal ) AND
17444 +                           27296 <= statesal  THEN DO;
17445 +            _NODE_  =                   87;
17446 +            _LEAF_  =                   35;
17447 +            P_totalsal  =             237379.8;
17448 +            V_totalsal  =               220000;
17449 +            END;
17450 +          ELSE DO;
17451 +            _NODE_  =                   86;
17452 +            _LEAF_  =                   34;
17453 +            P_totalsal  =     202236.918367347;
17454 +            V_totalsal  =             200073.6;
17455 +            END;
17456 +          END;
17457 +        END;
17458 +      END;
17459 +    ELSE DO;
17460 +      IF  NOT MISSING(statesal ) AND
17461 +                     69813.5 <= statesal  THEN DO;
17462 +        IF  NOT MISSING(statesal ) AND
17463 +                      118874.5 <= statesal  THEN DO;
17464 +          _NODE_  =                   51;
17465 +          _LEAF_  =                   33;
17466 +          P_totalsal  =            320843.75;
17467 +          V_totalsal  =             305409.5;
17468 +          END;
17469 +        ELSE DO;
17470 +          _NODE_  =                   50;
17471 +          _LEAF_  =                   32;
17472 +          P_totalsal  =      228098.23076923;
17473 +          V_totalsal  =     237538.666666666;
17474 +          END;
17475 +        END;
17476 +      ELSE DO;
17477 +        IF  NOT MISSING(nonstsal ) AND
17478 +          nonstsal  <             140119.5 THEN DO;
17479 +          IF  NOT MISSING(statesal ) AND
17480 +                           36550 <= statesal  THEN DO;
17481 +            _NODE_  =                   83;
17482 +            _LEAF_  =                   29;
17483 +            P_totalsal  =     184263.533333333;
17484 +            V_totalsal  =     171906.142857142;
17485 +            END;
17486 +          ELSE DO;
17487 +            _NODE_  =                   82;
17488 +            _LEAF_  =                   28;
17489 +            P_totalsal  =     130354.704347826;
17490 +            V_totalsal  =     133023.814814814;
17491 +            END;
17492 +          END;
17493 +        ELSE DO;
17494 +          IF  NOT MISSING(statesal ) AND
17495 +                         16167.5 <= statesal  THEN DO;
17496 +            _NODE_  =                   85;
17497 +            _LEAF_  =                   31;
17498 +            P_totalsal  =     187574.903225806;
17499 +            V_totalsal  =     189994.285714285;
17500 +            END;
17501 +          ELSE DO;
17502 +            _NODE_  =                   84;
17503 +            _LEAF_  =                   30;
17504 +            P_totalsal  =            161803.34;
17505 +            V_totalsal  =     161883.142857142;
17506 +            END;
17507 +          END;
17508 +        END;
17509 +      END;
17510 +    END;
17511 +  END;
17512 +ELSE DO;
17513 +  IF  NOT MISSING(statesal ) AND
17514 +                   87510 <= statesal  THEN DO;
17515 +    IF  NOT MISSING(statesal ) AND
17516 +                    157105 <= statesal  THEN DO;
17517 +      IF  NOT MISSING(statesal ) AND
17518 +                    217772.5 <= statesal  THEN DO;
17519 +        IF  NOT MISSING(statesal ) AND
17520 +                      300737.5 <= statesal  THEN DO;
17521 +          _NODE_  =                   47;
17522 +          _LEAF_  =                   27;
17523 +          P_totalsal  =            371259.25;
17524 +          V_totalsal  =     385116.666666666;
17525 +          END;
17526 +        ELSE DO;
17527 +          _NODE_  =                   46;
17528 +          _LEAF_  =                   26;
17529 +          P_totalsal  =     270754.181818181;
17530 +          V_totalsal  =     292902.833333333;
17531 +          END;
17532 +        END;
17533 +      ELSE DO;
17534 +        IF  NOT MISSING(nonstsal ) AND
17535 +                         53207 <= nonstsal  THEN DO;
17536 +          _NODE_  =                   45;
17537 +          _LEAF_  =                   25;
17538 +          P_totalsal  =               259173;
17539 +          V_totalsal  =     242883.142857142;
17540 +          END;
17541 +        ELSE DO;
17542 +          IF  NOT MISSING(statesal ) AND
17543 +                        193022.5 <= statesal  THEN DO;
17544 +            _NODE_  =                   81;
17545 +            _LEAF_  =                   24;
17546 +            P_totalsal  =            212712.05;
17547 +            V_totalsal  =     216177.153846153;
17548 +            END;
17549 +          ELSE DO;
17550 +            _NODE_  =                   80;
17551 +            _LEAF_  =                   23;
17552 +            P_totalsal  =     181393.888888888;
17553 +            V_totalsal  =             186975.5;
17554 +            END;
17555 +          END;
17556 +        END;
17557 +      END;
17558 +    ELSE DO;
17559 +      IF  NOT MISSING(nonstsal ) AND
17560 +                     23033.5 <= nonstsal  THEN DO;
17561 +        IF  NOT MISSING(nonstsal ) AND
17562 +                       75175.5 <= nonstsal  THEN DO;
17563 +          _NODE_  =                   43;
17564 +          _LEAF_  =                   22;
17565 +          P_totalsal  =     209111.866666666;
17566 +          V_totalsal  =     217810.166666666;
17567 +          END;
17568 +        ELSE DO;
17569 +          IF  NOT MISSING(statesal ) AND
17570 +                          115253 <= statesal  THEN DO;
17571 +            _NODE_  =                   79;
17572 +            _LEAF_  =                   21;
17573 +            P_totalsal  =     169171.775510204;
17574 +            V_totalsal  =     176223.142857142;
17575 +            END;
17576 +          ELSE DO;
17577 +            _NODE_  =                   78;
17578 +            _LEAF_  =                   20;
17579 +            P_totalsal  =     143113.525423728;
17580 +            V_totalsal  =     141255.652173913;
17581 +            END;
17582 +          END;
17583 +        END;
17584 +      ELSE DO;
17585 +        IF  NOT MISSING(statesal ) AND
17586 +                      117576.5 <= statesal  THEN DO;
17587 +          IF  NOT MISSING(statesal ) AND
17588 +                          136441 <= statesal  THEN DO;
17589 +            _NODE_  =                   77;
17590 +            _LEAF_  =                   19;
17591 +            P_totalsal  =     149342.807017543;
17592 +            V_totalsal  =     150521.045454545;
17593 +            END;
17594 +          ELSE DO;
17595 +            _NODE_  =                   76;
17596 +            _LEAF_  =                   18;
17597 +            P_totalsal  =     131039.036144578;
17598 +            V_totalsal  =         128212.84375;
17599 +            END;
17600 +          END;
17601 +        ELSE DO;
17602 +          IF  NOT MISSING(statesal ) AND
17603 +                        101772.5 <= statesal  THEN DO;
17604 +            _NODE_  =                   75;
17605 +            _LEAF_  =                   17;
17606 +            P_totalsal  =     113273.963503649;
17607 +            V_totalsal  =     111954.901639344;
17608 +            END;
17609 +          ELSE DO;
17610 +            _NODE_  =                   74;
17611 +            _LEAF_  =                   16;
17612 +            P_totalsal  =     95764.0754716981;
17613 +            V_totalsal  =      95716.012987013;
17614 +            END;
17615 +          END;
17616 +        END;
17617 +      END;
17618 +    END;
17619 +  ELSE DO;
17620 +    IF  NOT MISSING(nonstsal ) AND
17621 +                     68358 <= nonstsal  THEN DO;
17622 +      IF  NOT MISSING(statesal ) AND
17623 +                       27171 <= statesal  THEN DO;
17624 +        IF  NOT MISSING(statesal ) AND
17625 +                       61462.5 <= statesal  THEN DO;
17626 +          _NODE_  =                   39;
17627 +          _LEAF_  =                   15;
17628 +          P_totalsal  =             158219.4;
17629 +          V_totalsal  =             156590.2;
17630 +          END;
17631 +        ELSE DO;
17632 +          IF  NOT MISSING(nonstsal ) AND
17633 +            nonstsal  <                88475 THEN DO;
17634 +            _NODE_  =                   70;
17635 +            _LEAF_  =                   13;
17636 +            P_totalsal  =     119892.210526315;
17637 +            V_totalsal  =     122956.166666666;
17638 +            END;
17639 +          ELSE DO;
17640 +            _NODE_  =                   71;
17641 +            _LEAF_  =                   14;
17642 +            P_totalsal  =     143362.045454545;
17643 +            V_totalsal  =             146798.3;
17644 +            END;
17645 +          END;
17646 +        END;
17647 +      ELSE DO;
17648 +        IF  NOT MISSING(nonstsal ) AND
17649 +                       89303.5 <= nonstsal  THEN DO;
17650 +          IF  NOT MISSING(nonstsal ) AND
17651 +                        102882.5 <= nonstsal  THEN DO;
17652 +            _NODE_  =                   69;
17653 +            _LEAF_  =                   12;
17654 +            P_totalsal  =          111508.4125;
17655 +            V_totalsal  =     113460.117647058;
17656 +            END;
17657 +          ELSE DO;
17658 +            _NODE_  =                   68;
17659 +            _LEAF_  =                   11;
17660 +            P_totalsal  =             96066.02;
17661 +            V_totalsal  =     96570.5555555555;
17662 +            END;
17663 +          END;
17664 +        ELSE DO;
17665 +          IF  NOT MISSING(nonstsal ) AND
17666 +                           79396 <= nonstsal  THEN DO;
17667 +            _NODE_  =                   67;
17668 +            _LEAF_  =                   10;
17669 +            P_totalsal  =     84476.4926108374;
17670 +            V_totalsal  =      84804.922077922;
17671 +            END;
17672 +          ELSE DO;
17673 +            _NODE_  =                   66;
17674 +            _LEAF_  =                    9;
17675 +            P_totalsal  =     74945.5723905724;
17676 +            V_totalsal  =     74261.4083333333;
17677 +            END;
17678 +          END;
17679 +        END;
17680 +      END;
17681 +    ELSE DO;
17682 +      IF  NOT MISSING(statesal ) AND
17683 +                     51742.5 <= statesal  THEN DO;
17684 +        IF  NOT MISSING(nonstsal ) AND
17685 +                       18694.5 <= nonstsal  THEN DO;
17686 +          IF  NOT MISSING(nonstsal ) AND
17687 +                           38297 <= nonstsal  THEN DO;
17688 +            _NODE_  =                   65;
17689 +            _LEAF_  =                    8;
17690 +            P_totalsal  =     116668.477272727;
17691 +            V_totalsal  =     123298.826086956;
17692 +            END;
17693 +          ELSE DO;
17694 +            _NODE_  =                   64;
17695 +            _LEAF_  =                    7;
17696 +            P_totalsal  =     96360.9090909091;
17697 +            V_totalsal  =     101708.111111111;
17698 +            END;
17699 +          END;
17700 +        ELSE DO;
17701 +          IF  NOT MISSING(statesal ) AND
17702 +            statesal  <              66247.5 THEN DO;
17703 +            _NODE_  =                   62;
17704 +            _LEAF_  =                    5;
17705 +            P_totalsal  =     60063.9938650306;
17706 +            V_totalsal  =      59998.981595092;
17707 +            END;
17708 +          ELSE DO;
17709 +            _NODE_  =                   63;
17710 +            _LEAF_  =                    6;
17711 +            P_totalsal  =            77416.455;
17712 +            V_totalsal  =     78184.9333333333;
17713 +            END;
17714 +          END;
17715 +        END;
17716 +      ELSE DO;
17717 +        IF  NOT MISSING(nonstsal ) AND
17718 +                       47236.5 <= nonstsal  THEN DO;
17719 +          IF  NOT MISSING(statesal ) AND
17720 +                         12307.5 <= statesal  THEN DO;
17721 +            _NODE_  =                   61;
17722 +            _LEAF_  =                    4;
17723 +            P_totalsal  =     85280.3333333333;
17724 +            V_totalsal  =     84780.2105263158;
17725 +            END;
17726 +          ELSE DO;
17727 +            _NODE_  =                   60;
17728 +            _LEAF_  =                    3;
17729 +            P_totalsal  =     56825.5541535226;
17730 +            V_totalsal  =     56393.1634146341;
17731 +            END;
17732 +          END;
17733 +        ELSE DO;
17734 +          IF  NOT MISSING(statesal ) AND
17735 +                         39899.5 <= statesal  THEN DO;
17736 +            _NODE_  =                   59;
17737 +            _LEAF_  =                    2;
17738 +            P_totalsal  =     48164.7592920354;
17739 +            V_totalsal  =     48515.8536585365;
17740 +            END;
17741 +          ELSE DO;
17742 +            _NODE_  =                   58;
17743 +            _LEAF_  =                    1;
17744 +            P_totalsal  =      36420.600973236;
17745 +            V_totalsal  =     36209.7162471395;
17746 +            END;
17747 +          END;
17748 +        END;
17749 +      END;
17750 +    END;
17751 +  END;
17752 +
17753 +*****  RESIDUALS R_ *************;
17754 +IF MISSING( totalsal ) THEN R_totalsal  = .;
17755 +ELSE R_totalsal  = totalsal  - P_totalsal ;
17756 +
17757 +****************************************************************;
17758 +******          END OF DECISION TREE SCORING CODE         ******;
17759 +****************************************************************;
17760 +
17761 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17762  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17763  quit;
17764  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17765  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17766  *------------------------------------------------------------*;
17767  * Tree: Scoring TEST data;
17768  *------------------------------------------------------------*;
17769  data EMWS1.Tree_TEST
17770  / view=EMWS1.Tree_TEST
17771  ;
17772  set EMWS1.Part_TEST
17773  ;
17774  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17775 +****************************************************************;
17776 +******             DECISION TREE SCORING CODE             ******;
17777 +****************************************************************;
17778 +
17779 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17780 +LENGTH _WARN_  $    4;
17781 +
17782 +******              LABELS FOR NEW VARIABLES              ******;
17783 +label _NODE_ = 'Node' ;
17784 +label _LEAF_ = 'Leaf' ;
17785 +label P_totalsal = 'Predicted: totalsal' ;
17786 +label V_totalsal = 'Validated: totalsal' ;
17787 +label R_totalsal = 'Residual: totalsal' ;
17788 +label _WARN_ = 'Warnings' ;
17789 +
17790 +
17791 +
17792 +******             ASSIGN OBSERVATION TO NODE             ******;
17793 +IF  NOT MISSING(nonstsal ) AND
17794 +                115051 <= nonstsal  THEN DO;
17795 +  IF  NOT MISSING(nonstsal ) AND
17796 +                257529.5 <= nonstsal  THEN DO;
17797 +    IF  NOT MISSING(nonstsal ) AND
17798 +                  372771.5 <= nonstsal  THEN DO;
17799 +      IF  NOT MISSING(nonstsal ) AND
17800 +                    512979.5 <= nonstsal  THEN DO;
17801 +        _NODE_  =                   31;
17802 +        _LEAF_  =                   44;
17803 +        P_totalsal  =            582917.75;
17804 +        V_totalsal  =     596384.333333333;
17805 +        END;
17806 +      ELSE DO;
17807 +        _NODE_  =                   30;
17808 +        _LEAF_  =                   43;
17809 +        P_totalsal  =     449206.769230769;
17810 +        V_totalsal  =            420689.75;
17811 +        END;
17812 +      END;
17813 +    ELSE DO;
17814 +      IF  NOT MISSING(nonstsal ) AND
17815 +                    315230.5 <= nonstsal  THEN DO;
17816 +        _NODE_  =                   29;
17817 +        _LEAF_  =                   42;
17818 +        P_totalsal  =            347255.75;
17819 +        V_totalsal  =               341249;
17820 +        END;
17821 +      ELSE DO;
17822 +        IF  NOT MISSING(statesal ) AND
17823 +                         70181 <= statesal  THEN DO;
17824 +          _NODE_  =                   55;
17825 +          _LEAF_  =                   41;
17826 +          P_totalsal  =     385892.666666666;
17827 +          V_totalsal  =               371409;
17828 +          END;
17829 +        ELSE DO;
17830 +          IF  NOT MISSING(nonstsal ) AND
17831 +                          285730 <= nonstsal  THEN DO;
17832 +            _NODE_  =                   91;
17833 +            _LEAF_  =                   40;
17834 +            P_totalsal  =     305890.966666666;
17835 +            V_totalsal  =     301179.555555555;
17836 +            END;
17837 +          ELSE DO;
17838 +            _NODE_  =                   90;
17839 +            _LEAF_  =                   39;
17840 +            P_totalsal  =     274289.210526315;
17841 +            V_totalsal  =     277074.631578947;
17842 +            END;
17843 +          END;
17844 +        END;
17845 +      END;
17846 +    END;
17847 +  ELSE DO;
17848 +    IF  NOT MISSING(nonstsal ) AND
17849 +                    180203 <= nonstsal  THEN DO;
17850 +      IF  NOT MISSING(statesal ) AND
17851 +                     51060.5 <= statesal  THEN DO;
17852 +        _NODE_  =                   27;
17853 +        _LEAF_  =                   38;
17854 +        P_totalsal  =     309176.928571428;
17855 +        V_totalsal  =     310101.888888888;
17856 +        END;
17857 +      ELSE DO;
17858 +        IF  NOT MISSING(nonstsal ) AND
17859 +                        223651 <= nonstsal  THEN DO;
17860 +          IF  NOT MISSING(nonstsal ) AND
17861 +                        241883.5 <= nonstsal  THEN DO;
17862 +            _NODE_  =                   89;
17863 +            _LEAF_  =                   37;
17864 +            P_totalsal  =     253022.555555555;
17865 +            V_totalsal  =           250817.875;
17866 +            END;
17867 +          ELSE DO;
17868 +            _NODE_  =                   88;
17869 +            _LEAF_  =                   36;
17870 +            P_totalsal  =            235625.56;
17871 +            V_totalsal  =            239422.15;
17872 +            END;
17873 +          END;
17874 +        ELSE DO;
17875 +          IF  NOT MISSING(statesal ) AND
17876 +                           27296 <= statesal  THEN DO;
17877 +            _NODE_  =                   87;
17878 +            _LEAF_  =                   35;
17879 +            P_totalsal  =             237379.8;
17880 +            V_totalsal  =               220000;
17881 +            END;
17882 +          ELSE DO;
17883 +            _NODE_  =                   86;
17884 +            _LEAF_  =                   34;
17885 +            P_totalsal  =     202236.918367347;
17886 +            V_totalsal  =             200073.6;
17887 +            END;
17888 +          END;
17889 +        END;
17890 +      END;
17891 +    ELSE DO;
17892 +      IF  NOT MISSING(statesal ) AND
17893 +                     69813.5 <= statesal  THEN DO;
17894 +        IF  NOT MISSING(statesal ) AND
17895 +                      118874.5 <= statesal  THEN DO;
17896 +          _NODE_  =                   51;
17897 +          _LEAF_  =                   33;
17898 +          P_totalsal  =            320843.75;
17899 +          V_totalsal  =             305409.5;
17900 +          END;
17901 +        ELSE DO;
17902 +          _NODE_  =                   50;
17903 +          _LEAF_  =                   32;
17904 +          P_totalsal  =      228098.23076923;
17905 +          V_totalsal  =     237538.666666666;
17906 +          END;
17907 +        END;
17908 +      ELSE DO;
17909 +        IF  NOT MISSING(nonstsal ) AND
17910 +          nonstsal  <             140119.5 THEN DO;
17911 +          IF  NOT MISSING(statesal ) AND
17912 +                           36550 <= statesal  THEN DO;
17913 +            _NODE_  =                   83;
17914 +            _LEAF_  =                   29;
17915 +            P_totalsal  =     184263.533333333;
17916 +            V_totalsal  =     171906.142857142;
17917 +            END;
17918 +          ELSE DO;
17919 +            _NODE_  =                   82;
17920 +            _LEAF_  =                   28;
17921 +            P_totalsal  =     130354.704347826;
17922 +            V_totalsal  =     133023.814814814;
17923 +            END;
17924 +          END;
17925 +        ELSE DO;
17926 +          IF  NOT MISSING(statesal ) AND
17927 +                         16167.5 <= statesal  THEN DO;
17928 +            _NODE_  =                   85;
17929 +            _LEAF_  =                   31;
17930 +            P_totalsal  =     187574.903225806;
17931 +            V_totalsal  =     189994.285714285;
17932 +            END;
17933 +          ELSE DO;
17934 +            _NODE_  =                   84;
17935 +            _LEAF_  =                   30;
17936 +            P_totalsal  =            161803.34;
17937 +            V_totalsal  =     161883.142857142;
17938 +            END;
17939 +          END;
17940 +        END;
17941 +      END;
17942 +    END;
17943 +  END;
17944 +ELSE DO;
17945 +  IF  NOT MISSING(statesal ) AND
17946 +                   87510 <= statesal  THEN DO;
17947 +    IF  NOT MISSING(statesal ) AND
17948 +                    157105 <= statesal  THEN DO;
17949 +      IF  NOT MISSING(statesal ) AND
17950 +                    217772.5 <= statesal  THEN DO;
17951 +        IF  NOT MISSING(statesal ) AND
17952 +                      300737.5 <= statesal  THEN DO;
17953 +          _NODE_  =                   47;
17954 +          _LEAF_  =                   27;
17955 +          P_totalsal  =            371259.25;
17956 +          V_totalsal  =     385116.666666666;
17957 +          END;
17958 +        ELSE DO;
17959 +          _NODE_  =                   46;
17960 +          _LEAF_  =                   26;
17961 +          P_totalsal  =     270754.181818181;
17962 +          V_totalsal  =     292902.833333333;
17963 +          END;
17964 +        END;
17965 +      ELSE DO;
17966 +        IF  NOT MISSING(nonstsal ) AND
17967 +                         53207 <= nonstsal  THEN DO;
17968 +          _NODE_  =                   45;
17969 +          _LEAF_  =                   25;
17970 +          P_totalsal  =               259173;
17971 +          V_totalsal  =     242883.142857142;
17972 +          END;
17973 +        ELSE DO;
17974 +          IF  NOT MISSING(statesal ) AND
17975 +                        193022.5 <= statesal  THEN DO;
17976 +            _NODE_  =                   81;
17977 +            _LEAF_  =                   24;
17978 +            P_totalsal  =            212712.05;
17979 +            V_totalsal  =     216177.153846153;
17980 +            END;
17981 +          ELSE DO;
17982 +            _NODE_  =                   80;
17983 +            _LEAF_  =                   23;
17984 +            P_totalsal  =     181393.888888888;
17985 +            V_totalsal  =             186975.5;
17986 +            END;
17987 +          END;
17988 +        END;
17989 +      END;
17990 +    ELSE DO;
17991 +      IF  NOT MISSING(nonstsal ) AND
17992 +                     23033.5 <= nonstsal  THEN DO;
17993 +        IF  NOT MISSING(nonstsal ) AND
17994 +                       75175.5 <= nonstsal  THEN DO;
17995 +          _NODE_  =                   43;
17996 +          _LEAF_  =                   22;
17997 +          P_totalsal  =     209111.866666666;
17998 +          V_totalsal  =     217810.166666666;
17999 +          END;
18000 +        ELSE DO;
18001 +          IF  NOT MISSING(statesal ) AND
18002 +                          115253 <= statesal  THEN DO;
18003 +            _NODE_  =                   79;
18004 +            _LEAF_  =                   21;
18005 +            P_totalsal  =     169171.775510204;
18006 +            V_totalsal  =     176223.142857142;
18007 +            END;
18008 +          ELSE DO;
18009 +            _NODE_  =                   78;
18010 +            _LEAF_  =                   20;
18011 +            P_totalsal  =     143113.525423728;
18012 +            V_totalsal  =     141255.652173913;
18013 +            END;
18014 +          END;
18015 +        END;
18016 +      ELSE DO;
18017 +        IF  NOT MISSING(statesal ) AND
18018 +                      117576.5 <= statesal  THEN DO;
18019 +          IF  NOT MISSING(statesal ) AND
18020 +                          136441 <= statesal  THEN DO;
18021 +            _NODE_  =                   77;
18022 +            _LEAF_  =                   19;
18023 +            P_totalsal  =     149342.807017543;
18024 +            V_totalsal  =     150521.045454545;
18025 +            END;
18026 +          ELSE DO;
18027 +            _NODE_  =                   76;
18028 +            _LEAF_  =                   18;
18029 +            P_totalsal  =     131039.036144578;
18030 +            V_totalsal  =         128212.84375;
18031 +            END;
18032 +          END;
18033 +        ELSE DO;
18034 +          IF  NOT MISSING(statesal ) AND
18035 +                        101772.5 <= statesal  THEN DO;
18036 +            _NODE_  =                   75;
18037 +            _LEAF_  =                   17;
18038 +            P_totalsal  =     113273.963503649;
18039 +            V_totalsal  =     111954.901639344;
18040 +            END;
18041 +          ELSE DO;
18042 +            _NODE_  =                   74;
18043 +            _LEAF_  =                   16;
18044 +            P_totalsal  =     95764.0754716981;
18045 +            V_totalsal  =      95716.012987013;
18046 +            END;
18047 +          END;
18048 +        END;
18049 +      END;
18050 +    END;
18051 +  ELSE DO;
18052 +    IF  NOT MISSING(nonstsal ) AND
18053 +                     68358 <= nonstsal  THEN DO;
18054 +      IF  NOT MISSING(statesal ) AND
18055 +                       27171 <= statesal  THEN DO;
18056 +        IF  NOT MISSING(statesal ) AND
18057 +                       61462.5 <= statesal  THEN DO;
18058 +          _NODE_  =                   39;
18059 +          _LEAF_  =                   15;
18060 +          P_totalsal  =             158219.4;
18061 +          V_totalsal  =             156590.2;
18062 +          END;
18063 +        ELSE DO;
18064 +          IF  NOT MISSING(nonstsal ) AND
18065 +            nonstsal  <                88475 THEN DO;
18066 +            _NODE_  =                   70;
18067 +            _LEAF_  =                   13;
18068 +            P_totalsal  =     119892.210526315;
18069 +            V_totalsal  =     122956.166666666;
18070 +            END;
18071 +          ELSE DO;
18072 +            _NODE_  =                   71;
18073 +            _LEAF_  =                   14;
18074 +            P_totalsal  =     143362.045454545;
18075 +            V_totalsal  =             146798.3;
18076 +            END;
18077 +          END;
18078 +        END;
18079 +      ELSE DO;
18080 +        IF  NOT MISSING(nonstsal ) AND
18081 +                       89303.5 <= nonstsal  THEN DO;
18082 +          IF  NOT MISSING(nonstsal ) AND
18083 +                        102882.5 <= nonstsal  THEN DO;
18084 +            _NODE_  =                   69;
18085 +            _LEAF_  =                   12;
18086 +            P_totalsal  =          111508.4125;
18087 +            V_totalsal  =     113460.117647058;
18088 +            END;
18089 +          ELSE DO;
18090 +            _NODE_  =                   68;
18091 +            _LEAF_  =                   11;
18092 +            P_totalsal  =             96066.02;
18093 +            V_totalsal  =     96570.5555555555;
18094 +            END;
18095 +          END;
18096 +        ELSE DO;
18097 +          IF  NOT MISSING(nonstsal ) AND
18098 +                           79396 <= nonstsal  THEN DO;
18099 +            _NODE_  =                   67;
18100 +            _LEAF_  =                   10;
18101 +            P_totalsal  =     84476.4926108374;
18102 +            V_totalsal  =      84804.922077922;
18103 +            END;
18104 +          ELSE DO;
18105 +            _NODE_  =                   66;
18106 +            _LEAF_  =                    9;
18107 +            P_totalsal  =     74945.5723905724;
18108 +            V_totalsal  =     74261.4083333333;
18109 +            END;
18110 +          END;
18111 +        END;
18112 +      END;
18113 +    ELSE DO;
18114 +      IF  NOT MISSING(statesal ) AND
18115 +                     51742.5 <= statesal  THEN DO;
18116 +        IF  NOT MISSING(nonstsal ) AND
18117 +                       18694.5 <= nonstsal  THEN DO;
18118 +          IF  NOT MISSING(nonstsal ) AND
18119 +                           38297 <= nonstsal  THEN DO;
18120 +            _NODE_  =                   65;
18121 +            _LEAF_  =                    8;
18122 +            P_totalsal  =     116668.477272727;
18123 +            V_totalsal  =     123298.826086956;
18124 +            END;
18125 +          ELSE DO;
18126 +            _NODE_  =                   64;
18127 +            _LEAF_  =                    7;
18128 +            P_totalsal  =     96360.9090909091;
18129 +            V_totalsal  =     101708.111111111;
18130 +            END;
18131 +          END;
18132 +        ELSE DO;
18133 +          IF  NOT MISSING(statesal ) AND
18134 +            statesal  <              66247.5 THEN DO;
18135 +            _NODE_  =                   62;
18136 +            _LEAF_  =                    5;
18137 +            P_totalsal  =     60063.9938650306;
18138 +            V_totalsal  =      59998.981595092;
18139 +            END;
18140 +          ELSE DO;
18141 +            _NODE_  =                   63;
18142 +            _LEAF_  =                    6;
18143 +            P_totalsal  =            77416.455;
18144 +            V_totalsal  =     78184.9333333333;
18145 +            END;
18146 +          END;
18147 +        END;
18148 +      ELSE DO;
18149 +        IF  NOT MISSING(nonstsal ) AND
18150 +                       47236.5 <= nonstsal  THEN DO;
18151 +          IF  NOT MISSING(statesal ) AND
18152 +                         12307.5 <= statesal  THEN DO;
18153 +            _NODE_  =                   61;
18154 +            _LEAF_  =                    4;
18155 +            P_totalsal  =     85280.3333333333;
18156 +            V_totalsal  =     84780.2105263158;
18157 +            END;
18158 +          ELSE DO;
18159 +            _NODE_  =                   60;
18160 +            _LEAF_  =                    3;
18161 +            P_totalsal  =     56825.5541535226;
18162 +            V_totalsal  =     56393.1634146341;
18163 +            END;
18164 +          END;
18165 +        ELSE DO;
18166 +          IF  NOT MISSING(statesal ) AND
18167 +                         39899.5 <= statesal  THEN DO;
18168 +            _NODE_  =                   59;
18169 +            _LEAF_  =                    2;
18170 +            P_totalsal  =     48164.7592920354;
18171 +            V_totalsal  =     48515.8536585365;
18172 +            END;
18173 +          ELSE DO;
18174 +            _NODE_  =                   58;
18175 +            _LEAF_  =                    1;
18176 +            P_totalsal  =      36420.600973236;
18177 +            V_totalsal  =     36209.7162471395;
18178 +            END;
18179 +          END;
18180 +        END;
18181 +      END;
18182 +    END;
18183 +  END;
18184 +
18185 +*****  RESIDUALS R_ *************;
18186 +IF MISSING( totalsal ) THEN R_totalsal  = .;
18187 +ELSE R_totalsal  = totalsal  - P_totalsal ;
18188 +
18189 +****************************************************************;
18190 +******          END OF DECISION TREE SCORING CODE         ******;
18191 +****************************************************************;
18192 +
18193 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18194  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18195  quit;
18196  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
18198  proc sort data=WORK.EM_USER_REPORT;
18199  by ID VIEW;
18200  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18201  *------------------------------------------------------------*;
18202  * Tree: Computing metadata for TRAIN data;
18203  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
18598  data WORK.MODELTEMP_INFO;
18599  set EMWS1.Tree_EMINFO;
18600  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18601  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
 
 
18602  data EMWS1.Tree_EMINFO;
18603  length TARGET KEY $32 DATA $43;
18604  input TARGET KEY DATA $;
18605  cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
18609  run;
18610  data EMWS1.Tree_EMINFO;
18611  set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
18612  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18613  proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
18614  by TARGET KEY;
18615  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18616  proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18617  by TARGET KEY;
18618  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18619  proc sort data = EMWS1.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18620  by TARGET KEY;
18621  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18622  data EMWS1.Tree_EMINFO;
18623  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18624  by TARGET KEY;
18625  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
18626  proc datasets lib=work nolist;
18627  delete TEMP_INFO SORTEDEMINFO;
18628  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18629  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.TREE_TEST.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 21, 2016
Time:                05:42:39
*------------------------------------------------------------*
18653  data EMWS1.Tree_EMOUTFIT;
18654  set EMWS1.Tree_EMOUTFIT;
18655  length TargetLabel $200;
18656  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18657  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18658  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
18659  by TARGET;
18660  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18661  %let _EMwarndup = 0;
18662  %let _EMtargetdup =;
18663  %let _EMASEtargetdup =;
18664  data _null_;
18665  set EMWS1.Tree_EMOUTFIT;
18666  if .<_ASE_<0.000001 then do;
18667  call symput('_EMwarndup', '1');
18668  call symput('_EMtargetdup', target);
18669  call symput('_EMASEtargetdup', put(_ASE_, best.));
18670  end;
18671  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18672  %let EMEXCEPTIONSTRING=;
18673  *------------------------------------------------------------*;
18674  * REPORT: Tree;
18675  *------------------------------------------------------------*;
18676  %let EM_ACTION = REPORT;
18677  %let syscc = 0;
18678  %macro main;
18679
18680    %if %upcase(&EM_ACTION) = CREATE %then %do;
18681      filename temp catalog 'sashelp.emmodl.tree_create.source';
18682      %include temp;
18683      filename temp;
18684
18685      %em_tree_create;
18686    %end;
18687
18688     %else
18689     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18690
18691         filename temp catalog 'sashelp.emmodl.tree_train.source';
18692         %include temp;
18693         filename temp;
18694         %em_tree_train;
18695     %end;
18696
18697    %else
18698    %if %upcase(&EM_ACTION) = SCORE %then %do;
18699      filename temp catalog 'sashelp.emmodl.tree_score.source';
18700      %include temp;
18701      filename temp;
18702
18703      %em_tree_score;
18704
18705    %end;
18706
18707    %else
18708    %if %upcase(&EM_ACTION) = REPORT %then %do;
18709
18710         filename temp catalog 'sashelp.emmodl.tree_report.source';
18711         %include temp;
18712         filename temp;
18713
18714         %em_tree_report;
18715     %end;
18716
18717    %else
18718    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18719
18720         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18721         %include temp;
18722         filename temp;
18723         %EM_TREE_OPENTREEVIEWER;
18724
18725     %end;
18726
18727    %else
18728    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18729
18730         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18731         %include temp;
18732         filename temp;
18733         %EM_TREE_CLOSETREEVIEWER;
18734
18735     %end;
18736
18737
18738     %doendm:
18739  %mend main;
18740
18741  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18743 +%macro em_tree_makePlotDs( multipleTar= );
18745 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18746 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18747 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18748 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18750 +  /* determine if validation statistics will be displayed */
18751 +  %let validflag=N;
18752 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18753 +    /* determine if validation data exists */
18754 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18755 +      %let validflag=Y;
18756 +    %end;
18757 +  %end;
18759 +   /* retrieve name of decmeta even in presence of multiple targets */
18760 +   %let decmeta = ;
18761 +   %if &EM_DEC_DECMETA eq %then %do;
18762 +     data _Target;
18763 +       set &em_data_variableset;
18764 +       where ROLE='TARGET' and USE in('D', 'Y');
18765 +       keep NAME;
18766 +     run;
18767 +     proc sort data=_Target;
18768 +       by NAME;
18769 +     run;
18770 +     proc sort data=EM_TARGETDECINFO;
18771 +       by TARGET;
18772 +     run;
18773 +     data _Target;
18774 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18775 +       by NAME;
18776 +       if _a then do;
18777 +         call symput('decmeta', trim(DECMETA));
18778 +       end;
18779 +     run;
18780 +     proc delete data=_Target;run;
18781 +   %end;
18782 +   %else %let decmeta = &EM_DEC_DECMETA;
18785 +  /* retrieve targetEvent from decmeta */
18786 +  %let targetEvent=;
18787 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18788 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18789 +      data _null_;
18790 +       set &DECMETA(where=(_TYPE_="TARGET"));
18791 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18792 +      run;
18793 +    %end;
18794 +  %end;
18796 +  /* retrieve predicted var for targetEvent from decmeta */
18797 +  %let predTarget=;
18798 +  %let predLvl=;
18799 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18800 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18801 +      data _null_;
18802 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18803 +       call symput('predTarget', strip(VARIABLE));
18804 +       call symput('predLvl', strip(LEVEL));
18805 +      run;
18806 +    %end;
18807 +  %end;
18808 +  %else %do;
18809 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18810 +      data _null_;
18811 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18812 +       call symput('predTarget', strip(VARIABLE));
18813 +      run;
18814 +    %end;
18815 +  %end;
18817 +  /* create BelowText value */
18818 +  data belowtext;
18819 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18820 +    keep node belowtext;
18821 +  run;
18823 +  /* relace belowtext with variable label if it exists */
18824 +  data belowtext2;
18825 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18826 +    keep node belowtextlbl;
18827 +  run;
18829 +  proc sort data=belowtext; by node; run;
18830 +  proc sort data=belowtext2; by node; run;
18832 +  data belowtext;
18833 +    merge belowtext belowtext2(in=_a);
18834 +    by node;
18835 +    if _a then belowtext=belowtextlbl;
18836 +    keep node belowtext;
18837 +  run;
18839 +  /* create AboveText value */
18840 +  data abovetext;
18841 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18842 +  run;
18843 +  proc sort data=abovetext; by node numeric_value; run;
18845 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18846 +  data abovetext;
18847 +    set abovetext(rename=(node=parent));
18848 +    by parent numeric_value;
18849 +    retain abovetext tempstring flag branch origval origchar ;
18850 +    length abovetext $256;
18851 +    length tempstring origchar $64;
18853 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18854 +      if first.parent then do;
18855 +        if missing(character_value) then do;
18856 +          numeric_value = round(numeric_value, &sp_precision);
18857 +          abovetext = "< "||strip(NUMERIC_VALUE);
18858 +          branch = 1;
18859 +          origval = numeric_value;
18860 +          output;
18861 +        end;
18862 +        else do;
18863 +          abovetext = "< "||strip(CHARACTER_VALUE);
18864 +          branch = 1;
18865 +          origchar = character_value;
18866 +          output;
18867 +        end;
18869 +        if first.parent AND last.parent then do;
18870 +          if missing(character_value) then do;
18871 +            numeric_value = round(numeric_value, &sp_precision);
18872 +            branch = branch + 1;
18873 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18874 +            output;
18875 +          end;
18876 +          else do;
18877 +            branch = branch + 1;
18878 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18879 +            output;
18880 +          end;
18881 +        end;
18882 +      end;
18883 +      else if last.parent then do;
18884 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18885 +          if missing(character_value) then do;
18886 +            numeric_value = round(numeric_value, &sp_precision);
18887 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18888 +          end;
18889 +          else do;
18890 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18891 +          end;
18892 +          branch = branch + 1;
18893 +          output;
18895 +          if missing(character_value) then do;
18896 +            numeric_value = round(numeric_value, &sp_precision);
18897 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18898 +          end;
18899 +          else do;
18900 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18901 +          end;
18902 +          branch = branch + 1;
18903 +          output;
18904 +        end;
18905 +        else do;
18906 +          if missing(character_value) then do;
18907 +            numeric_value = round(numeric_value, &sp_precision);
18908 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18909 +          end;
18910 +          else do;
18911 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18912 +          end;
18913 +          branch = branch + 1;
18914 +          output;
18915 +        end;
18916 +      end;
18917 +      else do;
18918 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18919 +          if missing(character_value) then do;
18920 +            numeric_value = round(numeric_value,&sp_precision);
18921 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18922 +            origval = numeric_value;
18923 +          end;
18924 +          else do;
18925 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18926 +            origchar = character_value;
18927 +          end;
18928 +          branch = branch + 1;
18929 +          output;
18931 +        end;
18932 +        else do;
18933 +          if missing(character_value) then do;
18934 +            numeric_value = round(numeric_value, &sp_precision);
18935 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18936 +            origval = numeric_value;
18937 +          end;
18938 +          else do;
18939 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18940 +            origval = character_value;
18941 +          end;
18942 +          branch = branch + 1;
18943 +          output;
18944 +        end;
18945 +      end;
18946 +    end;
18947 +    else do;
18948 +       if first.numeric_value then do;
18949 +         flag = 0;
18950 +         abovetext = strip(CHARACTER_VALUE);
18951 +         branch = numeric_value;
18952 +         if first.numeric_value AND last.numeric_value then do;
18953 +           output;
18954 +         end;
18955 +       end;
18956 +       else if last.numeric_value then do;
18957 +         if flag=0 then do;
18958 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18959 +           length = length(strip(tempstring));
18960 +           if length < 32 then do;
18961 +             abovetext = strip(tempstring);
18962 +           end;
18963 +           else do;
18964 +             abovetext = strip(abovetext)||", ...";
18965 +             flag = 1;
18966 +           end;
18967 +         end;
18968 +         branch = numeric_value;
18969 +         output;
18970 +       end;
18971 +       else do;
18972 +         if flag=0 then do;
18973 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18974 +           length = length(strip(tempstring));
18975 +           if length < 32 then do;
18976 +             abovetext = strip(tempstring);
18977 +           end;
18978 +           else do;
18979 +             abovetext = strip(abovetext)||", ...";
18980 +             flag=1;
18981 +           end;
18982 +         end;
18983 +         branch = numeric_value;
18984 +       end;
18985 +    end;
18986 +    keep parent branch abovetext;
18987 +  run;
18989 +  /* MIssing value to abovetext */
18990 +  data tempmissing;
18991 +    set &EM_USER_OUTRULES;
18992 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18993 +    rename node=parent numeric_value=branch character_value=misschar;
18994 +  run;
18997 +  proc sort data=abovetext; by parent branch; run;
18998 +  proc sort data=tempmissing; by parent branch; run;
18999 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19001 +  data tempoutnodes;
19002 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19003 +    by parent branch;
19004 +    length traintotal validtotal 8;
19005 +    retain traintotal validtotal;
19007 +    if _a then do;
19008 +      if ^MISSING(abovetext) then do;
19009 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19010 +      end;
19011 +      else do;
19012 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19013 +      end;
19014 +    end;
19015 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19017 +    if node=1 then do;
19018 +      traintotal = N;
19019 +      validtotal=VN;
19020 +    end;
19022 +    drop role rank stat misschar belowtext;
19023 +  run;
19024 +  proc sort data=tempoutnodes; by node; run;
19025 +  proc sort data=belowtext; by node; run;
19027 +  data tempoutnodes;
19028 +    merge tempoutnodes belowtext;
19029 +    by node;
19031 +  run;
19033 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19034 +  %let adjusted = N;
19035 +  %let npriors = 0;
19036 +  data _null_ ;
19037 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19038 +    if eof then do ;
19039 +      call symput("npriors" , strip(put(_N_,best.))) ;
19040 +    end;
19041 +  run;
19042 +  %if &npriors gt 0 %then %let adjusted=Y;
19045 +  /* create a table with targetUsed and targetLevel columns for each node */
19046 +  data temptarmeta;
19047 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19048 +    %if &multipleTar eq N %then %do;
19049 +      AND USE in ('D', 'Y')
19050 +    %end;
19051 +    ));
19052 +    length TARGET $32;
19053 +    Target=name;
19054 +    keep target level;
19055 +  run;
19057 +  %if &multipleTar eq Y %then %do;
19058 +    data temptargetused;
19059 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19060 +      keep node target;
19061 +    run;
19062 +    proc sort data=temptargetused; by target; run;
19063 +    proc sort data=temptarmeta; by target; run;
19064 +    data temptargetused;
19065 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19066 +      by target;
19067 +      if _a and _b;
19068 +    run;
19069 +  %end;
19070 +  %else %do;
19071 +    data temptargetused;
19072 +      set &EM_USER_OUTSTATS;
19073 +      length target $32 tarlevel $10;
19074 +      target="%EM_TARGET";
19075 +      tarlevel="%EM_TARGET_LEVEL";
19076 +      keep node target tarlevel;
19077 +    run;
19078 +    proc sort data=temptargetused nodupkey; by node; run;
19079 +  %end;
19081 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
19082 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19083 +  proc sort data=temptargetused; by node; run;
19086 +  /* create tables for all interval targets as well as all class targets */
19087 +  data tempinterval tempclass;
19088 +    merge tempoutstats temptargetused( rename=(target=targetused));
19089 +    by node;
19090 +    %if "&multipleTar" eq "Y" %then %do;
19091 +      if ((missing(Target)) OR (target=targetused ));
19092 +    %end;
19094 +    if tarlevel="INTERVAL" then output tempinterval;
19095 +    else output tempclass;
19096 +  run;
19098 +  /* iniitalize intTarget and classTarget flags */
19099 +  %let em_intNobs =0;
19100 +  %let em_classNobs = 0;
19101 +  %let em_intTarget= N;
19102 +  %let em_classTarget= N;
19104 +  proc sql;
19105 +    reset noprint;
19106 +    select count(*) into :em_intNobs from tempinterval;
19107 +  quit;
19108 +  proc sql;
19109 +    reset noprint;
19110 +    select count(*) into :em_classNobs from tempclass;
19111 +  quit;
19113 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19114 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19116 +  /* retrieve all information for interval targets */
19117 +  %if &em_intTarget eq Y %then %do;
19119 +    /* determine if leaf variable exists */
19120 +    %let dsid=%sysfunc(open(tempinterval,i));
19121 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19122 +    %let rc=%sysfunc(close(&dsid));
19124 +    proc transpose data=tempinterval
19125 +      %if &leafexists %then %do;
19126 +        (drop=leaf)
19127 +      %end;
19128 +      %if &validexist %then %do;
19129 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19130 +      %end;
19131 +      %else %do;
19132 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19133 +      %end;
19134 +      by node;
19135 +      id statname;
19136 +    run;
19137 +    data tempinterval;
19138 +      set tempinterval;
19139 +      if missing(N) then delete;
19140 +    run;
19141 +  %end;
19143 +  /* retrieve all information for class targets */
19144 +  %if &em_classTarget eq Y %then %do;
19145 +    proc sort data=tempclass; by node category; run;
19146 +    %if &validflag eq N %then %do;
19147 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19148 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19149 +    %end;
19150 +    %else %do;
19151 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19152 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19153 +    %end;
19154 +      set tempclass;
19156 +      %if &validflag eq N %then %do;
19157 +        %if "&adjusted" eq "N" %then %do;
19158 +          if statname="N" then output tempn;
19159 +        %end;
19160 +        %else %do;
19161 +          if statname="NPRIORS" then output tempn;
19162 +        %end;
19163 +        else if statname="PREDICTION" then output temppredict;
19164 +        else if statname="PROBABILITY" then output tempprob;
19165 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19166 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19167 +      %end;
19168 +      %else %do;
19169 +        %if "&adjusted" eq "N" %then %do;
19170 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19171 +        %end;
19172 +        %else %do;
19173 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19174 +        %end;
19175 +        else if statname="PREDICTION" then output temppredict;
19176 +        else if statname="PROBABILITY" then output tempprob;
19177 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19178 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19179 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19180 +      %end;
19181 +    run;
19184 +    /* determine if profit/loss exists in tempprofit */
19185 +    %let em_profitflag=0;
19186 +    %let em_lossflag=0;
19187 +    proc sql;
19188 +      reset noprint;
19189 +      select count(*) into :em_profitflag from tempprofit;
19190 +    quit;
19191 +    proc sql;
19192 +      reset noprint;
19193 +      select count(*) into :em_lossflag from temploss;
19194 +    quit;
19196 +    %if &validFlag eq Y %then %do;
19197 +      proc transpose data=tempn
19198 +        %if "&adjusted" eq "N" %then %do;
19199 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19200 +        %end;
19201 +        %else %do;
19202 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19203 +        %end;
19204 +        by node;
19205 +        id statname;
19206 +      run;
19207 +      %if &em_profitflag ne 0 %then %do;
19208 +        proc transpose data=tempprofit out=tempprofit;
19209 +          by node category;
19210 +          id statname ;
19211 +        run;
19212 +      %end;
19213 +      %if &em_lossflag ne 0 %then %do;
19214 +        proc transpose data=temploss out=temploss;
19215 +          by node category;
19216 +          id statname ;
19217 +        run;
19218 +      %end;
19219 +      data tempprob;
19220 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19221 +        by node
19222 +        %if &multipleTar eq Y %then %do;
19223 +          target
19224 +        %end;
19225 +        category;
19226 +      run;
19227 +    %end;
19229 +    /* store percentcorrect value */
19230 +    data temppredict;
19231 +      merge tempprob temppredict(in=_a);
19232 +      by node category;
19233 +      if _a then do;
19234 +        percentCorrect = statvalue;
19235 +        %if &validFlag eq Y %then %do;
19236 +          vpercentCorrect= vstatvalue;
19237 +        %end;
19238 +      end;
19239 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19240 +      %if &validFlag eq Y %then %do;
19241 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19242 +      %end;
19243 +      ;
19244 +      if missing(percentCorrect) then delete;
19245 +      drop target;
19246 +    run;
19248 +    /* build profittext */
19249 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19250 +      data tempprofittext(keep= node profittext profitloss);
19251 +        length profittext $800 profitloss 8.;
19252 +        retain profittext profitloss;
19254 +        merge tempprob
19255 +        %if &em_profitflag ne 0 %then %do;
19256 +          tempprofit
19257 +        %end;
19258 +        %else %if &em_lossflag ne 0 %then %do;
19259 +          temploss
19260 +        %end;
19261 +        ;
19262 +        by node category;
19264 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19265 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19266 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19267 +          %let profittype = ALL;
19268 +        %end;
19270 +        /* create the profitloss variable for nodecolor if selected */
19271 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19273 +        %if "&profittype" eq "ALL" %then %do;
19274 +          if strip(CATEGORY)="&targetEvent" then do;
19275 +            profitloss=statvalue;
19276 +          end;
19277 +          if first.node then do;
19278 +            %if &validFlag eq N %then %do;
19279 +             %if &em_profitflag ne 0 %then %do;
19280 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19281 +             %end;
19282 +             %if &em_lossflag ne 0 %then %do;
19283 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19284 +             %end;
19285 +            %end;
19286 +            %else %do;
19287 +             %if &em_profitflag ne 0 %then %do;
19288 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19288!+;
19289 +             %end;
19290 +             %if &em_lossflag ne 0 %then %do;
19291 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19292 +             %end;
19293 +            %end;
19294 +          end;
19295 +          else if last.node then do;
19296 +            %if &validFlag eq N %then %do;
19297 +             %if &em_profitflag ne 0 %then %do;
19298 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19299 +             %end;
19300 +             %if &em_lossflag ne 0 %then %do;
19301 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19302 +             %end;
19303 +             /*if CATEGORY="&targetEvent" then do;
19304 +               profitloss=statvalue;
19305 +             end;*/
19306 +            %end;
19307 +            %else %do;
19308 +             %if &em_profitflag ne 0 %then %do;
19309 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19309!+14.&EM_PROPERTY_SPLITPRECISION);
19310 +                if CATEGORY="&targetEvent" then do;
19311 +                 profitloss=ALTERNATIVE_PROFIT;
19312 +                end;
19313 +             %end;
19314 +             %if &em_lossflag ne 0 %then %do;
19315 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19315!+14.&EM_PROPERTY_SPLITPRECISION);
19316 +                if CATEGORY="&targetEvent" then do;
19317 +                  profitloss=ALTERNATIVE_LOSS;
19318 +                end;
19319 +             %end;
19320 +            %end;
19321 +            output;
19322 +          end;
19323 +          else do;
19324 +            %if &validFlag eq N %then %do;
19325 +             %if &em_profitflag ne 0 %then %do;
19326 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19327 +             %end;
19328 +             %if &em_lossflag ne 0 %then %do;
19329 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19330 +             %end;
19331 +            %end;
19332 +            %else %do;
19333 +             %if &em_profitflag ne 0 %then %do;
19334 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19334!+14.&EM_PROPERTY_SPLITPRECISION);
19335 +             %end;
19336 +             %if &em_lossflag ne 0 %then %do;
19337 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19337!+14.&EM_PROPERTY_SPLITPRECISION);
19338 +             %end;
19339 +            %end;
19340 +          end;
19341 +        %end;
19342 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19343 +          if strip(CATEGORY) = "&targetevent" then do;
19344 +            %if &validFlag eq N %then %do;
19345 +             %if &em_profitflag ne 0 %then %do;
19346 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19347 +             %end;
19348 +             %if &em_lossflag ne 0 %then %do;
19349 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19350 +             %end;
19351 +             profitloss=statvalue;
19352 +            %end;
19353 +            %else %do;
19354 +             %if &em_profitflag ne 0 %then %do;
19355 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19355!+;
19356 +                profitloss=ALTERNATIVE_PROFIT;
19357 +             %end;
19358 +             %if &em_lossflag ne 0 %then %do;
19359 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19360 +                profitloss=ALTERNATIVE_LOSS;
19361 +             %end;
19362 +            %end;
19363 +            output;
19364 +          end;
19365 +        %end;
19366 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19367 +          if strip(CATEGORY) = "&targetevent" then do;
19368 +            %if &validFlag eq N %then %do;
19369 +             profitloss=statvalue;
19370 +            %end;
19371 +            %else %do;
19372 +             %if &em_profitflag ne 0 %then %do;
19373 +                profitloss=ALTERNATIVE_PROFIT;
19374 +             %end;
19375 +             %if &em_lossflag ne 0 %then %do;
19376 +                profitloss=ALTERNATIVE_LOSS;
19377 +             %end;
19378 +            %end;
19379 +            output;
19380 +          end;
19381 +        %end;
19382 +      run;
19383 +    %end;
19385 +    data tempprob(keep= node probtext);
19386 +      length probtext $800;
19387 +      retain probtext;
19388 +      set tempprob ;
19389 +      by node;
19391 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19392 +      %let probtype = &EM_PROPERTY_TARGET;
19393 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19394 +        %let probtype = ALL;
19395 +      %end;
19397 +      %if "&probtype" eq "ALL" %then %do;
19398 +        if first.node then do;
19399 +          %if &validFlag eq N %then %do;
19400 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19401 +          %end;
19402 +          %else %do;
19403 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19404 +          %end;
19405 +        end;
19406 +        else if last.node then do;
19407 +          %if &validFlag eq N %then %do;
19408 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19409 +          %end;
19410 +          %else %do;
19411 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19412 +          %end;
19413 +          output;
19414 +        end;
19415 +        else do;
19416 +          %if &validFlag eq N %then %do;
19417 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19418 +          %end;
19419 +          %else %do;
19420 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19421 +          %end;
19422 +        end;
19423 +      %end;
19424 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19425 +        if strip(CATEGORY) = "&targetevent" then do;
19426 +          %if &validFlag eq N %then %do;
19427 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19428 +          %end;
19429 +          %else %do;
19430 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19431 +          %end;
19432 +          output;
19433 +        end;
19434 +      %end;
19435 +      %else %if "&probtype" eq "NONE" %then %do;
19436 +        if last.node then do;
19437 +          output;
19438 +        end;
19439 +      %end;
19440 +    run;
19441 +  %end;
19443 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19445 +  %let oldexists=0;
19446 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19447 +     data old_tree_plot;
19448 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19449 +        rename nodecolor=oldnodecolor;
19450 +     run;
19452 +     proc sort data=old_tree_plot;
19453 +        by node;
19454 +     run;
19456 +     %let oldexists=1;
19457 +  %end;
19459 +  data &EM_USER_TREE_PLOT;
19460 +    length textall $800;
19461 +    merge tempoutnodes temptargetused
19463 +    %if &em_intTarget eq Y %then %do;
19464 +      tempinterval
19465 +    %end;
19467 +    %if &em_classTarget eq Y %then %do;
19469 +      %if &validFlag eq N %then %do;
19470 +        tempn(rename=(statvalue=N))
19471 +      %end;
19472 +      %else %do;
19473 +        tempn
19474 +      %end;
19476 +      temppredict tempprob
19478 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19479 +        tempprofittext
19480 +      %end;
19481 +    %end;
19482 +    ;
19483 +    by node;
19485 +    /* build nodetext based on user selection */
19486 +    textall="";
19488 +    %if &em_intTarget eq Y %then %do;
19489 +    if tarlevel="INTERVAL" then do;
19490 +      /* Nodeid */
19491 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19492 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19493 +      %end;
19495 +      /* Target identifier if multiple targets are used */
19496 +      %if "&multipleTar" eq "Y" %then %do;
19497 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19498 +      %end;
19500 +      %if &validFlag eq Y %then %do;
19501 +         /* Column labels displayed in validflag eq Y only */
19502 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19503 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19503!+noquote ))";
19504 +         %end;
19506 +         /* Average values */
19507 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19508 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19509 +         %end;
19511 +         /* RASE */
19512 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19513 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19514 +         %end;
19516 +         /* Count */
19517 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19518 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19519 +         %end;
19520 +      %end;
19521 +      %else %do;
19522 +         /* Average values */
19523 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19524 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19525 +         %end;
19527 +         /* RASE */
19528 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19529 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19530 +         %end;
19532 +         /* Count */
19533 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19534 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19535 +         %end;
19536 +      %end;
19538 +      /* nodecolor */
19539 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19540 +        nodecolor=PREDICTION;
19541 +      %end;
19542 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19543 +        nodecolor=RASE;
19544 +      %end;
19545 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19546 +        nodecolor=1;
19547 +      %end;
19549 +    end;
19550 +    %end;
19551 +    %if &em_classTarget eq Y %then %do;
19552 +    if tarlevel^="INTERVAL" then  do;
19554 +      /* Nodeid */
19555 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19556 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19557 +      %end;
19558 +      /* Target identifier if multiple targets are used */
19559 +      %if "&multipleTar" eq "Y" %then %do;
19560 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19561 +      %end;
19563 +      /* Predicted values */
19564 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19565 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19566 +      %end;
19568 +      /* Column labels displayed in validflag eq Y only */
19569 +      %if "&ValidFlag" eq "Y" %then %do;
19570 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19571 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19571!+noquote ))";
19572 +        %end;
19573 +      %end;
19575 +      /* Target Values */
19576 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19577 +        textall=strip(textall)||"0A"x||strip(probtext);
19578 +      %end;
19580 +      /* include profit or loss for all target levels */
19581 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19582 +        textall=strip(textall)||"0A"x||strip(profittext);
19583 +      %end;
19585 +      %if &validFlag eq N %then %do;
19586 +        /* Percent Correct */
19587 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19588 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19589 +        %end;
19591 +         /* Count */
19592 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19593 +          %if "&adjusted" eq "N" %then %do;
19594 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19595 +          %end;
19596 +          %else %do;
19597 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19598 +          %end;
19599 +         %end;
19600 +      %end;
19601 +      %else %do;
19602 +        /* Percent Correct */
19603 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19604 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19605 +        %end;
19607 +         /* Count */
19608 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19609 +          %if "&adjusted" eq "N" %then %do;
19610 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19611 +          %end;
19612 +          %else %do;
19613 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19614 +          %end;
19615 +         %end;
19616 +      %end;
19618 +      /* nodecolor */
19619 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19620 +       %if &multipleTar ne Y %then %do;
19621 +        nodecolor=&predTarget;
19622 +       %end;
19623 +       %else %do;
19624 +         nodecolor=percentcorrect;
19625 +       %end;
19626 +      %end;
19627 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19628 +        nodecolor=percentcorrect;
19629 +      %end;
19630 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19631 +        nodecolor=1;
19632 +      %end;
19633 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19634 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19635 +          nodecolor=percentcorrect;
19636 +        %end;
19637 +        %else %do;
19638 +          nodecolor=profitloss;
19639 +        %end;
19640 +      %end;
19642 +    end;
19643 +    %end;
19644 +    %if &em_intTarget eq Y %then %do;
19645 +     drop  PREDICTION  TARGET TARLEVEL
19646 +     %if &ValidFlag eq Y %then %do;
19647 +         VPREDICTION
19648 +     %end;
19649 +     ;
19650 +    %end;
19651 +    %if &em_classTarget eq Y %then %do;
19652 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19653 +     %if &ValidFlag eq Y %then %do;
19654 +         VSTATVALUE
19655 +     %end;
19656 +     ;
19657 +    %end;
19659 +  run;
19661 +  /* add leaf index information to plotds - based on primary target only*/
19662 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19663 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19664 +      set &EM_USER_OUTSTATS;
19665 +      if ((statname="PROBABILITY"
19666 +      %if &validexist %then %do;
19667 +       or statname="VALID: PROBABILITY"
19668 +      %end;
19669 +      ) AND (CATEGORY="&TARGETEVENT")
19670 +      %if "&multipleTar" eq "Y" %then %do;
19671 +        AND (Target="%EM_TARGET")
19672 +      %end;
19673 +      );
19674 +    run;
19676 +    %if &validexist %then %do;
19677 +      proc sort data=tempprob; by node; run;
19678 +      %let vpredTarget = V%substr(&predTarget, 2);
19679 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19680 +         by node;
19681 +         id statname;
19682 +      run;
19683 +    %end;
19684 +  %end;
19685 +  %else %do;
19686 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19687 +      set &EM_USER_OUTSTATS;
19688 +      if ((statname="PREDICTION"
19689 +      %if &validexist %then %do;
19690 +       or statname="VALID: PREDICTION"
19691 +      %end;
19692 +      )
19693 +      %if "&multipleTar" eq "Y" %then %do;
19694 +        AND (Target="%EM_TARGET")
19695 +      %end;
19696 +      );
19697 +    run;
19698 +    %if &validexist %then %do;
19699 +      proc sort data=tempprob; by node; run;
19700 +      %let vpredTarget = V%substr(&predTarget, 2);
19701 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19702 +         by node;
19703 +         id statname;
19704 +      run;
19705 +    %end;
19706 +  %end;
19708 +  proc sort data=tempprob; by node; run;
19709 +  data tempoutnodes;
19710 +    merge tempoutnodes tempprob;
19711 +    by node;
19712 +  run;
19714 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19715 +  data tempnodes;
19716 +    retain traintotal validtotal;
19717 +    set tempnodes(where=(leaf ne . ));
19718 +    tprob=round(&predTarget, .01);
19719 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19720 +      percevent_train=round(tprob*100, .01);
19721 +    %end;
19722 +    %else %do;
19723 +      percevent_train=tprob;
19724 +    %end;
19726 +    perc_train=round((n/traintotal)*100, 0.01);
19727 +    /* leafwidth already has a *10 multiplier */
19728 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19730 +    %if &validexist %then %do;
19731 +      %let vpredTarget = V%substr(&predTarget,2);
19732 +      vprob=round(&vpredTarget, .01);
19733 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19734 +        percevent_valid=round(vprob*100, .01);
19735 +      %end;
19736 +      %else %do;
19737 +        percevent_valid=vprob;
19738 +      %end;
19739 +      perc_valid=round((vn/validtotal)*100, .01);
19740 +    %end;
19742 +    index=_N_;
19743 +    keep node index tprob perc_train percevent_train
19744 +    %if &validexist %then %do;
19745 +        vprob percevent_valid perc_valid
19746 +    %end;
19747 +    ;
19748 +  run;
19749 +  proc sort data=tempnodes; by node; run;
19750 +  data &EM_USER_TREE_PLOT;
19751 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19752 +    by node;
19753 +    if missing(node) then delete;
19754 +    %if &oldexists %then %do;
19755 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19756 +      drop oldnodecolor;
19757 +    %end;
19758 +    abovetext = compbl(abovetext);
19760 +    /* add variable labels */
19761 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19762 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19763 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19764 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19765 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19766 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19768 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19769 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19770 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19771 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19772 +          %end;
19773 +          %else %do;
19774 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19775 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19776 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19777 +          %end;
19778 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19780 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19781 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19782 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19783 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19784 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19785 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19786 +          %end;
19787 +          %else %do;
19788 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19789 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19790 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19791 +          %end;
19792 +    ;
19793 +  run;
19795 +  /* delete temporary tables */
19796 +  proc datasets lib=work nolist;
19797 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19798 +  run;
19800 +%mend em_tree_makePlotDs;
19804 +%macro em_tree_report;
19806 +   /* report properties */
19807 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19808 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19809 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19810 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19811 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19812 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19813 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19814 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19815 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19816 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19817 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19818 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19819 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19821 +   %let validexist=0;
19822 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19823 +     %let validexist=1;
19824 +   %end;
19826 +   /* determine if multiple targets will be processed */
19827 +   %let em_tree_multipleTargets=N;
19828 +   %let em_tree_numTarget=1;
19829 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19830 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19831 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19832 +         %let em_tree_multipleTargets=N;
19833 +      %end;
19834 +      %else %do;
19835 +        data _null_;
19836 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19837 +          if eof then
19838 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19839 +        run;
19841 +        %if &em_tree_numTarget gt 1 %then %do;
19842 +           %let em_tree_multipleTargets=Y;
19843 +        %end;
19844 +     %end;
19845 +   %end;
19847 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19849 +   /* variable importance */
19850 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19851 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19853 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19854 +     /* and the columns may not be generated                                                                                 */
19855 +     %let em_tree_cvexists=;
19856 +     %let em_tree_surrexists=.;
19857 +     data _null_;
19858 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19859 +       if eof then do ;
19860 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19861 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19862 +       end;
19863 +     run;
19865 +     data &EM_USER_OUTIMPORT;
19866 +         set &EM_USER_OUTIMPORT;
19867 +         /* format columns based on Precison value specified */
19868 +         format importance 15.&EM_PROPERTY_PRECISION
19869 +              %if &validexist %then %do;
19870 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19871 +              %end;
19872 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19873 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19874 +              %end;
19875 +         ;
19876 +     run;
19878 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19879 +     proc print data=&EM_USER_OUTIMPORT
19880 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19881 +          (where=((nrules>0) OR (nsurrogates>0)))
19882 +        %end;
19883 +        %else %do;
19884 +           (where=(nrules>0))
19885 +        %end;
19886 +        label noobs
19887 +        ;
19888 +     run;
19889 +     title10;
19891 +   %end;
19893 +   /* Sequence */
19894 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19895 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19896 +   data _null_ ;
19897 +      set &EM_USER_outseq (obs=2) end=eof ;
19898 +      if eof then do ;
19899 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19900 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19901 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19902 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19903 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19904 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19905 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19906 +      end;
19907 +    run;
19909 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19910 +      data &EM_USER_OUTSEQ;
19911 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19912 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19913 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19914 +           _XMISC_=_VMISC_
19915 +        %end;
19916 +        %if "&em_tree_aprof" ne "."  %then %do;
19917 +           _XAPROF_=_VAPROF_
19918 +           _XPROF_ = _VPROF_
19919 +        %end;
19920 +        %if "&em_tree_aloss" ne "."  %then %do;
19921 +           _XALOSS_=_VALOSS_
19922 +        %end;
19923 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19924 +           _XPASE_ = _VPASE_
19925 +           _XPMISC_ = _VPMISC_
19926 +        %end;
19928 +        ));
19929 +     %end;
19930 +     %else %do;
19931 +        set &EM_USER_OUTSEQ;
19932 +     %end;
19934 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19935 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19936 +            _MISC_   15.&EM_PROPERTY_PRECISION
19937 +         %end;
19938 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19939 +            _PASE_  15.&EM_PROPERTY_PRECISION
19940 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19941 +         %end;
19942 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19943 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19944 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19945 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19946 +            %end;
19947 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19948 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19949 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19950 +            %end;
19951 +         %end;
19952 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19953 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19954 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19955 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19956 +            %end;
19957 +         %end;
19958 +         %if "&em_tree_seq" ne "." %then %do;
19959 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19960 +         %end;
19961 +         %if "&em_tree_vseq" ne "." %then %do;
19962 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19963 +         %end;
19964 +         %if "&em_tree_aprof" ne "." %then %do;
19965 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19966 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19967 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19968 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19969 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19970 +           %end;
19971 +         %end;
19972 +         %else %if "&em_tree_aloss" ne "." %then %do;
19973 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19974 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19975 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19976 +           %end;
19977 +         %end;
19978 +      ;
19979 +    run;
19980 +   %end;
19982 +   /* Observation Based Importance */
19983 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19985 +      /* need to check for 0 obs */
19986 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19987 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19988 +      %let rc=%sysfunc(close(&dsid));
19990 +      %if &onobs %then %do;
19991 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19992 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19994 +         data &EM_USER_OUTOBSIMP;
19995 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19996 +           if _a;
19997 +           by _INPUT1_;
19998 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19999 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20000 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20001 +                   %end;
20002 +                   ;
20003 +         run;
20004 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20005 +      %end;
20006 +   %end;
20008 +  %end;
20010 +  /* create dataset to support tree diagram and icicle plot */
20011 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20012 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20014 +  /* display tree diagram */
20015 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20016 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20018 +  /* display icicle diagram */
20019 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20020 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20022 +  /* Leaf Statistics Plot */
20023 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20025 +  /* print leaf information to output window */
20026 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20028 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20029 +       by descending N;
20030 +     run;
20032 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20033 +     %local vn;
20034 +     data _null_;
20035 +       set t (obs=2) end=eof;
20036 +       if eof then do;
20037 +         call symput("vn", strip(put(vn, best.)));
20038 +       end;
20039 +     run;
20041 +     data t;
20042 +       set t;
20043 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20044 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20045 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20046 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20047 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20048 +       %end;
20049 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20050 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20051 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20052 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20053 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20054 +          %end;
20055 +       %end;
20056 +       ;
20057 +     run;
20059 +     /* determine if rase is found in t */
20060 +    %let dsid=%sysfunc(open(t,i));
20061 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20062 +    %let rc=%sysfunc(close(&dsid));
20064 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20065 +     proc print data=t noobs label;
20066 +       where tprob ne .;
20067 +       var node depth N tprob
20068 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20069 +         %if "&vn" ne "." %then %do;
20070 +           VN
20071 +         %end;
20072 +         vprob
20073 +       %end;
20074 +       %if &raseexists %then %do;
20075 +            RASE
20076 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20077 +              VRASE
20078 +            %end;
20079 +       %end;
20080 +       ;
20081 +     run;
20082 +     title10;
20083 +  %end;
20085 +  /* create plots that are done during training of node */
20086 +  /* display iterative plot, including reference line */
20087 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20088 +   /* %if &nleaves eq  %then %do; */
20089 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20090 +      data _null_;
20091 +        set &EM_USER_OUTTOPOLOGY end=eof;
20092 +        if eof then do;
20093 +          call symput('nleaves', LEAF);
20094 +        end;
20095 +      run;
20096 +   /* %end; */
20098 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20099 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20100 +  %end;
20102 +  /* display leaf statistics */
20103 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20105 +  /* stats by node if multiple targets = Y */
20106 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20107 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20108 +    data &EM_USER_OUTSTATS;
20109 +      set &EM_USER_OUTSTATS;
20111 +     * if STATNAME="TARGET" then delete;
20112 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20113 +      drop leaf;
20114 +    run;
20115 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20117 +  %end;
20118 +  %else %do;
20119 +    /* add outstats and outdescribe to spk but not results */
20120 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20121 +  %end;
20123 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 46 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 43 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 43 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 43 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 43 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 43 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 43 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      155:103   204:136   247:102   247:125   279:104   313:104   355:103   355:126   398:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      414:99
NOTE: There were 43 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 86 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1871 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 43 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 86 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 86 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 43 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 87 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 86 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 43 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 87 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 87 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 43 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.59 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 43 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 87 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 522 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 522 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 522 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 435 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 87 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 522 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 522 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 522 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 87 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 522 observations and 6 variables.
NOTE: The data set WORK.TEMPCLASS has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 522 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 87 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 87 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 87 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      942:196   958:204   958:221
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 87 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 87 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 87 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 522 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 174 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 174 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 174 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 174 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 87 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 87 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 87 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 87 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 87 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 44 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 44 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 87 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 44 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 87 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 87 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 87 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 87 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      316:141
NOTE: There were 87 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
20124
20125  *------------------------------------------------------------*;
20126  * End REPORT: Tree;
20127  *------------------------------------------------------------*;
 
20128  /* Reset EM Options */
20129  options formchar="|----|+|---+=|-/\<>*";
20130  options nocenter ls=256 ps=10000;
20131  goptions reset=all device=GIF NODISPLAY;
 
20132  proc sort data=WORK.EM_USER_REPORT;
20133  by ID VIEW;
20134  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
20135  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20136  by NAME;
20137  run;
 
NOTE: There were 16 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 16 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20138  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20139  by NAME;
20140  run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 16 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
20141  data WORK.ASSESS_META;
20142  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20143  by NAME;
20144  run;
 
NOTE: There were 16 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 16 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 16 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20145  data EM_temp_assessMeta;
20146  set EMWS1.Tree_CMeta_TRAIN;
20147  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20148  run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20149  data EM_temp_assessdata;
20150  set EMWS1.Tree_TRAIN(keep=
20151  P_totalsal
20152  R_totalsal
20153  V_totalsal
20154  _WARN_
20155  totalsal
20156  );
20157  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 6616 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 6616 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
24488   data EM_temp_assessMeta;
24489   set EMWS1.Tree_CMeta_TRAIN;
24490   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24491   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24492   data EM_temp_assessdata;
24493   set EMWS1.Tree_VALIDATE(keep=
24494   P_totalsal
24495   R_totalsal
24496   V_totalsal
24497   _WARN_
24498   totalsal
24499   );
24500   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2835 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 2835 observations read from the data set EMWS1.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2835 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
28841   %let _cn = %sysfunc(getoption(CENTER));
28842   options nocenter;
28843   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
28844   var STAT LABEL TRAIN
28845   VALIDATE
28846   TEST
28847   ;
28848   by TARGET TARGETLABEL;
28849   title9 ' ';
28850   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28851   run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28852   title10;
28853   options &_cn;
 
28854   proc datasets library=EMWS1 nolist;
28855   modify Tree_EMRANK;
28856   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28857   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28858   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
28859   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28860   %let _cn = %sysfunc(getoption(CENTER));
28861   options nocenter;
28862   proc print data=EMWS1.Tree_EMRANK label noobs;
28863   var
28864   decile N _targetMean_ _meanP_;
28865   by
28866   notsorted DATAROLE
28867   notsorted TARGET
28868   notsorted TARGETLABEL
28869   ;
28870   title9 ' ';
28871   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28872   run;
 
NOTE: There were 23 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28873   title10;
28874   options &_cn;
 
28875   proc datasets library=EMWS1 nolist;
28876   modify Tree_EMSCOREDIST;
28877   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28878   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28879   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
28880   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
