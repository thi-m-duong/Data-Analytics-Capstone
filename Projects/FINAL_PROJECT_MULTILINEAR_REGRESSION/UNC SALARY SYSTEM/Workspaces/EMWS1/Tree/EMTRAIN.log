*------------------------------------------------------------*
* Training Log
Date:                April 21, 2016
Time:                05:42:22
*------------------------------------------------------------*
14715  proc freq data=EMWS1.Tree_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.TreeMETA;
14717  run;

NOTE: There were 16 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

14718  proc print data=WORK.TreeMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;

NOTE: There were 8 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14724  title10;

14725  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "totalsal"." 
14726  proc print data = EMWS1.Ids_totalsal_DM noobs label;
14727  var _type_ variable label;
14728  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14729  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14730  title9 ' ';
14731  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14732  run;

NOTE: There were 3 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14733  title10;

14734  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15252  *------------------------------------------------------------*;
15253  * Tree: Generation of macros and macro variables;
15254  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15255  *------------------------------------------------------------*;

15256  %let EMEXCEPTIONSTRING=;
15257  *------------------------------------------------------------*;
15258  * TRAIN: Tree;
15259  *------------------------------------------------------------*;
15260  %let EM_ACTION = TRAIN;
15261  %let syscc = 0;
15262  %macro main;
15263  
15264    %if %upcase(&EM_ACTION) = CREATE %then %do;
15265      filename temp catalog 'sashelp.emmodl.tree_create.source';
15266      %include temp;
15267      filename temp;
15268  
15269      %em_tree_create;
15270    %end;
15271  
15272     %else
15273     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15274  
15275         filename temp catalog 'sashelp.emmodl.tree_train.source';
15276         %include temp;
15277         filename temp;
15278         %em_tree_train;
15279     %end;
15280  
15281    %else
15282    %if %upcase(&EM_ACTION) = SCORE %then %do;
15283      filename temp catalog 'sashelp.emmodl.tree_score.source';
15284      %include temp;
15285      filename temp;
15286  
15287      %em_tree_score;
15288  
15289    %end;
15290  
15291    %else
15292    %if %upcase(&EM_ACTION) = REPORT %then %do;
15293  
15294         filename temp catalog 'sashelp.emmodl.tree_report.source';
15295         %include temp;
15296         filename temp;
15297  
15298         %em_tree_report;
15299     %end;
15300  
15301    %else
15302    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15303  
15304         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15305         %include temp;
15306         filename temp;
15307         %EM_TREE_OPENTREEVIEWER;
15308  
15309     %end;
15310  
15311    %else
15312    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15313  
15314         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15315         %include temp;
15316         filename temp;
15317         %EM_TREE_CLOSETREEVIEWER;
15318  
15319     %end;
15320  
15321  
15322     %doendm:
15323  %mend main;
15324  
15325  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15327 +%macro em_tree_train;
15329 +   %if &EM_IMPORT_DATA eq %then %do;
15330 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15331 +       %put &em_codebar;
15332 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15333 +       %put &errormsg;
15334 +       %put &em_codebar;
15335 +       %goto doendm;
15336 +   %end;
15337 +   %else
15338 +       %let EMEXCEPTIONSTRING =;
15340 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15341 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15342 +        %put &em_codebar;
15343 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15344 +        %put &errormsg;
15345 +        %put &em_codebar;
15346 +        %goto doendm;
15347 +   %end;
15349 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15350 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15351 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15352 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15353 +        %put &em_codebar;
15354 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15355 +        %put &errormsg;
15356 +        %put &em_codebar;
15357 +        %goto doendm;
15358 +   %end;
15360 +   /* Initialize property macro variables */
15361 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15362 +   %include temp;
15363 +   filename temp;
15365 +   %EM_SetProperties;
15367 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15368 +   %EM_GETNAME(key=EMTREE, type=DATA);
15369 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15370 +     /* if import eq Y and no importtable defined, throw an exception */
15371 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15372 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15373 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15374 +         %put &em_codebar;
15375 +         %put &errmsg;
15376 +         %put &em_codebar;
15377 +         %goto doendm;
15378 +      %end;
15379 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15380 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15381 +         %put &em_codebar;
15382 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15383 +         %put &errormsg;
15384 +         %put &em_codebar;
15385 +         %goto doendm;
15386 +      %end;
15387 +      %else %do;
15388 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15389 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15390 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15391 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15392 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15393 +         %let dsid = %sysfunc(close(&dsid));
15394 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15395 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15396 +            %put &em_codebar;
15397 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15398 +            %put &errormsg;
15399 +            %put &em_codebar;
15400 +            %goto doendm;
15401 +         %end;
15402 +      %end;
15403 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15404 +         proc delete data=&EM_USER_EMTREE;
15405 +         run;
15406 +      %end;
15407 +   %end;
15408 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15409 +      proc delete data=&EM_USER_EMTREE;
15410 +      run;
15411 +   %end;
15413 +   /* load tree macros */
15414 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15415 +   %include temp;
15416 +   filename temp;
15418 +   /* data sets */
15419 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15420 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15421 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15423 +   /* files */
15424 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15426 +   /* check actual num of target levels */
15427 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15428 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15429 +                              nLevel=_nTargetLevel );
15430 +      %if &_nTargetLevel  > 2 %then %do;
15431 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15432 +        %put &em_codebar;
15433 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15434 +        %put &errormsg;
15435 +        %put &em_codebar;
15436 +        %goto doendm;
15437 +      %end;
15438 +   %end;
15440 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15441 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15442 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15443 +        %let costflag=0;
15444 +        data _null_;
15445 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15446 +          if eof then call symput("costflag", _N_);
15447 +        run;
15448 +        %if &costflag gt 0 %then %do;
15449 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15450 +          %put &em_codebar;
15451 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15452 +          %put &errormsg;
15453 +          %put &em_codebar;
15454 +          %goto doendm;
15455 +       %end;
15456 +     %end;
15457 +   %end;
15459 +   /* determine if multiple targets will be processed */
15460 +   %let em_tree_multipleTargets=N;
15461 +   %let em_tree_numTarget = 1;
15462 +   %let em_tree_targetVars=;
15464 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15465 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15466 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15467 +         %let em_tree_multipleTargets=N;
15468 +      %end;
15469 +      %else %do;
15470 +         /* create macro array of targets  */
15471 +         data _null_;
15472 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15473 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15474 +           if eof then
15475 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15476 +        run;
15478 +        %if &em_tree_numTarget gt 1 %then %do;
15479 +           %let em_tree_multipleTargets=Y;
15480 +        %end;
15481 +      %end;
15482 +   %end;
15484 +   /* create view of only necessary variable for performance reasons */
15485 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15486 +   data &tempData / view=&tempData;
15487 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15488 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15489 +       %EM_TARGET
15490 +     %end;
15491 +     %else %do;
15492 +       %if &em_tree_numTarget ne 0 %then %do;
15493 +         %do i=1 %to &em_tree_numTarget;
15494 +            &&em_tree_targetVars&i
15495 +         %end;
15496 +       %end;
15497 +     %end;
15498 +     );
15499 +   run;
15501 +   /* run Tree procedure */
15502 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15504 +   /* Check return code and throw exception if error is detected */
15505 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15506 +   %if &syserr %then %do;
15507 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15508 +     %goto doendm;
15509 +   %end;
15511 +   /* add decision score code if multiple targets are processed */
15512 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15513 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15514 +   %end;
15516 +   /* create outfit dataset if multiple score statements have been executed */
15517 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15519 +   /* create English Rules */
15520 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15521 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15522 +       %em_tree_makeEnglishRules;
15524 +       /* English Rules */
15525 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15527 +     %end;
15528 +   filename x;
15530 +   %doendm:
15531 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15532 +%macro EM_SetProperties;
15534 +   /* train properties */
15535 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15536 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15537 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15538 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15539 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15540 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15541 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15542 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15543 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15544 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15545 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15546 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15547 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15548 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15549 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15550 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15551 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15552 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15553 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15554 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15555 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15556 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15557 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15558 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15559 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15560 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15561 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15562 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15563 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15564 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15565 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15566 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15567 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15568 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15569 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15570 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15571 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15572 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15573 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15574 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15575 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15577 +   /* properties for interactive sample */
15578 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15579 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15580 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15581 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15583 +   /* report properties */
15584 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15585 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15587 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15588 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15589 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15598 +   /* score properties */
15599 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15602 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15604 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15605 +  %global &nLevel;
15606 +  proc dmdb batch data=&indata
15607 +    classout=_tmp_dmdbout;
15608 +    class &target;
15609 +  run;
15610 +  data _tmp_dmdbout;
15611 +    set _tmp_dmdbout;
15612 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15613 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15614 +  run;
15615 +  data _null_;
15616 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15617 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15618 +    %let dsid = %sysfunc(close(&dsid));
15619 +     call symput("&nLevel", put(&_obs, Best12.));
15620 +  run;
15622 +  proc datasets lib=work nolist;
15623 +     delete _tmp_dmdbout;
15624 +  run;
15625 +  quit;
15626 +%Mend EM_CheckBinaryTargetLevel;
15629 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15631 +  /* determine the number of obs in training data */
15632 +  proc sql;
15633 +    reset noprint;
15634 +    select count(*) into :em_nobs from &indata;
15635 +  quit;
15637 +  /* determine the number of input variables */
15638 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15639 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15641 +  /* retrieve targetEvent from decmeta */
15642 +  %let targetEvent=;
15643 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15644 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15645 +      data _null_;
15646 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15647 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15648 +      run;
15649 +    %end;
15650 +  %end;
15652 +  /* create targetTable if multipleTar eq Y */
15653 +  data temptarget;
15654 +    set &EM_DATA_VARIABLESET;
15655 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15656 +  run;
15658 + /* data sets */
15659 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15660 + %EM_GETNAME(key=EMTREE,        type=DATA);
15661 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15662 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15663 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15664 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15665 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15666 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15667 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15668 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15670 + /* files */
15671 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15672 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15674 + /* turn on pmml if requested */
15675 + %let nnpmml=0;
15676 + %if %symexist(EM_PMML) %then %do;
15677 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15678 +       %let nnpmml=1;
15680 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15681 +%end;
15683 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15685 + %if &nnpmml or &numClassTarget %then %do;
15687 +       /* create dmdb needed for pmml generation */
15688 +       %let tree_maxlevel = 512;
15689 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15690 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15691 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15692 +         %end;
15693 +       %end;
15694 +       %if &tree_maxlevel gt 0 %then %do;
15695 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15696 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15697 +       %end;
15699 +       %let targetOrderString =;
15700 +       %let targetString = ;
15701 +       data _null_;
15702 +          length orderString nameString $10000;
15703 +          retain orderString nameString;
15704 +          set &em_data_variableset end=eof;
15705 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15706 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15707 +          %end;
15708 +          %else %do;
15709 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15710 +          %end;          select(order);
15711 +            when('')        order ='DESC';
15712 +            when('FMTASC')  order='ASCFMT';
15713 +            when('FMTDESC') order='DESFMT';
15714 +            otherwise;
15715 +          end;
15716 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15717 +          nameString = trim(nameString)!!' '!!trim(NAME);
15719 +          if eof then do;
15720 +             call symput('targetOrderString', trim(orderString));
15721 +             call symput('targetString', trim(nameString));
15722 +          end;
15723 +       run;
15725 +       %let arborkluge= "work._treeDMDB";
15727 +       proc dmdb batch data=&indata
15728 +       %if &nnpmml %then %do;
15729 +           PMML
15730 +       %end;
15731 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15734 +   %if &nnpmml %then %do;
15735 +        %if "%EM_ID" ne "" %then %do;
15736 +          id %EM_ID;
15737 +        %end;
15738 +        %if &EM_NUM_CLASS gt 0 %then %do;
15739 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15740 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15741 +               &targetOrderString;
15742 +        %end;
15743 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15744 +          var %EM_INTERVAL;
15745 +        %end;
15746 +        target &targetString %EM_INTERVAL_TARGET;
15747 +        %if "%EM_FREQ" ne "" %then %do;
15748 +          freq %EM_FREQ;
15749 +        %end;
15750 +  %end;
15751 +  %else %do;
15752 +      class  &targetOrderString;
15753 +      target &targetString %EM_INTERVAL_TARGET;
15754 +  %end;
15755 +       run;
15756 +       quit;
15758 +       proc datasets lib=work nolist;
15759 +          delete classout varout;
15760 +       run;
15761 +       quit;
15763 +    %end;
15764 + %end;
15766 + /* run Arbor procedure */
15767 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15768 +  proc arbor data=&INDATA
15770 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15771 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15772 +  %end;
15774 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15775 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15776 +  %end;
15778 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15779 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15780 +  %end;
15782 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15783 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15784 +  %end;
15786 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15787 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15788 +  %end;
15790 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15791 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15792 +  %end;
15793 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15794 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15795 +  %end;
15796 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15797 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15798 +  %end;
15800 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15801 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15802 +      alpha = &EM_PROPERTY_SIGLEVEL
15803 +    %end;
15804 +  %end;
15806 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15807 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15808 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15809 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15810 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15812 +        padjust =
15813 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15814 +          &chaid
15815 +        %end;
15816 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15817 +          DEPTH
15818 +        %end;
15819 +      %end;
15820 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15821 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15822 +         pvars = &num_inputs
15823 +      %end;
15824 +    %end;
15825 +  %end;
15826 +  %else %do;
15827 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15828 +         padjust = NONE
15829 +      %end;
15830 +  %end;
15832 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15833 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15834 +    Maxrules = &num_nrules
15835 +  %end;
15837 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15838 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15839 +    Maxsurrs = &num_nsurrs
15840 +  %end;
15842 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15843 +     Missing=&EM_PROPERTY_MISSINGVALUE
15844 +  %end;
15846 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15847 +     USEVARONCE
15848 +  %end;
15850 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15851 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15852 +  %end;
15855 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15856 +    event = "&targetEvent"
15857 +  %end;
15859 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15860 +     DECSEARCH
15861 +  %end;
15863 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15864 +     PRIORSSEARCH
15865 +  %end;
15867 +  %if &arbor_1 ne %then %do;
15868 +    &arbor_1
15869 +  %end;
15871 +  %if &em_arbor ne %then %do;
15872 +     &em_arbor
15873 +  %end;
15874 +  ;
15875 + %end;
15876 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15877 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15878 +       interact;
15879 + %end;
15880 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15881 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15882 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15883 +    %put &em_codebar;
15884 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15885 +    %put &errormsg;
15886 +    %put &em_codebar;
15887 +    %goto doendm;
15888 +   %end;
15889 +   %else %do;
15890 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15891 +       interact;
15892 +   %end;
15893 + %end;
15895 + %else %do;
15896 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15897 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15898 +    %put &em_codebar;
15899 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15900 +    %put &errormsg;
15901 +    %put &em_codebar;
15902 +    %goto doendm;
15903 +   %end;
15904 +   %else %do;
15905 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15906 +        interact;
15907 +   %end;
15908 + %end;
15910 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15911 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15912 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15913 +    %end;
15915 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15916 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15917 +    %end;
15919 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15920 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15921 +    %end;
15923 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15924 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15925 +    %end;
15927 +    %if "%EM_FREQ" ne "" %then %do;
15928 +       freq %EM_FREQ;
15929 +    %end;
15931 +    %if "&multipleTar" eq "Y" %then %do;
15932 +       /* cycle through all target vars in variableset */
15933 +       %let tdsid = %sysfunc(open(temptarget));
15934 +       %if &tdsid %then %do;
15935 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15936 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15937 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15938 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15939 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15940 +             target &var / level = &lvl
15941 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15942 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15943 +             %end;
15944 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15945 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15946 +             %end;
15947 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15948 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15949 +             %end;
15950 +          %end;
15951 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
15952 +       %end;
15953 +       useTarget variable = %EM_TARGET;
15954 +    %end;
15955 +    %else %do;
15956 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
15957 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
15958 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
15959 +      %end;
15960 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15961 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
15962 +      %end;
15963 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15964 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
15965 +      %end;
15966 +    %end;
15968 +    %if "&multipleTar" eq "N" %then %do;
15969 +      &EM_DEC_STATEMENT;
15970 +    %end;
15972 +    Performance &EM_PROPERTY_PERFORMANCE
15973 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
15974 +      nodesize=&EM_PROPERTY_NODESAMPLE
15975 +    %end;
15976 +    ;
15978 +    %if "&intFlag" eq "Y" %then %do;
15979 +       INTERACT Largest;
15980 +       Train maxnewdepth=0;
15981 +    %end;
15983 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
15984 +         Assess
15985 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
15986 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
15987 +              %put &em_codebar;
15988 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
15989 +              %put &errormsg;
15990 +              %put &em_codebar;
15991 +            %end;
15992 +            %else %do;
15993 +               Validata=&EM_IMPORT_VALIDATE
15994 +            %end;
15995 +         %end;
15996 +         %else %do;
15997 +           NoValidata
15998 +         %end;
15999 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16000 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16001 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16002 +               %if &dsid %then %do;
16003 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16004 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16005 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16006 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16007 +                   %else %do;
16008 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16009 +                      %else %let measure= MISC;
16010 +                   %end;
16011 +                 %end;
16012 +               %end;
16013 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16014 +            %end;
16015 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16016 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16017 +                 %let measure=ASE;
16018 +              %end;
16019 +              %else %do;
16020 +                 %let measure=MISC;
16021 +              %end;
16022 +            %end;
16023 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16024 +              %let measure=ASE;
16025 +            %end;
16026 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16027 +               %let measure = LIFT;
16028 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16029 +               %if &dsid %then %do;
16030 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16031 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16032 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16033 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16034 +                 %end;
16035 +               %end;
16036 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16037 +            %end;
16038 +            measure=&measure
16039 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16040 +               event = "&targetEvent"
16041 +            %end;
16042 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16043 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16044 +            %end;
16045 +         %end;
16046 +         %if "&multipleTar" eq "N" %then %do;
16047 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16048 +               CV
16049 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16050 +                 CVNITer = &EM_PROPERTY_CVNITER
16051 +               %end;
16052 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16053 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16054 +               %end;
16055 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16056 +                 CVSeed = &EM_PROPERTY_CVSEED
16057 +               %end;
16058 +            %end;
16059 +         %end;
16060 +       %end;
16061 +      ;
16063 +      %if "&intFlag" ne "Y" %then %do;
16064 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16065 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16066 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16067 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16069 +          SUBTREE &subtree
16070 +          %if "&subtree" eq "NLEAVES" %then %do;
16071 +            =&EM_PROPERTY_NSUBTREE
16072 +          %end;
16073 +          ;
16074 +        %end;
16076 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16077 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16078 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16079 +          %end;
16080 +       %end;
16081 +      %end;
16082 + %end;
16085 + MakeMacro nleaves = nleaves;
16086 + save
16087 + %if "&EM_USER_EMTREE" ne "" %then %do;
16088 +   MODEL=&EM_USER_EMTREE
16089 + %end;
16090 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16091 +   SEQUENCE=&EM_USER_OUTSEQ
16092 + %end;
16093 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16094 +   IMPORTANCE=&EM_USER_OUTIMPORT
16095 + %end;
16096 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16097 +   NODESTAT=&EM_USER_OUTNODES
16098 + %end;
16099 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16100 +   SUMMARY=&EM_USER_OUTSUMMARY
16101 + %end;
16102 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16103 +   STATSBYNODE=&EM_USER_OUTSTATS
16104 + %end;
16105 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16106 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16107 + %end;
16108 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16109 +   Pathlistnonmissing=&EM_USER_OUTPATH
16110 + %end;
16111 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16112 +   RULES = &EM_USER_OUTRULES
16113 + %end;
16114 + ;
16116 + %if "&intFlag" ne "Y" %then %do;
16118 +   %let lookupString = ;
16119 +   %if ^%symexist(EM_OPTION) %then
16120 +      %let EM_OPTION=;
16122 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16123 +      %let lookupString = LOOKUP=SELECT;
16124 +   %end;
16126 +   %let codetext=;
16127 +   %let norescodetxt=;
16129 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16130 +     %let codetext=&codetext DUMMY;
16131 +     %let norescodetxt=&norescodetxt DUMMY;
16132 +   %end;
16133 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16134 +     %let codetext=&codetext NOLEAFID;
16135 +     %let norescodetxt=&norescodetxt NOLEAFID;
16136 +   %end;
16137 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16138 +     %let norescodetxt=&norescodetxt NOPRED;
16139 +   %end;
16141 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16142 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16144 +   %if &nnpmml %then %do;
16145 +     code pmml;
16146 +   %end;
16148 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16149 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16150 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16151 +   %end;
16152 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16153 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16154 +   %end;
16155 + %end;
16157 + run;
16158 + quit;
16160 + /*%em_checkerror(); */
16161 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16162 +   /* Delete DMDB catalog */
16163 +   proc datasets lib=work nolist;
16164 +       delete _treeDMDB / mt=cat;
16165 +  run;
16166 +  %end;
16168 + %if &nnpmml %then %do;
16169 +    ods pmml close;
16170 + %end;
16172 +  %doendm:
16174 +%mend em_tree_runTreeProcedure;
16176 +%macro em_tree_createFitStats( multipleTar= );
16179 +  /* create targetTable is multipleTar eq Y */
16180 +  data temptarget;
16181 +    set &EM_DATA_VARIABLESET;
16182 +    where ROLE="TARGET";
16183 +  run;
16185 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16186 +   data &EM_USER_EMOUTFIT;
16187 +     length target $32;
16188 +     merge work.fit_train
16189 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16190 +       work.fit_valid
16191 +     %end;
16192 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16193 +       work.fit_test
16194 +     %end;
16195 +     ;
16196 +     %if "&multipleTar" eq "N" %then %do;
16197 +       target="%EM_TARGET";
16198 +     %end;
16199 +     %else %do;
16200 +       target = _TARGET_;
16201 +     %end;
16202 +     drop _NW_ _SUMW_
16203 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16204 +        _VSUMW_
16205 +     %end;
16206 +     ;
16207 +   run;
16209 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16210 +     proc datasets library=work nolist;
16211 +       delete fit_valid;
16212 +     run;
16213 +   %end;
16214 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16215 +     proc datasets library=work nolist;
16216 +       delete fit_test;
16217 +     run;
16218 +   %end;
16220 +%mend em_tree_createFitStats;
16223 +%macro em_tree_makeEnglishRules;
16225 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16226 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16228 +  /* verify that necessary tables exist and if not, skip processing */
16229 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16230 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16231 +    %goto doendm;
16232 +  %end;
16233 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16234 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16235 +    %goto doendm;
16236 +  %end;
16238 +  /* determine length of variable in outpath dataset */
16239 +  %let vlength= ;
16240 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16241 +  %if &dsid ne %then %do;
16242 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16243 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16244 +  %end;
16245 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16247 +  data tempoutpath;
16248 +    length varname $&vlength;
16249 +    retain varname;
16250 +    set &EM_USER_OUTPATH;
16252 +    if ^missing(variable) then varname=variable;
16253 +    else if ^missing(var_name) then varname=var_name;
16254 +    output;
16255 +  run;
16257 +  /* create an array of generated predicted variable names */
16258 +  %let tree_pred_vars = ;
16259 +  %let tree_pred_label = ;
16260 +  %let numpred= 0;
16261 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16263 +    data _null_;
16264 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16265 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16266 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16267 +     if eof then
16268 +       call symput('numpred', strip(put(_N_, BEST.)));
16269 +    run;
16270 +  %end;
16272 +  /* determine if NPRIORS exists in outnodes  */
16273 +  %local nprior_flag;
16274 +  data _null_;
16275 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16276 +    if eof then do;
16277 +      call symput('nprior_flag', strip(put(npriors, best.)));
16278 +    end;
16279 +  run;
16281 +  proc sort data=tempoutpath; by node; run;
16282 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16284 +  data tempoutpath;
16285 +    merge tempoutpath(in=_a) outnodes(keep= node
16286 +    %if "&nprior_flag" ne "." %then %do;
16287 +      NPRIORS
16288 +    %end;
16289 +    %else %do;
16290 +      N
16291 +    %end;
16292 +    %if &numpred gt 0 %then %do;
16293 +      %do i=1 %to &numpred;
16294 +        &&tree_pred_vars&i
16295 +      %end;
16296 +    %end;
16297 +    );
16298 +    by node;
16299 +    if _a;
16300 +  run;
16302 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16304 +  data _null_;
16305 +    file x;
16306 +    set tempoutpath;
16307 +    by node descending varname;
16308 +    retain origvar oldnode string;
16309 +    length origvar $32 oldnode 8 string $200;
16311 +    if _N_ = 1 then do;
16312 +      origvar = varname;
16313 +      oldnode = node;
16314 +    end;
16316 +    if first.node then do;
16317 +       put "&EM_CODEBAR";
16318 +       put " Node = " node;
16319 +       put "&EM_CODEBAR";
16320 +    end;
16322 +      if first.varname then do;
16323 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16324 +            if MISSING(CHARACTER_VALUE) then do;
16325 +             if NUMERIC_VALUE ne .  then do;
16326 +              if ^first.node then do;
16327 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16328 +              end;
16329 +              else do;
16330 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16331 +              end;
16332 +             end;
16333 +            end;
16334 +            else do;
16335 +              if ^first.node then do;
16336 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16337 +              end;
16338 +              else do;
16339 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16340 +              end;
16341 +             end;
16342 +         end;
16343 +         else if RELATION in ("=") then do;
16344 +            if ^first.node then do;
16345 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16346 +            end;
16347 +            else do;
16348 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16349 +            end;
16350 +         end;
16351 +         else if RELATION in ("ISMISSING") then do;
16352 +            if ^first.node then do;
16353 +              string = " AND "|| strip(varname) || " equals Missing";
16354 +            end;
16355 +            else do;
16356 +              string = "if "|| strip(varname) ||" equals Missing";
16357 +            end;
16358 +         end;
16359 +         else if RELATION in ("ISNOTMISSING") then do;
16360 +            if ^first.node then do;
16361 +              string = " AND "|| strip(varname) || " equals All Values";
16362 +            end;
16363 +            else do;
16364 +              string = "if "|| strip(varname) ||" equals All Values";
16365 +            end;
16366 +         end;
16367 +         if ^missing(varname) then origvar = varname;
16368 +         oldnode=node;
16370 +      end;
16371 +      else do;
16372 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16373 +          if MISSING(CHARACTER_VALUE) then do;
16374 +           if  NUMERIC_VALUE ne .  then do;
16375 +            if ^MISSING(string) then
16376 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16377 +            else
16378 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16379 +           end;
16380 +          end;
16381 +          else do;
16382 +            if ^MISSING(string) then
16383 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16384 +            else
16385 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16386 +          end;
16388 +         end;
16389 +         else if RELATION in ("=") then do;
16390 +           string = strip(string)||", "||strip(character_value);
16391 +         end;
16392 +         else if RELATION in ("ISMISSING") then do;
16394 +         end;
16395 +         if ^missing(varname) then origvar = varname;
16396 +         oldnode=node;
16397 +      end;
16398 +      if last.varname then do;
16399 +         if RELATION in ("ISMISSING") then do;
16400 +           if ^first.varname then do;
16401 +             string = strip(string) || " or MISSING";
16402 +           end;
16403 +         end;
16404 +         put string;
16405 +         if ^missing(varname) then origvar = varname;
16406 +         oldnode=node;
16407 +      end;
16409 +      if last.node then do;
16410 +         put "then ";
16411 +         put " Tree Node Identifier   = " node;
16413 +         %if "&nprior_flag" ne "." %then %do;
16414 +           put " Number of Observations = " NPRIORS;
16415 +         %end;
16416 +         %else %do;
16417 +           put " Number of Observations = " N;
16418 +         %end;
16420 +         %if &numpred gt 0 %then %do;
16421 +           %do i=1 %to &numpred;
16422 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16423 +           %end;
16424 +         %end;
16426 +         put " ";
16427 +         if ^missing(varname) then origvar = varname;
16428 +         oldnode=node;
16429 +      end;
16431 +  run;
16433 +  proc datasets lib=work nolist;
16434 +    delete tempoutpath outnodes;
16435 +  run;
16437 +  %doendm:
16438 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: 1596892 kilobytes of physical memory.
NOTE: Will use 6616 out of 6616 training cases.
NOTE: Using memory pool with 146240512 bytes.
NOTE: Will not search for split on variable campus.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 12 times.
NOTE: Training used 2181040 bytes of work memory.
NOTE: The subtree sequence contains 46 subtrees. The largest has 91 nodes and 46 leaves.
NOTE: Using subtree with 87 nodes and 44 leaves.
NOTE: Using subtree with 87 nodes and 44 leaves.
NOTE: Created macro variable NLEAVES equal to 44.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 12 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 4324 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 87 observations and 16 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 222 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 1871 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 46 observations and 18 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 522 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 87 observations and 5 variables.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.


NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.54 seconds
      cpu time            0.51 seconds
      
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 6616 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.55 seconds
      cpu time            0.51 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.FIT_TEST (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 222 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 222 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 222 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 222 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 87 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 87 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 222 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 87 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 222 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 222 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 222 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195   
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:30,
      Create Time=21Apr2016:05:42:30

NOTE: 437 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 222 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

NOTE: Fileref X has been deassigned.
16440  
16441  *------------------------------------------------------------*;
16442  * End TRAIN: Tree;
16443  *------------------------------------------------------------*;

16444  *------------------------------------------------------------*;
16445  * Close any missing semi colons;
16446  *------------------------------------------------------------*;
16447  ;
16448  ;
16449  ;
16450  ;
16451  quit;
16452  *------------------------------------------------------------*;
16453  * Close any unbalanced quotes;
16454  *------------------------------------------------------------*;
16455  /*; *"; *'; */
16456  ;
16457  run;
16458  quit;
16459  /* Reset EM Options */
16460  options formchar="|----|+|---+=|-/\<>*";
16461  options nocenter ls=256 ps=10000;
16462  goptions reset=all device=GIF NODISPLAY;

16463  proc sort data=WORK.EM_USER_REPORT;
16464  by ID VIEW;
16465  run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

