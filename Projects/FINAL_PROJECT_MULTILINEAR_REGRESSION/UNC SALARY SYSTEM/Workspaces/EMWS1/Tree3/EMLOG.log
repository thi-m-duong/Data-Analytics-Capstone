*------------------------------------------------------------*
User:                Intern Three
Date:                April 21, 2016
Time:                05:42:19
Site:                70085778
Platform:            X64_7HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 21, 2016
Time:                05:41:51
*------------------------------------------------------------*
14715  proc freq data=EMWS1.Tree3_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.Tree3META;
14717  run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.TREE3META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.Tree3META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 8 observations read from the data set WORK.TREE3META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
"No decisions defined for target "totalsal"."
14726  proc print data = EMWS1.Ids_totalsal_DM noobs label;
14727  var _type_ variable label;
14728  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14729  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14730  title9 ' ';
14731  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14732  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14733  title10;
 
14734  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15257  *------------------------------------------------------------*;
15258  * Tree3: Generation of macros and macro variables;
15259  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15260  *------------------------------------------------------------*;
 
15261  %let EMEXCEPTIONSTRING=;
15262  *------------------------------------------------------------*;
15263  * TRAIN: Tree3;
15264  *------------------------------------------------------------*;
15265  %let EM_ACTION = TRAIN;
15266  %let syscc = 0;
15267  %macro main;
15268
15269    %if %upcase(&EM_ACTION) = CREATE %then %do;
15270      filename temp catalog 'sashelp.emmodl.tree_create.source';
15271      %include temp;
15272      filename temp;
15273
15274      %em_tree_create;
15275    %end;
15276
15277     %else
15278     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15279
15280         filename temp catalog 'sashelp.emmodl.tree_train.source';
15281         %include temp;
15282         filename temp;
15283         %em_tree_train;
15284     %end;
15285
15286    %else
15287    %if %upcase(&EM_ACTION) = SCORE %then %do;
15288      filename temp catalog 'sashelp.emmodl.tree_score.source';
15289      %include temp;
15290      filename temp;
15291
15292      %em_tree_score;
15293
15294    %end;
15295
15296    %else
15297    %if %upcase(&EM_ACTION) = REPORT %then %do;
15298
15299         filename temp catalog 'sashelp.emmodl.tree_report.source';
15300         %include temp;
15301         filename temp;
15302
15303         %em_tree_report;
15304     %end;
15305
15306    %else
15307    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15308
15309         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15310         %include temp;
15311         filename temp;
15312         %EM_TREE_OPENTREEVIEWER;
15313
15314     %end;
15315
15316    %else
15317    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15318
15319         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15320         %include temp;
15321         filename temp;
15322         %EM_TREE_CLOSETREEVIEWER;
15323
15324     %end;
15325
15326
15327     %doendm:
15328  %mend main;
15329
15330  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15332 +%macro em_tree_train;
15334 +   %if &EM_IMPORT_DATA eq %then %do;
15335 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15336 +       %put &em_codebar;
15337 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15338 +       %put &errormsg;
15339 +       %put &em_codebar;
15340 +       %goto doendm;
15341 +   %end;
15342 +   %else
15343 +       %let EMEXCEPTIONSTRING =;
15345 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15346 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15347 +        %put &em_codebar;
15348 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15349 +        %put &errormsg;
15350 +        %put &em_codebar;
15351 +        %goto doendm;
15352 +   %end;
15354 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15355 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15356 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15357 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15358 +        %put &em_codebar;
15359 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15360 +        %put &errormsg;
15361 +        %put &em_codebar;
15362 +        %goto doendm;
15363 +   %end;
15365 +   /* Initialize property macro variables */
15366 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15367 +   %include temp;
15368 +   filename temp;
15370 +   %EM_SetProperties;
15372 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15373 +   %EM_GETNAME(key=EMTREE, type=DATA);
15374 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15375 +     /* if import eq Y and no importtable defined, throw an exception */
15376 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15377 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15378 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15379 +         %put &em_codebar;
15380 +         %put &errmsg;
15381 +         %put &em_codebar;
15382 +         %goto doendm;
15383 +      %end;
15384 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15385 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15386 +         %put &em_codebar;
15387 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15388 +         %put &errormsg;
15389 +         %put &em_codebar;
15390 +         %goto doendm;
15391 +      %end;
15392 +      %else %do;
15393 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15394 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15395 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15396 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15397 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15398 +         %let dsid = %sysfunc(close(&dsid));
15399 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15400 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15401 +            %put &em_codebar;
15402 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15403 +            %put &errormsg;
15404 +            %put &em_codebar;
15405 +            %goto doendm;
15406 +         %end;
15407 +      %end;
15408 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15409 +         proc delete data=&EM_USER_EMTREE;
15410 +         run;
15411 +      %end;
15412 +   %end;
15413 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15414 +      proc delete data=&EM_USER_EMTREE;
15415 +      run;
15416 +   %end;
15418 +   /* load tree macros */
15419 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15420 +   %include temp;
15421 +   filename temp;
15423 +   /* data sets */
15424 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15425 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15426 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15428 +   /* files */
15429 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15431 +   /* check actual num of target levels */
15432 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15433 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15434 +                              nLevel=_nTargetLevel );
15435 +      %if &_nTargetLevel  > 2 %then %do;
15436 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15437 +        %put &em_codebar;
15438 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15439 +        %put &errormsg;
15440 +        %put &em_codebar;
15441 +        %goto doendm;
15442 +      %end;
15443 +   %end;
15445 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15446 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15447 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15448 +        %let costflag=0;
15449 +        data _null_;
15450 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15451 +          if eof then call symput("costflag", _N_);
15452 +        run;
15453 +        %if &costflag gt 0 %then %do;
15454 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15455 +          %put &em_codebar;
15456 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15457 +          %put &errormsg;
15458 +          %put &em_codebar;
15459 +          %goto doendm;
15460 +       %end;
15461 +     %end;
15462 +   %end;
15464 +   /* determine if multiple targets will be processed */
15465 +   %let em_tree_multipleTargets=N;
15466 +   %let em_tree_numTarget = 1;
15467 +   %let em_tree_targetVars=;
15469 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15470 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15471 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15472 +         %let em_tree_multipleTargets=N;
15473 +      %end;
15474 +      %else %do;
15475 +         /* create macro array of targets  */
15476 +         data _null_;
15477 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15478 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15479 +           if eof then
15480 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15481 +        run;
15483 +        %if &em_tree_numTarget gt 1 %then %do;
15484 +           %let em_tree_multipleTargets=Y;
15485 +        %end;
15486 +      %end;
15487 +   %end;
15489 +   /* create view of only necessary variable for performance reasons */
15490 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15491 +   data &tempData / view=&tempData;
15492 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15493 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15494 +       %EM_TARGET
15495 +     %end;
15496 +     %else %do;
15497 +       %if &em_tree_numTarget ne 0 %then %do;
15498 +         %do i=1 %to &em_tree_numTarget;
15499 +            &&em_tree_targetVars&i
15500 +         %end;
15501 +       %end;
15502 +     %end;
15503 +     );
15504 +   run;
15506 +   /* run Tree procedure */
15507 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15509 +   /* Check return code and throw exception if error is detected */
15510 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15511 +   %if &syserr %then %do;
15512 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15513 +     %goto doendm;
15514 +   %end;
15516 +   /* add decision score code if multiple targets are processed */
15517 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15518 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15519 +   %end;
15521 +   /* create outfit dataset if multiple score statements have been executed */
15522 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15524 +   /* create English Rules */
15525 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15526 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15527 +       %em_tree_makeEnglishRules;
15529 +       /* English Rules */
15530 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15532 +     %end;
15533 +   filename x;
15535 +   %doendm:
15536 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15537 +%macro EM_SetProperties;
15539 +   /* train properties */
15540 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15541 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15542 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15543 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15544 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15545 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15546 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15547 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15548 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15549 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15550 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15551 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15552 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15553 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15554 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15555 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15556 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15557 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15558 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15559 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15560 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15561 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15562 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15563 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15564 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15565 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15566 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15567 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15568 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15569 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15570 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15571 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15572 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15573 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15574 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15575 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15576 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15577 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15578 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15579 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15580 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15582 +   /* properties for interactive sample */
15583 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15584 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15585 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15588 +   /* report properties */
15589 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15603 +   /* score properties */
15604 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15607 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE3_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15609 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15610 +  %global &nLevel;
15611 +  proc dmdb batch data=&indata
15612 +    classout=_tmp_dmdbout;
15613 +    class &target;
15614 +  run;
15615 +  data _tmp_dmdbout;
15616 +    set _tmp_dmdbout;
15617 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15618 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15619 +  run;
15620 +  data _null_;
15621 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15622 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15623 +    %let dsid = %sysfunc(close(&dsid));
15624 +     call symput("&nLevel", put(&_obs, Best12.));
15625 +  run;
15627 +  proc datasets lib=work nolist;
15628 +     delete _tmp_dmdbout;
15629 +  run;
15630 +  quit;
15631 +%Mend EM_CheckBinaryTargetLevel;
15634 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15636 +  /* determine the number of obs in training data */
15637 +  proc sql;
15638 +    reset noprint;
15639 +    select count(*) into :em_nobs from &indata;
15640 +  quit;
15642 +  /* determine the number of input variables */
15643 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15644 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15646 +  /* retrieve targetEvent from decmeta */
15647 +  %let targetEvent=;
15648 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15649 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15650 +      data _null_;
15651 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15652 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15653 +      run;
15654 +    %end;
15655 +  %end;
15657 +  /* create targetTable if multipleTar eq Y */
15658 +  data temptarget;
15659 +    set &EM_DATA_VARIABLESET;
15660 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15661 +  run;
15663 + /* data sets */
15664 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15665 + %EM_GETNAME(key=EMTREE,        type=DATA);
15666 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15667 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15668 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15669 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15670 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15671 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15672 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15673 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15675 + /* files */
15676 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15677 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15679 + /* turn on pmml if requested */
15680 + %let nnpmml=0;
15681 + %if %symexist(EM_PMML) %then %do;
15682 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15683 +       %let nnpmml=1;
15685 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15686 +%end;
15688 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15690 + %if &nnpmml or &numClassTarget %then %do;
15692 +       /* create dmdb needed for pmml generation */
15693 +       %let tree_maxlevel = 512;
15694 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15695 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15696 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15697 +         %end;
15698 +       %end;
15699 +       %if &tree_maxlevel gt 0 %then %do;
15700 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15701 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15702 +       %end;
15704 +       %let targetOrderString =;
15705 +       %let targetString = ;
15706 +       data _null_;
15707 +          length orderString nameString $10000;
15708 +          retain orderString nameString;
15709 +          set &em_data_variableset end=eof;
15710 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15711 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15712 +          %end;
15713 +          %else %do;
15714 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15715 +          %end;          select(order);
15716 +            when('')        order ='DESC';
15717 +            when('FMTASC')  order='ASCFMT';
15718 +            when('FMTDESC') order='DESFMT';
15719 +            otherwise;
15720 +          end;
15721 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15722 +          nameString = trim(nameString)!!' '!!trim(NAME);
15724 +          if eof then do;
15725 +             call symput('targetOrderString', trim(orderString));
15726 +             call symput('targetString', trim(nameString));
15727 +          end;
15728 +       run;
15730 +       %let arborkluge= "work._treeDMDB";
15732 +       proc dmdb batch data=&indata
15733 +       %if &nnpmml %then %do;
15734 +           PMML
15735 +       %end;
15736 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15739 +   %if &nnpmml %then %do;
15740 +        %if "%EM_ID" ne "" %then %do;
15741 +          id %EM_ID;
15742 +        %end;
15743 +        %if &EM_NUM_CLASS gt 0 %then %do;
15744 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15745 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15746 +               &targetOrderString;
15747 +        %end;
15748 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15749 +          var %EM_INTERVAL;
15750 +        %end;
15751 +        target &targetString %EM_INTERVAL_TARGET;
15752 +        %if "%EM_FREQ" ne "" %then %do;
15753 +          freq %EM_FREQ;
15754 +        %end;
15755 +  %end;
15756 +  %else %do;
15757 +      class  &targetOrderString;
15758 +      target &targetString %EM_INTERVAL_TARGET;
15759 +  %end;
15760 +       run;
15761 +       quit;
15763 +       proc datasets lib=work nolist;
15764 +          delete classout varout;
15765 +       run;
15766 +       quit;
15768 +    %end;
15769 + %end;
15771 + /* run Arbor procedure */
15772 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15773 +  proc arbor data=&INDATA
15775 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15776 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15777 +  %end;
15779 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15780 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15781 +  %end;
15783 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15784 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15785 +  %end;
15787 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15788 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15789 +  %end;
15791 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15792 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15793 +  %end;
15795 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15796 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15797 +  %end;
15798 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15799 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15800 +  %end;
15801 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15802 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15803 +  %end;
15805 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15806 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15807 +      alpha = &EM_PROPERTY_SIGLEVEL
15808 +    %end;
15809 +  %end;
15811 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15812 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15813 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15814 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15815 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15817 +        padjust =
15818 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15819 +          &chaid
15820 +        %end;
15821 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15822 +          DEPTH
15823 +        %end;
15824 +      %end;
15825 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15826 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15827 +         pvars = &num_inputs
15828 +      %end;
15829 +    %end;
15830 +  %end;
15831 +  %else %do;
15832 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15833 +         padjust = NONE
15834 +      %end;
15835 +  %end;
15837 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15838 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15839 +    Maxrules = &num_nrules
15840 +  %end;
15842 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15843 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15844 +    Maxsurrs = &num_nsurrs
15845 +  %end;
15847 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15848 +     Missing=&EM_PROPERTY_MISSINGVALUE
15849 +  %end;
15851 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15852 +     USEVARONCE
15853 +  %end;
15855 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15856 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15857 +  %end;
15860 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15861 +    event = "&targetEvent"
15862 +  %end;
15864 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15865 +     DECSEARCH
15866 +  %end;
15868 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15869 +     PRIORSSEARCH
15870 +  %end;
15872 +  %if &arbor_1 ne %then %do;
15873 +    &arbor_1
15874 +  %end;
15876 +  %if &em_arbor ne %then %do;
15877 +     &em_arbor
15878 +  %end;
15879 +  ;
15880 + %end;
15881 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15882 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15883 +       interact;
15884 + %end;
15885 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15886 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15887 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15888 +    %put &em_codebar;
15889 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15890 +    %put &errormsg;
15891 +    %put &em_codebar;
15892 +    %goto doendm;
15893 +   %end;
15894 +   %else %do;
15895 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15896 +       interact;
15897 +   %end;
15898 + %end;
15900 + %else %do;
15901 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15902 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15903 +    %put &em_codebar;
15904 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15905 +    %put &errormsg;
15906 +    %put &em_codebar;
15907 +    %goto doendm;
15908 +   %end;
15909 +   %else %do;
15910 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15911 +        interact;
15912 +   %end;
15913 + %end;
15915 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15916 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15917 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15918 +    %end;
15920 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15921 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15922 +    %end;
15924 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15925 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15926 +    %end;
15928 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15929 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15930 +    %end;
15932 +    %if "%EM_FREQ" ne "" %then %do;
15933 +       freq %EM_FREQ;
15934 +    %end;
15936 +    %if "&multipleTar" eq "Y" %then %do;
15937 +       /* cycle through all target vars in variableset */
15938 +       %let tdsid = %sysfunc(open(temptarget));
15939 +       %if &tdsid %then %do;
15940 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15941 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15942 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15943 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15944 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15945 +             target &var / level = &lvl
15946 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15947 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15948 +             %end;
15949 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15950 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15951 +             %end;
15952 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15953 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15954 +             %end;
15955 +          %end;
15956 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
15957 +       %end;
15958 +       useTarget variable = %EM_TARGET;
15959 +    %end;
15960 +    %else %do;
15961 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
15962 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
15963 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
15964 +      %end;
15965 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15966 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
15967 +      %end;
15968 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15969 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
15970 +      %end;
15971 +    %end;
15973 +    %if "&multipleTar" eq "N" %then %do;
15974 +      &EM_DEC_STATEMENT;
15975 +    %end;
15977 +    Performance &EM_PROPERTY_PERFORMANCE
15978 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
15979 +      nodesize=&EM_PROPERTY_NODESAMPLE
15980 +    %end;
15981 +    ;
15983 +    %if "&intFlag" eq "Y" %then %do;
15984 +       INTERACT Largest;
15985 +       Train maxnewdepth=0;
15986 +    %end;
15988 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
15989 +         Assess
15990 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
15991 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
15992 +              %put &em_codebar;
15993 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
15994 +              %put &errormsg;
15995 +              %put &em_codebar;
15996 +            %end;
15997 +            %else %do;
15998 +               Validata=&EM_IMPORT_VALIDATE
15999 +            %end;
16000 +         %end;
16001 +         %else %do;
16002 +           NoValidata
16003 +         %end;
16004 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16005 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16006 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16007 +               %if &dsid %then %do;
16008 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16009 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16010 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16011 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16012 +                   %else %do;
16013 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16014 +                      %else %let measure= MISC;
16015 +                   %end;
16016 +                 %end;
16017 +               %end;
16018 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16019 +            %end;
16020 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16021 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16022 +                 %let measure=ASE;
16023 +              %end;
16024 +              %else %do;
16025 +                 %let measure=MISC;
16026 +              %end;
16027 +            %end;
16028 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16029 +              %let measure=ASE;
16030 +            %end;
16031 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16032 +               %let measure = LIFT;
16033 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16034 +               %if &dsid %then %do;
16035 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16036 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16037 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16038 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16039 +                 %end;
16040 +               %end;
16041 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16042 +            %end;
16043 +            measure=&measure
16044 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16045 +               event = "&targetEvent"
16046 +            %end;
16047 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16048 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16049 +            %end;
16050 +         %end;
16051 +         %if "&multipleTar" eq "N" %then %do;
16052 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16053 +               CV
16054 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16055 +                 CVNITer = &EM_PROPERTY_CVNITER
16056 +               %end;
16057 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16058 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16059 +               %end;
16060 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16061 +                 CVSeed = &EM_PROPERTY_CVSEED
16062 +               %end;
16063 +            %end;
16064 +         %end;
16065 +       %end;
16066 +      ;
16068 +      %if "&intFlag" ne "Y" %then %do;
16069 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16070 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16071 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16072 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16074 +          SUBTREE &subtree
16075 +          %if "&subtree" eq "NLEAVES" %then %do;
16076 +            =&EM_PROPERTY_NSUBTREE
16077 +          %end;
16078 +          ;
16079 +        %end;
16081 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16082 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16083 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16084 +          %end;
16085 +       %end;
16086 +      %end;
16087 + %end;
16090 + MakeMacro nleaves = nleaves;
16091 + save
16092 + %if "&EM_USER_EMTREE" ne "" %then %do;
16093 +   MODEL=&EM_USER_EMTREE
16094 + %end;
16095 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16096 +   SEQUENCE=&EM_USER_OUTSEQ
16097 + %end;
16098 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16099 +   IMPORTANCE=&EM_USER_OUTIMPORT
16100 + %end;
16101 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16102 +   NODESTAT=&EM_USER_OUTNODES
16103 + %end;
16104 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16105 +   SUMMARY=&EM_USER_OUTSUMMARY
16106 + %end;
16107 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16108 +   STATSBYNODE=&EM_USER_OUTSTATS
16109 + %end;
16110 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16111 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16112 + %end;
16113 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16114 +   Pathlistnonmissing=&EM_USER_OUTPATH
16115 + %end;
16116 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16117 +   RULES = &EM_USER_OUTRULES
16118 + %end;
16119 + ;
16121 + %if "&intFlag" ne "Y" %then %do;
16123 +   %let lookupString = ;
16124 +   %if ^%symexist(EM_OPTION) %then
16125 +      %let EM_OPTION=;
16127 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16128 +      %let lookupString = LOOKUP=SELECT;
16129 +   %end;
16131 +   %let codetext=;
16132 +   %let norescodetxt=;
16134 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16135 +     %let codetext=&codetext DUMMY;
16136 +     %let norescodetxt=&norescodetxt DUMMY;
16137 +   %end;
16138 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16139 +     %let codetext=&codetext NOLEAFID;
16140 +     %let norescodetxt=&norescodetxt NOLEAFID;
16141 +   %end;
16142 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16143 +     %let norescodetxt=&norescodetxt NOPRED;
16144 +   %end;
16146 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16147 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16149 +   %if &nnpmml %then %do;
16150 +     code pmml;
16151 +   %end;
16153 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16154 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16155 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16156 +   %end;
16157 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16158 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16159 +   %end;
16160 + %end;
16162 + run;
16163 + quit;
16165 + /*%em_checkerror(); */
16166 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16167 +   /* Delete DMDB catalog */
16168 +   proc datasets lib=work nolist;
16169 +       delete _treeDMDB / mt=cat;
16170 +  run;
16171 +  %end;
16173 + %if &nnpmml %then %do;
16174 +    ods pmml close;
16175 + %end;
16177 +  %doendm:
16179 +%mend em_tree_runTreeProcedure;
16181 +%macro em_tree_createFitStats( multipleTar= );
16184 +  /* create targetTable is multipleTar eq Y */
16185 +  data temptarget;
16186 +    set &EM_DATA_VARIABLESET;
16187 +    where ROLE="TARGET";
16188 +  run;
16190 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16191 +   data &EM_USER_EMOUTFIT;
16192 +     length target $32;
16193 +     merge work.fit_train
16194 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16195 +       work.fit_valid
16196 +     %end;
16197 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16198 +       work.fit_test
16199 +     %end;
16200 +     ;
16201 +     %if "&multipleTar" eq "N" %then %do;
16202 +       target="%EM_TARGET";
16203 +     %end;
16204 +     %else %do;
16205 +       target = _TARGET_;
16206 +     %end;
16207 +     drop _NW_ _SUMW_
16208 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16209 +        _VSUMW_
16210 +     %end;
16211 +     ;
16212 +   run;
16214 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16215 +     proc datasets library=work nolist;
16216 +       delete fit_valid;
16217 +     run;
16218 +   %end;
16219 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16220 +     proc datasets library=work nolist;
16221 +       delete fit_test;
16222 +     run;
16223 +   %end;
16225 +%mend em_tree_createFitStats;
16228 +%macro em_tree_makeEnglishRules;
16230 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16231 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16233 +  /* verify that necessary tables exist and if not, skip processing */
16234 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16235 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16236 +    %goto doendm;
16237 +  %end;
16238 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16239 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16240 +    %goto doendm;
16241 +  %end;
16243 +  /* determine length of variable in outpath dataset */
16244 +  %let vlength= ;
16245 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16246 +  %if &dsid ne %then %do;
16247 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16248 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16249 +  %end;
16250 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16252 +  data tempoutpath;
16253 +    length varname $&vlength;
16254 +    retain varname;
16255 +    set &EM_USER_OUTPATH;
16257 +    if ^missing(variable) then varname=variable;
16258 +    else if ^missing(var_name) then varname=var_name;
16259 +    output;
16260 +  run;
16262 +  /* create an array of generated predicted variable names */
16263 +  %let tree_pred_vars = ;
16264 +  %let tree_pred_label = ;
16265 +  %let numpred= 0;
16266 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16268 +    data _null_;
16269 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16270 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16271 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16272 +     if eof then
16273 +       call symput('numpred', strip(put(_N_, BEST.)));
16274 +    run;
16275 +  %end;
16277 +  /* determine if NPRIORS exists in outnodes  */
16278 +  %local nprior_flag;
16279 +  data _null_;
16280 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16281 +    if eof then do;
16282 +      call symput('nprior_flag', strip(put(npriors, best.)));
16283 +    end;
16284 +  run;
16286 +  proc sort data=tempoutpath; by node; run;
16287 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16289 +  data tempoutpath;
16290 +    merge tempoutpath(in=_a) outnodes(keep= node
16291 +    %if "&nprior_flag" ne "." %then %do;
16292 +      NPRIORS
16293 +    %end;
16294 +    %else %do;
16295 +      N
16296 +    %end;
16297 +    %if &numpred gt 0 %then %do;
16298 +      %do i=1 %to &numpred;
16299 +        &&tree_pred_vars&i
16300 +      %end;
16301 +    %end;
16302 +    );
16303 +    by node;
16304 +    if _a;
16305 +  run;
16307 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16309 +  data _null_;
16310 +    file x;
16311 +    set tempoutpath;
16312 +    by node descending varname;
16313 +    retain origvar oldnode string;
16314 +    length origvar $32 oldnode 8 string $200;
16316 +    if _N_ = 1 then do;
16317 +      origvar = varname;
16318 +      oldnode = node;
16319 +    end;
16321 +    if first.node then do;
16322 +       put "&EM_CODEBAR";
16323 +       put " Node = " node;
16324 +       put "&EM_CODEBAR";
16325 +    end;
16327 +      if first.varname then do;
16328 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16329 +            if MISSING(CHARACTER_VALUE) then do;
16330 +             if NUMERIC_VALUE ne .  then do;
16331 +              if ^first.node then do;
16332 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16333 +              end;
16334 +              else do;
16335 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16336 +              end;
16337 +             end;
16338 +            end;
16339 +            else do;
16340 +              if ^first.node then do;
16341 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16342 +              end;
16343 +              else do;
16344 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16345 +              end;
16346 +             end;
16347 +         end;
16348 +         else if RELATION in ("=") then do;
16349 +            if ^first.node then do;
16350 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16351 +            end;
16352 +            else do;
16353 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16354 +            end;
16355 +         end;
16356 +         else if RELATION in ("ISMISSING") then do;
16357 +            if ^first.node then do;
16358 +              string = " AND "|| strip(varname) || " equals Missing";
16359 +            end;
16360 +            else do;
16361 +              string = "if "|| strip(varname) ||" equals Missing";
16362 +            end;
16363 +         end;
16364 +         else if RELATION in ("ISNOTMISSING") then do;
16365 +            if ^first.node then do;
16366 +              string = " AND "|| strip(varname) || " equals All Values";
16367 +            end;
16368 +            else do;
16369 +              string = "if "|| strip(varname) ||" equals All Values";
16370 +            end;
16371 +         end;
16372 +         if ^missing(varname) then origvar = varname;
16373 +         oldnode=node;
16375 +      end;
16376 +      else do;
16377 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16378 +          if MISSING(CHARACTER_VALUE) then do;
16379 +           if  NUMERIC_VALUE ne .  then do;
16380 +            if ^MISSING(string) then
16381 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16382 +            else
16383 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16384 +           end;
16385 +          end;
16386 +          else do;
16387 +            if ^MISSING(string) then
16388 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16389 +            else
16390 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16391 +          end;
16393 +         end;
16394 +         else if RELATION in ("=") then do;
16395 +           string = strip(string)||", "||strip(character_value);
16396 +         end;
16397 +         else if RELATION in ("ISMISSING") then do;
16399 +         end;
16400 +         if ^missing(varname) then origvar = varname;
16401 +         oldnode=node;
16402 +      end;
16403 +      if last.varname then do;
16404 +         if RELATION in ("ISMISSING") then do;
16405 +           if ^first.varname then do;
16406 +             string = strip(string) || " or MISSING";
16407 +           end;
16408 +         end;
16409 +         put string;
16410 +         if ^missing(varname) then origvar = varname;
16411 +         oldnode=node;
16412 +      end;
16414 +      if last.node then do;
16415 +         put "then ";
16416 +         put " Tree Node Identifier   = " node;
16418 +         %if "&nprior_flag" ne "." %then %do;
16419 +           put " Number of Observations = " NPRIORS;
16420 +         %end;
16421 +         %else %do;
16422 +           put " Number of Observations = " N;
16423 +         %end;
16425 +         %if &numpred gt 0 %then %do;
16426 +           %do i=1 %to &numpred;
16427 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16428 +           %end;
16429 +         %end;
16431 +         put " ";
16432 +         if ^missing(varname) then origvar = varname;
16433 +         oldnode=node;
16434 +      end;
16436 +  run;
16438 +  proc datasets lib=work nolist;
16439 +    delete tempoutpath outnodes;
16440 +  run;
16442 +  %doendm:
16443 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE3.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: 1596892 kilobytes of physical memory.
NOTE: Will use 6616 out of 6616 training cases.
NOTE: Using memory pool with 146240512 bytes.
NOTE: Will not search for split on variable campus.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 10 times.
NOTE: Training used 2182800 bytes of work memory.
NOTE: The subtree sequence contains 82 subtrees. The largest has 117 nodes and 90 leaves.
NOTE: Using subtree with 117 nodes and 90 leaves.
NOTE: Using subtree with 117 nodes and 90 leaves.
NOTE: Created macro variable NLEAVES equal to 90.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 12 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_EMTREE has 2960 observations and 4 variables.
NOTE: The data set EMWS1.TREE3_OUTNODES has 117 observations and 16 variables.
NOTE: The data set EMWS1.TREE3_OUTPATH has 428 observations and 7 variables.
NOTE: The data set EMWS1.TREE3_OUTRULES has 771 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 82 observations and 18 variables.
NOTE: The data set EMWS1.TREE3_OUTSTATS has 702 observations and 4 variables.
NOTE: The data set EMWS1.TREE3_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE3_OUTTOPOLOGY has 117 observations and 5 variables.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\TREEFLOW.sas opened.
NOTE: External file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
 
 
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.98 seconds
      cpu time            0.43 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 6616 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.98 seconds
      cpu time            0.46 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 428 observations read from the data set EMWS1.TREE3_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 428 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 428 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 428 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 117 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.OUTNODES has 117 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 428 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 117 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 428 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 428 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 428 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:00,
      Create Time=21Apr2016:05:42:00
 
NOTE: 892 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 428 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16445
16446  *------------------------------------------------------------*;
16447  * End TRAIN: Tree3;
16448  *------------------------------------------------------------*;
 
16449  *------------------------------------------------------------*;
16450  * Close any missing semi colons;
16451  *------------------------------------------------------------*;
16452  ;
16453  ;
16454  ;
16455  ;
16456  quit;
16457  *------------------------------------------------------------*;
16458  * Close any unbalanced quotes;
16459  *------------------------------------------------------------*;
16460  /*; *"; *'; */
16461  ;
16462  run;
16463  quit;
16464  /* Reset EM Options */
16465  options formchar="|----|+|---+=|-/\<>*";
16466  options nocenter ls=256 ps=10000;
16467  goptions reset=all device=GIF NODISPLAY;
 
16468  proc sort data=WORK.EM_USER_REPORT;
16469  by ID VIEW;
16470  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 21, 2016
Time:                05:42:03
*------------------------------------------------------------*
16572  %let EMEXCEPTIONSTRING=;
16573  *------------------------------------------------------------*;
16574  * SCORE: Tree3;
16575  *------------------------------------------------------------*;
16576  %let EM_ACTION = SCORE;
16577  %let syscc = 0;
16578  %macro main;
16579
16580    %if %upcase(&EM_ACTION) = CREATE %then %do;
16581      filename temp catalog 'sashelp.emmodl.tree_create.source';
16582      %include temp;
16583      filename temp;
16584
16585      %em_tree_create;
16586    %end;
16587
16588     %else
16589     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16590
16591         filename temp catalog 'sashelp.emmodl.tree_train.source';
16592         %include temp;
16593         filename temp;
16594         %em_tree_train;
16595     %end;
16596
16597    %else
16598    %if %upcase(&EM_ACTION) = SCORE %then %do;
16599      filename temp catalog 'sashelp.emmodl.tree_score.source';
16600      %include temp;
16601      filename temp;
16602
16603      %em_tree_score;
16604
16605    %end;
16606
16607    %else
16608    %if %upcase(&EM_ACTION) = REPORT %then %do;
16609
16610         filename temp catalog 'sashelp.emmodl.tree_report.source';
16611         %include temp;
16612         filename temp;
16613
16614         %em_tree_report;
16615     %end;
16616
16617    %else
16618    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16619
16620         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16621         %include temp;
16622         filename temp;
16623         %EM_TREE_OPENTREEVIEWER;
16624
16625     %end;
16626
16627    %else
16628    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16629
16630         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16631         %include temp;
16632         filename temp;
16633         %EM_TREE_CLOSETREEVIEWER;
16634
16635     %end;
16636
16637
16638     %doendm:
16639  %mend main;
16640
16641  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16643 +%macro em_tree_score;
16645 +   /* determine if multiple targets will be processed */
16646 +   %let em_tree_multipleTargets=N;
16647 +   %let em_tree_numTarget=1;
16648 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16649 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16650 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16651 +         %let em_tree_multipleTargets=N;
16652 +      %end;
16653 +      %else %do;
16654 +         /* create macro array of targets  */
16655 +         data _null_;
16656 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16657 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16658 +           if eof then
16659 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16660 +        run;
16662 +        %if &em_tree_numTarget gt 1 %then %do;
16663 +           %let em_tree_multipleTargets=Y;
16664 +        %end;
16665 +      %end;
16666 +   %end;
16668 +   /* build flow and publish scoring code */
16669 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16670 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16672 +   filename treeflow "&EM_USER_TREEFLOW";
16673 +   filename treepub "&EM_USER_TREEPUBLISH";
16675 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16676 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16678 +   %em_copyfile(infref=treeflow, outfref=flowref);
16679 +   %em_copyfile(infref=treepub, outfref=pubref);
16681 +   filename treeflow;
16682 +   filename treepub;
16684 +   /* if priors are used, add code to generate unadjusted residuals in export */
16685 +   %let useAdjPriors = N;
16686 +   data _null_;
16687 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16688 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16689 +   run;
16690 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16691 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16692 +      %include temp;
16693 +      filename temp;
16695 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16696 +      filename adjref "&EM_USER_adjResidualCode";
16697 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16699 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16701 +      filename adjref;
16702 +   %end;
16704 +   /* LEAF */
16705 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16706 +      data _null_;
16707 +        file flowref mod;
16708 +        put 'drop _LEAF_;';
16709 +      run;
16711 +      data _null_;
16712 +        file pubref mod;
16713 +        put 'drop _LEAF_;';
16714 +      run;
16716 +   %end;
16718 +   filename flowref;
16719 +   filename pubref;
16721 +   /* em_metachange code */
16722 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16723 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16724 +   %end;
16726 +   /* variable selection based on importance stat    */
16727 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16728 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16729 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16730 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16731 +     %let obs = %sysfunc(fetch(&dsid));
16732 +     %do %while(&obs=0);
16733 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16734 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16735 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16736 +       %let obs = %sysfunc(fetch(&dsid));
16737 +     %end;
16738 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16739 +   %end;
16741 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16742 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16743 +    %let tree_pred_vars = ;
16744 +    %let tree_pred_lvl =;
16745 +    %let numpred= 0;
16747 +    data _null_;
16748 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16749 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16750 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16751 +     if eof then
16752 +       call symput('numpred', strip(put(_N_, BEST.)));
16753 +    run;
16754 +   %end;
16756 +   %if &numpred ne 0 %then %do;
16757 +    %do i=1 %to &numpred;
16758 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16759 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16760 +    %end;
16761 +   %end;
16763 +   /* determine if multiple targets will be processed */
16764 +   %let em_tree_multipleTargets=N;
16765 +   %let em_tree_numTarget=1;
16766 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16767 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16768 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16769 +         %let em_tree_multipleTargets=N;
16770 +      %end;
16771 +      %else %do;
16772 +        data _null_;
16773 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16774 +          if eof then
16775 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16776 +        run;
16778 +        %if &em_tree_numTarget gt 1 %then %do;
16779 +           %let em_tree_multipleTargets=Y;
16780 +        %end;
16781 +     %end;
16782 +   %end;
16784 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16785 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16787 +      /* variable importance */
16788 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16789 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16791 +         %let validexist=0;
16792 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16793 +           %let validexist=1;
16794 +         %end;
16796 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16797 +         /* and the columns may not be generated                                                                                 */
16798 +         %let em_tree_cvexists=;
16799 +         %let em_tree_surrexists=.;
16800 +         data _null_;
16801 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16802 +            if eof then do ;
16803 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16804 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16805 +            end;
16806 +         run;
16808 +         data &EM_USER_OUTIMPORT;
16809 +            set &EM_USER_OUTIMPORT;
16811 +            /* format columns based on Precison value specified */
16812 +            format importance 15.&EM_PROPERTY_PRECISION
16813 +                 %if &validexist %then %do;
16814 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16815 +                 %end;
16816 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16817 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16818 +                 %end;
16819 +            ;
16820 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16821 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16822 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16823 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16824 +                 %if "&em_tree_surrexists" ne "" %then %do;
16825 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16826 +                 %end;
16827 +                 %if &validexist %then %do;
16828 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16829 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16830 +                 %end;
16831 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16832 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16833 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16834 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16835 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16836 +                 %end;
16837 +            ;
16838 +         run;
16840 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16841 +      %end;
16842 +   %end;
16844 +   %doendm:
16845 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:03,
      Create Time=21Apr2016:05:42:03
 
NOTE: 759 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:03,
      Create Time=21Apr2016:05:42:03
 
NOTE: 754 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=27523,
      Last Modified=21Apr2016:05:42:03,
      Create Time=21Apr2016:05:42:03
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=27350,
      Last Modified=21Apr2016:05:42:03,
      Create Time=21Apr2016:05:42:03
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 12 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
16846
16847  *------------------------------------------------------------*;
16848  * End SCORE: Tree3;
16849  *------------------------------------------------------------*;
 
16850  proc sort data=WORK.EM_METACHANGE;
16851  by key uname;
16852  run;
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16853  filename x "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas";
16854  data _null_;
16855  file x;
16856  put 'if upcase(NAME) = "AGE" then do;';
16857  put 'ROLE = "REJECTED";';
16858  put 'end;';
16859  put 'else ';
16860  put 'if upcase(NAME) = "CAMPUS" then do;';
16861  put 'ROLE = "REJECTED";';
16862  put 'end;';
16863  put 'else ';
16864  put 'if upcase(NAME) = "DEPT" then do;';
16865  put 'ROLE = "REJECTED";';
16866  put 'end;';
16867  put 'else ';
16868  put 'if upcase(NAME) = "EMPLOYED" then do;';
16869  put 'ROLE = "REJECTED";';
16870  put 'end;';
16871  put 'else ';
16872  put 'if upcase(NAME) = "EXEMPT2" then do;';
16873  put 'ROLE = "REJECTED";';
16874  put 'end;';
16875  put 'else ';
16876  put 'if upcase(NAME) = "FTE" then do;';
16877  put 'ROLE = "REJECTED";';
16878  put 'end;';
16879  put 'else ';
16880  put 'if upcase(NAME) = "GENDER" then do;';
16881  put 'ROLE = "REJECTED";';
16882  put 'end;';
16883  put 'else ';
16884  put 'if upcase(NAME) = "POSITION" then do;';
16885  put 'ROLE = "REJECTED";';
16886  put 'end;';
16887  put 'else ';
16888  put 'if upcase(NAME) = "Q_TOTALSAL" then do;';
16889  put 'ROLE = "ASSESS";';
16890  put 'end;';
16891  put 'else ';
16892  put 'if upcase(NAME) = "STATUS" then do;';
16893  put 'ROLE = "REJECTED";';
16894  put 'end;';
16895  put 'else ';
16896  put 'if upcase(NAME) = "STSERVYR" then do;';
16897  put 'ROLE = "REJECTED";';
16898  put 'end;';
16899  put 'else ';
16900  put 'if upcase(NAME) = "_NODE_" then do;';
16901  put 'ROLE = "SEGMENT";';
16902  put 'LEVEL = "NOMINAL";';
16903  put 'end;';
16904  run;
 
NOTE: The file X is:
      Filename=C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=21Apr2016:05:42:04,
      Create Time=20Apr2016:22:49:28
 
NOTE: 48 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16905  filename x;
NOTE: Fileref X has been deassigned.
 
16906  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
16907  *------------------------------------------------------------*;
16908  * Tree3: Scoring DATA data;
16909  *------------------------------------------------------------*;
16910  data EMWS1.Tree3_TRAIN
16911  / view=EMWS1.Tree3_TRAIN
16912  ;
16913  set EMWS1.Part_TRAIN
16914  ;
16915  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
16916 +****************************************************************;
16917 +******             DECISION TREE SCORING CODE             ******;
16918 +****************************************************************;
16919 +
16920 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16921 +LENGTH _WARN_  $    4;
16922 +
16923 +******              LABELS FOR NEW VARIABLES              ******;
16924 +label _NODE_ = 'Node' ;
16925 +label _LEAF_ = 'Leaf' ;
16926 +label P_totalsal = 'Predicted: totalsal' ;
16927 +label V_totalsal = 'Validated: totalsal' ;
16928 +label R_totalsal = 'Residual: totalsal' ;
16929 +label _WARN_ = 'Warnings' ;
16930 +
16931 +
16932 +
16933 +******             ASSIGN OBSERVATION TO NODE             ******;
16934 +IF  NOT MISSING(nonstsal ) AND
16935 +                7959.5 <= nonstsal  AND
16936 +  nonstsal  <              26786.5 THEN DO;
16937 +  IF  NOT MISSING(statesal ) AND
16938 +    statesal  <                15906 THEN DO;
16939 +    IF  NOT MISSING(nonstsal ) AND
16940 +      nonstsal  <                25367 THEN DO;
16941 +      _NODE_  =                   75;
16942 +      _LEAF_  =                   35;
16943 +      P_totalsal  =     23068.4146341463;
16944 +      V_totalsal  =                22662;
16945 +      END;
16946 +    ELSE DO;
16947 +      _NODE_  =                   76;
16948 +      _LEAF_  =                   36;
16949 +      P_totalsal  =     27334.5348837209;
16950 +      V_totalsal  =     26263.3571428571;
16951 +      END;
16952 +    END;
16953 +  ELSE IF  NOT MISSING(statesal ) AND
16954 +                   49065 <= statesal  AND
16955 +    statesal  <                85460 THEN DO;
16956 +    _NODE_  =                   24;
16957 +    _LEAF_  =                   39;
16958 +    P_totalsal  =     82830.2948717948;
16959 +    V_totalsal  =          81943.09375;
16960 +    END;
16961 +  ELSE IF  NOT MISSING(statesal ) AND
16962 +                   85460 <= statesal  AND
16963 +    statesal  <             134216.5 THEN DO;
16964 +    _NODE_  =                   25;
16965 +    _LEAF_  =                   40;
16966 +    P_totalsal  =     125090.743589743;
16967 +    V_totalsal  =     124927.304347826;
16968 +    END;
16969 +  ELSE IF  NOT MISSING(statesal ) AND
16970 +                134216.5 <= statesal  THEN DO;
16971 +    _NODE_  =                   26;
16972 +    _LEAF_  =                   41;
16973 +    P_totalsal  =     200156.390243902;
16974 +    V_totalsal  =             200526.9;
16975 +    END;
16976 +  ELSE DO;
16977 +    IF  NOT MISSING(statesal ) AND
16978 +                     36361 <= statesal  THEN DO;
16979 +      _NODE_  =                   78;
16980 +      _LEAF_  =                   38;
16981 +      P_totalsal  =     58524.2857142857;
16982 +      V_totalsal  =     60014.2857142857;
16983 +      END;
16984 +    ELSE DO;
16985 +      _NODE_  =                   77;
16986 +      _LEAF_  =                   37;
16987 +      P_totalsal  =     44565.9066666666;
16988 +      V_totalsal  =     43145.8529411764;
16989 +      END;
16990 +    END;
16991 +  END;
16992 +ELSE IF  NOT MISSING(nonstsal ) AND
16993 +               26786.5 <= nonstsal  AND
16994 +  nonstsal  <                51797 THEN DO;
16995 +  IF  NOT MISSING(statesal ) AND
16996 +                 27607.5 <= statesal  AND
16997 +    statesal  <              60796.5 THEN DO;
16998 +    _NODE_  =                   28;
16999 +    _LEAF_  =                   53;
17000 +    P_totalsal  =     80460.7692307692;
17001 +    V_totalsal  =     85355.1538461538;
17002 +    END;
17003 +  ELSE IF  NOT MISSING(statesal ) AND
17004 +                 60796.5 <= statesal  AND
17005 +    statesal  <               117809 THEN DO;
17006 +    _NODE_  =                   29;
17007 +    _LEAF_  =                   54;
17008 +    P_totalsal  =     126801.807692307;
17009 +    V_totalsal  =             126895.4;
17010 +    END;
17011 +  ELSE IF  NOT MISSING(statesal ) AND
17012 +                  117809 <= statesal  THEN DO;
17013 +    _NODE_  =                   30;
17014 +    _LEAF_  =                   55;
17015 +    P_totalsal  =               199768;
17016 +    V_totalsal  =     223880.210526315;
17017 +    END;
17018 +  ELSE DO;
17019 +    IF  NOT MISSING(nonstsal ) AND
17020 +      nonstsal  <              30002.5 THEN DO;
17021 +      _NODE_  =                   79;
17022 +      _LEAF_  =                   42;
17023 +      P_totalsal  =     29660.3404255319;
17024 +      V_totalsal  =     29332.8157894736;
17025 +      END;
17026 +    ELSE IF  NOT MISSING(nonstsal ) AND
17027 +                   30002.5 <= nonstsal  AND
17028 +      nonstsal  <              32912.5 THEN DO;
17029 +      _NODE_  =                   80;
17030 +      _LEAF_  =                   43;
17031 +      P_totalsal  =     32646.8823529411;
17032 +      V_totalsal  =     32581.3269230769;
17033 +      END;
17034 +    ELSE IF  NOT MISSING(nonstsal ) AND
17035 +                   32912.5 <= nonstsal  AND
17036 +      nonstsal  <                35442 THEN DO;
17037 +      _NODE_  =                   81;
17038 +      _LEAF_  =                   44;
17039 +      P_totalsal  =      34749.993670886;
17040 +      V_totalsal  =     34296.7627118644;
17041 +      END;
17042 +    ELSE IF  NOT MISSING(nonstsal ) AND
17043 +                     35442 <= nonstsal  AND
17044 +      nonstsal  <              38155.5 THEN DO;
17045 +      _NODE_  =                   82;
17046 +      _LEAF_  =                   45;
17047 +      P_totalsal  =     37205.9365853658;
17048 +      V_totalsal  =      37600.884057971;
17049 +      END;
17050 +    ELSE IF  NOT MISSING(nonstsal ) AND
17051 +                   38155.5 <= nonstsal  AND
17052 +      nonstsal  <              39506.5 THEN DO;
17053 +      _NODE_  =                   83;
17054 +      _LEAF_  =                   46;
17055 +      P_totalsal  =     39013.6282051282;
17056 +      V_totalsal  =     38824.7727272727;
17057 +      END;
17058 +    ELSE IF  NOT MISSING(nonstsal ) AND
17059 +                     42793 <= nonstsal  AND
17060 +      nonstsal  <              45730.5 THEN DO;
17061 +      IF  NOT MISSING(nonstsal ) AND
17062 +        nonstsal  <              44018.5 THEN DO;
17063 +        _NODE_  =                   97;
17064 +        _LEAF_  =                   48;
17065 +        P_totalsal  =     43731.5058823529;
17066 +        V_totalsal  =     44168.4324324324;
17067 +        END;
17068 +      ELSE DO;
17069 +        _NODE_  =                   98;
17070 +        _LEAF_  =                   49;
17071 +        P_totalsal  =     45077.7786885245;
17072 +        V_totalsal  =     45933.7916666666;
17073 +        END;
17074 +      END;
17075 +    ELSE IF  NOT MISSING(nonstsal ) AND
17076 +                   45730.5 <= nonstsal  AND
17077 +      nonstsal  <                47558 THEN DO;
17078 +      _NODE_  =                   86;
17079 +      _LEAF_  =                   50;
17080 +      P_totalsal  =            46831.256;
17081 +      V_totalsal  =     47493.3191489361;
17082 +      END;
17083 +    ELSE IF  NOT MISSING(nonstsal ) AND
17084 +                     47558 <= nonstsal  AND
17085 +      nonstsal  <              50208.5 THEN DO;
17086 +      _NODE_  =                   87;
17087 +      _LEAF_  =                   51;
17088 +      P_totalsal  =     49519.0833333333;
17089 +      V_totalsal  =     49248.1666666666;
17090 +      END;
17091 +    ELSE IF  NOT MISSING(nonstsal ) AND
17092 +                   50208.5 <= nonstsal  THEN DO;
17093 +      _NODE_  =                   88;
17094 +      _LEAF_  =                   52;
17095 +      P_totalsal  =     51346.8932038835;
17096 +      V_totalsal  =     51338.8723404255;
17097 +      END;
17098 +    ELSE DO;
17099 +      _NODE_  =                   84;
17100 +      _LEAF_  =                   47;
17101 +      P_totalsal  =     41779.1944444444;
17102 +      V_totalsal  =     42223.2222222222;
17103 +      END;
17104 +    END;
17105 +  END;
17106 +ELSE IF  NOT MISSING(nonstsal ) AND
17107 +                 51797 <= nonstsal  AND
17108 +  nonstsal  <                70457 THEN DO;
17109 +  IF  NOT MISSING(statesal ) AND
17110 +                   51837 <= statesal  THEN DO;
17111 +    _NODE_  =                   32;
17112 +    _LEAF_  =                   67;
17113 +    P_totalsal  =     153876.069767441;
17114 +    V_totalsal  =     170139.576923076;
17115 +    END;
17116 +  ELSE DO;
17117 +    IF  NOT MISSING(statesal ) AND
17118 +                     10205 <= statesal  THEN DO;
17119 +      _NODE_  =                   90;
17120 +      _LEAF_  =                   66;
17121 +      P_totalsal  =     89068.1951219512;
17122 +      V_totalsal  =            86172.875;
17123 +      END;
17124 +    ELSE DO;
17125 +      IF  NOT MISSING(nonstsal ) AND
17126 +        nonstsal  <                52996 THEN DO;
17127 +        _NODE_  =                   99;
17128 +        _LEAF_  =                   56;
17129 +        P_totalsal  =     52729.8918918919;
17130 +        V_totalsal  =             52482.75;
17131 +        END;
17132 +      ELSE IF  NOT MISSING(nonstsal ) AND
17133 +                       52996 <= nonstsal  AND
17134 +        nonstsal  <              54987.5 THEN DO;
17135 +        _NODE_  =                  100;
17136 +        _LEAF_  =                   57;
17137 +        P_totalsal  =                53967;
17138 +        V_totalsal  =     53882.1764705882;
17139 +        END;
17140 +      ELSE IF  NOT MISSING(nonstsal ) AND
17141 +                     54987.5 <= nonstsal  AND
17142 +        nonstsal  <                56486 THEN DO;
17143 +        _NODE_  =                  101;
17144 +        _LEAF_  =                   58;
17145 +        P_totalsal  =           55653.4375;
17146 +        V_totalsal  =     55692.4137931034;
17147 +        END;
17148 +      ELSE IF  NOT MISSING(nonstsal ) AND
17149 +                       56486 <= nonstsal  AND
17150 +        nonstsal  <              58607.5 THEN DO;
17151 +        _NODE_  =                  102;
17152 +        _LEAF_  =                   59;
17153 +        P_totalsal  =     57490.9615384615;
17154 +        V_totalsal  =     57694.6756756756;
17155 +        END;
17156 +      ELSE IF  NOT MISSING(nonstsal ) AND
17157 +                     58607.5 <= nonstsal  AND
17158 +        nonstsal  <                60581 THEN DO;
17159 +        _NODE_  =                  103;
17160 +        _LEAF_  =                   60;
17161 +        P_totalsal  =     59667.3974358974;
17162 +        V_totalsal  =     59686.6470588235;
17163 +        END;
17164 +      ELSE IF  NOT MISSING(nonstsal ) AND
17165 +                     63456.5 <= nonstsal  AND
17166 +        nonstsal  <                65655 THEN DO;
17167 +        _NODE_  =                  105;
17168 +        _LEAF_  =                   63;
17169 +        P_totalsal  =     64527.9358974359;
17170 +        V_totalsal  =           64930.9375;
17171 +        END;
17172 +      ELSE IF  NOT MISSING(nonstsal ) AND
17173 +                       65655 <= nonstsal  AND
17174 +        nonstsal  <                67531 THEN DO;
17175 +        _NODE_  =                  106;
17176 +        _LEAF_  =                   64;
17177 +        P_totalsal  =     66650.9873417721;
17178 +        V_totalsal  =     66545.3636363636;
17179 +        END;
17180 +      ELSE IF  NOT MISSING(nonstsal ) AND
17181 +                       67531 <= nonstsal  THEN DO;
17182 +        _NODE_  =                  107;
17183 +        _LEAF_  =                   65;
17184 +        P_totalsal  =     69505.2235294117;
17185 +        V_totalsal  =                69243;
17186 +        END;
17187 +      ELSE DO;
17188 +        IF  NOT MISSING(nonstsal ) AND
17189 +          nonstsal  <                61572 THEN DO;
17190 +          _NODE_  =                  116;
17191 +          _LEAF_  =                   61;
17192 +          P_totalsal  =     61170.1111111111;
17193 +          V_totalsal  =     61061.5333333333;
17194 +          END;
17195 +        ELSE DO;
17196 +          _NODE_  =                  117;
17197 +          _LEAF_  =                   62;
17198 +          P_totalsal  =     62624.6944444444;
17199 +          V_totalsal  =              62469.1;
17200 +          END;
17201 +        END;
17202 +      END;
17203 +    END;
17204 +  END;
17205 +ELSE IF  NOT MISSING(nonstsal ) AND
17206 +                 70457 <= nonstsal  AND
17207 +  nonstsal  <              95900.5 THEN DO;
17208 +  IF  NOT MISSING(statesal ) AND
17209 +                 54317.5 <= statesal  THEN DO;
17210 +    _NODE_  =                   34;
17211 +    _LEAF_  =                   77;
17212 +    P_totalsal  =     183768.173913043;
17213 +    V_totalsal  =     198501.166666666;
17214 +    END;
17215 +  ELSE DO;
17216 +    IF  NOT MISSING(statesal ) AND
17217 +                     10823 <= statesal  THEN DO;
17218 +      _NODE_  =                   92;
17219 +      _LEAF_  =                   76;
17220 +      P_totalsal  =             110741.7;
17221 +      V_totalsal  =            110485.15;
17222 +      END;
17223 +    ELSE DO;
17224 +      IF  NOT MISSING(nonstsal ) AND
17225 +        nonstsal  <                72600 THEN DO;
17226 +        _NODE_  =                  108;
17227 +        _LEAF_  =                   68;
17228 +        P_totalsal  =     72030.0754716981;
17229 +        V_totalsal  =     71317.3478260869;
17230 +        END;
17231 +      ELSE IF  NOT MISSING(nonstsal ) AND
17232 +                       75556 <= nonstsal  AND
17233 +        nonstsal  <                78992 THEN DO;
17234 +        _NODE_  =                  110;
17235 +        _LEAF_  =                   70;
17236 +        P_totalsal  =     77606.1282051282;
17237 +        V_totalsal  =           77376.5625;
17238 +        END;
17239 +      ELSE IF  NOT MISSING(nonstsal ) AND
17240 +                       78992 <= nonstsal  AND
17241 +        nonstsal  <                80506 THEN DO;
17242 +        _NODE_  =                  111;
17243 +        _LEAF_  =                   71;
17244 +        P_totalsal  =            80025.825;
17245 +        V_totalsal  =            79747.875;
17246 +        END;
17247 +      ELSE IF  NOT MISSING(nonstsal ) AND
17248 +                       80506 <= nonstsal  AND
17249 +        nonstsal  <              83768.5 THEN DO;
17250 +        _NODE_  =                  112;
17251 +        _LEAF_  =                   72;
17252 +        P_totalsal  =              82305.5;
17253 +        V_totalsal  =     82647.3333333333;
17254 +        END;
17255 +      ELSE IF  NOT MISSING(nonstsal ) AND
17256 +                     83768.5 <= nonstsal  AND
17257 +        nonstsal  <                88770 THEN DO;
17258 +        _NODE_  =                  113;
17259 +        _LEAF_  =                   73;
17260 +        P_totalsal  =     86396.2435897436;
17261 +        V_totalsal  =     86042.1470588235;
17262 +        END;
17263 +      ELSE IF  NOT MISSING(nonstsal ) AND
17264 +                       88770 <= nonstsal  AND
17265 +        nonstsal  <              92549.5 THEN DO;
17266 +        _NODE_  =                  114;
17267 +        _LEAF_  =                   74;
17268 +        P_totalsal  =     90686.9615384615;
17269 +        V_totalsal  =             90521.12;
17270 +        END;
17271 +      ELSE IF  NOT MISSING(nonstsal ) AND
17272 +                     92549.5 <= nonstsal  THEN DO;
17273 +        _NODE_  =                  115;
17274 +        _LEAF_  =                   75;
17275 +        P_totalsal  =     94544.3846153846;
17276 +        V_totalsal  =     95027.2142857143;
17277 +        END;
17278 +      ELSE DO;
17279 +        _NODE_  =                  109;
17280 +        _LEAF_  =                   69;
17281 +        P_totalsal  =     74443.3717948718;
17282 +        V_totalsal  =     74648.0666666666;
17283 +        END;
17284 +      END;
17285 +    END;
17286 +  END;
17287 +ELSE IF  NOT MISSING(nonstsal ) AND
17288 +               95900.5 <= nonstsal  AND
17289 +  nonstsal  <               115051 THEN DO;
17290 +  IF  NOT MISSING(nonstsal ) AND
17291 +    nonstsal  <               102849 THEN DO;
17292 +    _NODE_  =                   35;
17293 +    _LEAF_  =                   78;
17294 +    P_totalsal  =     108507.506172839;
17295 +    V_totalsal  =             110875.2;
17296 +    END;
17297 +  ELSE DO;
17298 +    _NODE_  =                   36;
17299 +    _LEAF_  =                   79;
17300 +    P_totalsal  =               127176;
17301 +    V_totalsal  =     128875.069767441;
17302 +    END;
17303 +  END;
17304 +ELSE IF  NOT MISSING(nonstsal ) AND
17305 +                115051 <= nonstsal  AND
17306 +  nonstsal  <               180090 THEN DO;
17307 +  IF  NOT MISSING(statesal ) AND
17308 +                   14944 <= statesal  THEN DO;
17309 +    _NODE_  =                   38;
17310 +    _LEAF_  =                   84;
17311 +    P_totalsal  =     201597.469135802;
17312 +    V_totalsal  =     194628.918918918;
17313 +    END;
17314 +  ELSE DO;
17315 +    IF  NOT MISSING(nonstsal ) AND
17316 +      nonstsal  <             127467.5 THEN DO;
17317 +      _NODE_  =                   93;
17318 +      _LEAF_  =                   80;
17319 +      P_totalsal  =     122518.037735849;
17320 +      V_totalsal  =     122570.428571428;
17321 +      END;
17322 +    ELSE IF  NOT MISSING(nonstsal ) AND
17323 +                  147144.5 <= nonstsal  AND
17324 +      nonstsal  <             168130.5 THEN DO;
17325 +      _NODE_  =                   95;
17326 +      _LEAF_  =                   82;
17327 +      P_totalsal  =      158757.91025641;
17328 +      V_totalsal  =     157981.185185185;
17329 +      END;
17330 +    ELSE IF  NOT MISSING(nonstsal ) AND
17331 +                  168130.5 <= nonstsal  THEN DO;
17332 +      _NODE_  =                   96;
17333 +      _LEAF_  =                   83;
17334 +      P_totalsal  =      175840.43902439;
17335 +      V_totalsal  =     175610.823529411;
17336 +      END;
17337 +    ELSE DO;
17338 +      _NODE_  =                   94;
17339 +      _LEAF_  =                   81;
17340 +      P_totalsal  =     138160.102564102;
17341 +      V_totalsal  =          137587.1875;
17342 +      END;
17343 +    END;
17344 +  END;
17345 +ELSE IF  NOT MISSING(nonstsal ) AND
17346 +                180090 <= nonstsal  AND
17347 +  nonstsal  <             254978.5 THEN DO;
17348 +  IF  NOT MISSING(nonstsal ) AND
17349 +    nonstsal  <             194816.5 THEN DO;
17350 +    _NODE_  =                   39;
17351 +    _LEAF_  =                   85;
17352 +    P_totalsal  =     201038.382978723;
17353 +    V_totalsal  =               199390;
17354 +    END;
17355 +  ELSE IF  NOT MISSING(nonstsal ) AND
17356 +                194816.5 <= nonstsal  AND
17357 +    nonstsal  <             209437.5 THEN DO;
17358 +    _NODE_  =                   40;
17359 +    _LEAF_  =                   86;
17360 +    P_totalsal  =             209783.2;
17361 +    V_totalsal  =     209436.277777777;
17362 +    END;
17363 +  ELSE IF  NOT MISSING(nonstsal ) AND
17364 +                209437.5 <= nonstsal  AND
17365 +    nonstsal  <             226186.5 THEN DO;
17366 +    _NODE_  =                   41;
17367 +    _LEAF_  =                   87;
17368 +    P_totalsal  =     233720.761904761;
17369 +    V_totalsal  =            240252.65;
17370 +    END;
17371 +  ELSE DO;
17372 +    _NODE_  =                   42;
17373 +    _LEAF_  =                   88;
17374 +    P_totalsal  =     248026.803030303;
17375 +    V_totalsal  =           249788.625;
17376 +    END;
17377 +  END;
17378 +ELSE IF  NOT MISSING(nonstsal ) AND
17379 +              254978.5 <= nonstsal  AND
17380 +  nonstsal  <             319837.5 THEN DO;
17381 +  _NODE_  =                   10;
17382 +  _LEAF_  =                   89;
17383 +  P_totalsal  =     295589.682926829;
17384 +  V_totalsal  =     290507.363636363;
17385 +  END;
17386 +ELSE IF  NOT MISSING(nonstsal ) AND
17387 +              319837.5 <= nonstsal  THEN DO;
17388 +  _NODE_  =                   11;
17389 +  _LEAF_  =                   90;
17390 +  P_totalsal  =             430459.4;
17391 +  V_totalsal  =     417005.789473684;
17392 +  END;
17393 +ELSE DO;
17394 +  IF  NOT MISSING(statesal ) AND
17395 +    statesal  <                23640 THEN DO;
17396 +    IF  NOT MISSING(statesal ) AND
17397 +      statesal  <                14517 THEN DO;
17398 +      _NODE_  =                   43;
17399 +      _LEAF_  =                    1;
17400 +      P_totalsal  =               9340.7;
17401 +      V_totalsal  =              9291.48;
17402 +      END;
17403 +    ELSE DO;
17404 +      _NODE_  =                   44;
17405 +      _LEAF_  =                    2;
17406 +      P_totalsal  =     18778.4081632653;
17407 +      V_totalsal  =     18900.3666666666;
17408 +      END;
17409 +    END;
17410 +  ELSE IF  NOT MISSING(statesal ) AND
17411 +                   23640 <= statesal  AND
17412 +    statesal  <                32259 THEN DO;
17413 +    IF  NOT MISSING(statesal ) AND
17414 +                     27576 <= statesal  AND
17415 +      statesal  <                29005 THEN DO;
17416 +      _NODE_  =                   46;
17417 +      _LEAF_  =                    4;
17418 +      P_totalsal  =     28793.0930232558;
17419 +      V_totalsal  =              28399.7;
17420 +      END;
17421 +    ELSE IF  NOT MISSING(statesal ) AND
17422 +                     29005 <= statesal  THEN DO;
17423 +      _NODE_  =                   47;
17424 +      _LEAF_  =                    5;
17425 +      P_totalsal  =     30887.5512820512;
17426 +      V_totalsal  =     30838.6857142857;
17427 +      END;
17428 +    ELSE DO;
17429 +      _NODE_  =                   45;
17430 +      _LEAF_  =                    3;
17431 +      P_totalsal  =     26586.1349693251;
17432 +      V_totalsal  =             26462.65;
17433 +      END;
17434 +    END;
17435 +  ELSE IF  NOT MISSING(statesal ) AND
17436 +                 45650.5 <= statesal  AND
17437 +    statesal  <              59016.5 THEN DO;
17438 +    IF  NOT MISSING(statesal ) AND
17439 +      statesal  <              47405.5 THEN DO;
17440 +      _NODE_  =                   56;
17441 +      _LEAF_  =                   14;
17442 +      P_totalsal  =      46716.914893617;
17443 +      V_totalsal  =      46991.303030303;
17444 +      END;
17445 +    ELSE IF  NOT MISSING(statesal ) AND
17446 +                     49470 <= statesal  AND
17447 +      statesal  <                52034 THEN DO;
17448 +      _NODE_  =                   58;
17449 +      _LEAF_  =                   16;
17450 +      P_totalsal  =     51208.1898734177;
17451 +      V_totalsal  =     50894.7333333333;
17452 +      END;
17453 +    ELSE IF  NOT MISSING(statesal ) AND
17454 +                     52034 <= statesal  AND
17455 +      statesal  <              53886.5 THEN DO;
17456 +      _NODE_  =                   59;
17457 +      _LEAF_  =                   17;
17458 +      P_totalsal  =            53774.325;
17459 +      V_totalsal  =     53131.4736842105;
17460 +      END;
17461 +    ELSE IF  NOT MISSING(statesal ) AND
17462 +                   53886.5 <= statesal  AND
17463 +      statesal  <                57451 THEN DO;
17464 +      _NODE_  =                   60;
17465 +      _LEAF_  =                   18;
17466 +      P_totalsal  =     56976.4487179487;
17467 +      V_totalsal  =      56346.641025641;
17468 +      END;
17469 +    ELSE IF  NOT MISSING(statesal ) AND
17470 +                     57451 <= statesal  THEN DO;
17471 +      _NODE_  =                   61;
17472 +      _LEAF_  =                   19;
17473 +      P_totalsal  =     59281.1136363636;
17474 +      V_totalsal  =     58615.7272727272;
17475 +      END;
17476 +    ELSE DO;
17477 +      _NODE_  =                   57;
17478 +      _LEAF_  =                   15;
17479 +      P_totalsal  =     48956.7037037037;
17480 +      V_totalsal  =              48801.5;
17481 +      END;
17482 +    END;
17483 +  ELSE IF  NOT MISSING(statesal ) AND
17484 +                 59016.5 <= statesal  AND
17485 +    statesal  <                72450 THEN DO;
17486 +    IF  NOT MISSING(statesal ) AND
17487 +      statesal  <              62381.5 THEN DO;
17488 +      _NODE_  =                   62;
17489 +      _LEAF_  =                   20;
17490 +      P_totalsal  =         60716.953125;
17491 +      V_totalsal  =     60668.3913043478;
17492 +      END;
17493 +    ELSE IF  NOT MISSING(statesal ) AND
17494 +                     66339 <= statesal  AND
17495 +      statesal  <              70382.5 THEN DO;
17496 +      _NODE_  =                   64;
17497 +      _LEAF_  =                   22;
17498 +      P_totalsal  =     68910.8717948718;
17499 +      V_totalsal  =     69456.3571428571;
17500 +      END;
17501 +    ELSE IF  NOT MISSING(statesal ) AND
17502 +                   70382.5 <= statesal  THEN DO;
17503 +      _NODE_  =                   65;
17504 +      _LEAF_  =                   23;
17505 +      P_totalsal  =              71726.2;
17506 +      V_totalsal  =                71677;
17507 +      END;
17508 +    ELSE DO;
17509 +      _NODE_  =                   63;
17510 +      _LEAF_  =                   21;
17511 +      P_totalsal  =      64567.782051282;
17512 +      V_totalsal  =      64690.744680851;
17513 +      END;
17514 +    END;
17515 +  ELSE IF  NOT MISSING(statesal ) AND
17516 +                   72450 <= statesal  AND
17517 +    statesal  <                85976 THEN DO;
17518 +    IF  NOT MISSING(statesal ) AND
17519 +      statesal  <                74875 THEN DO;
17520 +      _NODE_  =                   66;
17521 +      _LEAF_  =                   24;
17522 +      P_totalsal  =            73999.825;
17523 +      V_totalsal  =     73990.7142857143;
17524 +      END;
17525 +    ELSE IF  NOT MISSING(statesal ) AND
17526 +                     74875 <= statesal  AND
17527 +      statesal  <                76825 THEN DO;
17528 +      _NODE_  =                   67;
17529 +      _LEAF_  =                   25;
17530 +      P_totalsal  =     75918.0727272727;
17531 +      V_totalsal  =             76147.75;
17532 +      END;
17533 +    ELSE IF  NOT MISSING(statesal ) AND
17534 +                     81804 <= statesal  THEN DO;
17535 +      _NODE_  =                   69;
17536 +      _LEAF_  =                   27;
17537 +      P_totalsal  =     84299.5409836065;
17538 +      V_totalsal  =     84580.2758620689;
17539 +      END;
17540 +    ELSE DO;
17541 +      _NODE_  =                   68;
17542 +      _LEAF_  =                   26;
17543 +      P_totalsal  =     79944.8354430379;
17544 +      V_totalsal  =     79243.1842105263;
17545 +      END;
17546 +    END;
17547 +  ELSE IF  NOT MISSING(statesal ) AND
17548 +                   85976 <= statesal  AND
17549 +    statesal  <               106097 THEN DO;
17550 +    IF  NOT MISSING(statesal ) AND
17551 +      statesal  <                89871 THEN DO;
17552 +      _NODE_  =                   70;
17553 +      _LEAF_  =                   28;
17554 +      P_totalsal  =             88603.75;
17555 +      V_totalsal  =     88720.3846153846;
17556 +      END;
17557 +    ELSE IF  NOT MISSING(statesal ) AND
17558 +                   96287.5 <= statesal  THEN DO;
17559 +      _NODE_  =                   72;
17560 +      _LEAF_  =                   30;
17561 +      P_totalsal  =     101598.911764705;
17562 +      V_totalsal  =     100679.238095238;
17563 +      END;
17564 +    ELSE DO;
17565 +      _NODE_  =                   71;
17566 +      _LEAF_  =                   29;
17567 +      P_totalsal  =     93173.0384615384;
17568 +      V_totalsal  =          93346.90625;
17569 +      END;
17570 +    END;
17571 +  ELSE IF  NOT MISSING(statesal ) AND
17572 +                  106097 <= statesal  AND
17573 +    statesal  <             128426.5 THEN DO;
17574 +    IF  NOT MISSING(statesal ) AND
17575 +                  116079.5 <= statesal  THEN DO;
17576 +      _NODE_  =                   74;
17577 +      _LEAF_  =                   32;
17578 +      P_totalsal  =     123124.837209302;
17579 +      V_totalsal  =               122048;
17580 +      END;
17581 +    ELSE DO;
17582 +      _NODE_  =                   73;
17583 +      _LEAF_  =                   31;
17584 +      P_totalsal  =     111279.364864864;
17585 +      V_totalsal  =     110914.058823529;
17586 +      END;
17587 +    END;
17588 +  ELSE IF  NOT MISSING(statesal ) AND
17589 +                128426.5 <= statesal  AND
17590 +    statesal  <               160454 THEN DO;
17591 +    _NODE_  =                   20;
17592 +    _LEAF_  =                   33;
17593 +    P_totalsal  =     143790.692307692;
17594 +    V_totalsal  =     142375.538461538;
17595 +    END;
17596 +  ELSE IF  NOT MISSING(statesal ) AND
17597 +                  160454 <= statesal  THEN DO;
17598 +    _NODE_  =                   21;
17599 +    _LEAF_  =                   34;
17600 +    P_totalsal  =     201690.156862745;
17601 +    V_totalsal  =               215049;
17602 +    END;
17603 +  ELSE DO;
17604 +    IF  NOT MISSING(statesal ) AND
17605 +      statesal  <                35298 THEN DO;
17606 +      _NODE_  =                   48;
17607 +      _LEAF_  =                    6;
17608 +      P_totalsal  =     34575.2571428571;
17609 +      V_totalsal  =                34988;
17610 +      END;
17611 +    ELSE IF  NOT MISSING(statesal ) AND
17612 +                     35298 <= statesal  AND
17613 +      statesal  <              37119.5 THEN DO;
17614 +      _NODE_  =                   49;
17615 +      _LEAF_  =                    7;
17616 +      P_totalsal  =     36653.8536585365;
17617 +      V_totalsal  =     37409.6206896551;
17618 +      END;
17619 +    ELSE IF  NOT MISSING(statesal ) AND
17620 +                   37119.5 <= statesal  AND
17621 +      statesal  <                38254 THEN DO;
17622 +      _NODE_  =                   50;
17623 +      _LEAF_  =                    8;
17624 +      P_totalsal  =             37993.75;
17625 +      V_totalsal  =     38384.2272727272;
17626 +      END;
17627 +    ELSE IF  NOT MISSING(statesal ) AND
17628 +                     38254 <= statesal  AND
17629 +      statesal  <                39394 THEN DO;
17630 +      _NODE_  =                   51;
17631 +      _LEAF_  =                    9;
17632 +      P_totalsal  =             39163.85;
17633 +      V_totalsal  =      39154.409090909;
17634 +      END;
17635 +    ELSE IF  NOT MISSING(statesal ) AND
17636 +                     41017 <= statesal  AND
17637 +      statesal  <              42620.5 THEN DO;
17638 +      _NODE_  =                   53;
17639 +      _LEAF_  =                   11;
17640 +      P_totalsal  =     42441.3846153846;
17641 +      V_totalsal  =     42088.5517241379;
17642 +      END;
17643 +    ELSE IF  NOT MISSING(statesal ) AND
17644 +                   42620.5 <= statesal  AND
17645 +      statesal  <                44338 THEN DO;
17646 +      _NODE_  =                   54;
17647 +      _LEAF_  =                   12;
17648 +      P_totalsal  =     44047.7325581395;
17649 +      V_totalsal  =     44212.8333333333;
17650 +      END;
17651 +    ELSE IF  NOT MISSING(statesal ) AND
17652 +                     44338 <= statesal  THEN DO;
17653 +      _NODE_  =                   55;
17654 +      _LEAF_  =                   13;
17655 +      P_totalsal  =     45200.5405405405;
17656 +      V_totalsal  =             45332.76;
17657 +      END;
17658 +    ELSE DO;
17659 +      _NODE_  =                   52;
17660 +      _LEAF_  =                   10;
17661 +      P_totalsal  =     40950.3218390804;
17662 +      V_totalsal  =     40552.1081081081;
17663 +      END;
17664 +    END;
17665 +  END;
17666 +
17667 +*****  RESIDUALS R_ *************;
17668 +IF MISSING( totalsal ) THEN R_totalsal  = .;
17669 +ELSE R_totalsal  = totalsal  - P_totalsal ;
17670 +
17671 +****************************************************************;
17672 +******          END OF DECISION TREE SCORING CODE         ******;
17673 +****************************************************************;
17674 +
17675 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17676  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
17677  quit;
17678  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17679  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
17680  *------------------------------------------------------------*;
17681  * Tree3: Scoring VALIDATE data;
17682  *------------------------------------------------------------*;
17683  data EMWS1.Tree3_VALIDATE
17684  / view=EMWS1.Tree3_VALIDATE
17685  ;
17686  set EMWS1.Part_VALIDATE
17687  ;
17688  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
17689 +****************************************************************;
17690 +******             DECISION TREE SCORING CODE             ******;
17691 +****************************************************************;
17692 +
17693 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17694 +LENGTH _WARN_  $    4;
17695 +
17696 +******              LABELS FOR NEW VARIABLES              ******;
17697 +label _NODE_ = 'Node' ;
17698 +label _LEAF_ = 'Leaf' ;
17699 +label P_totalsal = 'Predicted: totalsal' ;
17700 +label V_totalsal = 'Validated: totalsal' ;
17701 +label R_totalsal = 'Residual: totalsal' ;
17702 +label _WARN_ = 'Warnings' ;
17703 +
17704 +
17705 +
17706 +******             ASSIGN OBSERVATION TO NODE             ******;
17707 +IF  NOT MISSING(nonstsal ) AND
17708 +                7959.5 <= nonstsal  AND
17709 +  nonstsal  <              26786.5 THEN DO;
17710 +  IF  NOT MISSING(statesal ) AND
17711 +    statesal  <                15906 THEN DO;
17712 +    IF  NOT MISSING(nonstsal ) AND
17713 +      nonstsal  <                25367 THEN DO;
17714 +      _NODE_  =                   75;
17715 +      _LEAF_  =                   35;
17716 +      P_totalsal  =     23068.4146341463;
17717 +      V_totalsal  =                22662;
17718 +      END;
17719 +    ELSE DO;
17720 +      _NODE_  =                   76;
17721 +      _LEAF_  =                   36;
17722 +      P_totalsal  =     27334.5348837209;
17723 +      V_totalsal  =     26263.3571428571;
17724 +      END;
17725 +    END;
17726 +  ELSE IF  NOT MISSING(statesal ) AND
17727 +                   49065 <= statesal  AND
17728 +    statesal  <                85460 THEN DO;
17729 +    _NODE_  =                   24;
17730 +    _LEAF_  =                   39;
17731 +    P_totalsal  =     82830.2948717948;
17732 +    V_totalsal  =          81943.09375;
17733 +    END;
17734 +  ELSE IF  NOT MISSING(statesal ) AND
17735 +                   85460 <= statesal  AND
17736 +    statesal  <             134216.5 THEN DO;
17737 +    _NODE_  =                   25;
17738 +    _LEAF_  =                   40;
17739 +    P_totalsal  =     125090.743589743;
17740 +    V_totalsal  =     124927.304347826;
17741 +    END;
17742 +  ELSE IF  NOT MISSING(statesal ) AND
17743 +                134216.5 <= statesal  THEN DO;
17744 +    _NODE_  =                   26;
17745 +    _LEAF_  =                   41;
17746 +    P_totalsal  =     200156.390243902;
17747 +    V_totalsal  =             200526.9;
17748 +    END;
17749 +  ELSE DO;
17750 +    IF  NOT MISSING(statesal ) AND
17751 +                     36361 <= statesal  THEN DO;
17752 +      _NODE_  =                   78;
17753 +      _LEAF_  =                   38;
17754 +      P_totalsal  =     58524.2857142857;
17755 +      V_totalsal  =     60014.2857142857;
17756 +      END;
17757 +    ELSE DO;
17758 +      _NODE_  =                   77;
17759 +      _LEAF_  =                   37;
17760 +      P_totalsal  =     44565.9066666666;
17761 +      V_totalsal  =     43145.8529411764;
17762 +      END;
17763 +    END;
17764 +  END;
17765 +ELSE IF  NOT MISSING(nonstsal ) AND
17766 +               26786.5 <= nonstsal  AND
17767 +  nonstsal  <                51797 THEN DO;
17768 +  IF  NOT MISSING(statesal ) AND
17769 +                 27607.5 <= statesal  AND
17770 +    statesal  <              60796.5 THEN DO;
17771 +    _NODE_  =                   28;
17772 +    _LEAF_  =                   53;
17773 +    P_totalsal  =     80460.7692307692;
17774 +    V_totalsal  =     85355.1538461538;
17775 +    END;
17776 +  ELSE IF  NOT MISSING(statesal ) AND
17777 +                 60796.5 <= statesal  AND
17778 +    statesal  <               117809 THEN DO;
17779 +    _NODE_  =                   29;
17780 +    _LEAF_  =                   54;
17781 +    P_totalsal  =     126801.807692307;
17782 +    V_totalsal  =             126895.4;
17783 +    END;
17784 +  ELSE IF  NOT MISSING(statesal ) AND
17785 +                  117809 <= statesal  THEN DO;
17786 +    _NODE_  =                   30;
17787 +    _LEAF_  =                   55;
17788 +    P_totalsal  =               199768;
17789 +    V_totalsal  =     223880.210526315;
17790 +    END;
17791 +  ELSE DO;
17792 +    IF  NOT MISSING(nonstsal ) AND
17793 +      nonstsal  <              30002.5 THEN DO;
17794 +      _NODE_  =                   79;
17795 +      _LEAF_  =                   42;
17796 +      P_totalsal  =     29660.3404255319;
17797 +      V_totalsal  =     29332.8157894736;
17798 +      END;
17799 +    ELSE IF  NOT MISSING(nonstsal ) AND
17800 +                   30002.5 <= nonstsal  AND
17801 +      nonstsal  <              32912.5 THEN DO;
17802 +      _NODE_  =                   80;
17803 +      _LEAF_  =                   43;
17804 +      P_totalsal  =     32646.8823529411;
17805 +      V_totalsal  =     32581.3269230769;
17806 +      END;
17807 +    ELSE IF  NOT MISSING(nonstsal ) AND
17808 +                   32912.5 <= nonstsal  AND
17809 +      nonstsal  <                35442 THEN DO;
17810 +      _NODE_  =                   81;
17811 +      _LEAF_  =                   44;
17812 +      P_totalsal  =      34749.993670886;
17813 +      V_totalsal  =     34296.7627118644;
17814 +      END;
17815 +    ELSE IF  NOT MISSING(nonstsal ) AND
17816 +                     35442 <= nonstsal  AND
17817 +      nonstsal  <              38155.5 THEN DO;
17818 +      _NODE_  =                   82;
17819 +      _LEAF_  =                   45;
17820 +      P_totalsal  =     37205.9365853658;
17821 +      V_totalsal  =      37600.884057971;
17822 +      END;
17823 +    ELSE IF  NOT MISSING(nonstsal ) AND
17824 +                   38155.5 <= nonstsal  AND
17825 +      nonstsal  <              39506.5 THEN DO;
17826 +      _NODE_  =                   83;
17827 +      _LEAF_  =                   46;
17828 +      P_totalsal  =     39013.6282051282;
17829 +      V_totalsal  =     38824.7727272727;
17830 +      END;
17831 +    ELSE IF  NOT MISSING(nonstsal ) AND
17832 +                     42793 <= nonstsal  AND
17833 +      nonstsal  <              45730.5 THEN DO;
17834 +      IF  NOT MISSING(nonstsal ) AND
17835 +        nonstsal  <              44018.5 THEN DO;
17836 +        _NODE_  =                   97;
17837 +        _LEAF_  =                   48;
17838 +        P_totalsal  =     43731.5058823529;
17839 +        V_totalsal  =     44168.4324324324;
17840 +        END;
17841 +      ELSE DO;
17842 +        _NODE_  =                   98;
17843 +        _LEAF_  =                   49;
17844 +        P_totalsal  =     45077.7786885245;
17845 +        V_totalsal  =     45933.7916666666;
17846 +        END;
17847 +      END;
17848 +    ELSE IF  NOT MISSING(nonstsal ) AND
17849 +                   45730.5 <= nonstsal  AND
17850 +      nonstsal  <                47558 THEN DO;
17851 +      _NODE_  =                   86;
17852 +      _LEAF_  =                   50;
17853 +      P_totalsal  =            46831.256;
17854 +      V_totalsal  =     47493.3191489361;
17855 +      END;
17856 +    ELSE IF  NOT MISSING(nonstsal ) AND
17857 +                     47558 <= nonstsal  AND
17858 +      nonstsal  <              50208.5 THEN DO;
17859 +      _NODE_  =                   87;
17860 +      _LEAF_  =                   51;
17861 +      P_totalsal  =     49519.0833333333;
17862 +      V_totalsal  =     49248.1666666666;
17863 +      END;
17864 +    ELSE IF  NOT MISSING(nonstsal ) AND
17865 +                   50208.5 <= nonstsal  THEN DO;
17866 +      _NODE_  =                   88;
17867 +      _LEAF_  =                   52;
17868 +      P_totalsal  =     51346.8932038835;
17869 +      V_totalsal  =     51338.8723404255;
17870 +      END;
17871 +    ELSE DO;
17872 +      _NODE_  =                   84;
17873 +      _LEAF_  =                   47;
17874 +      P_totalsal  =     41779.1944444444;
17875 +      V_totalsal  =     42223.2222222222;
17876 +      END;
17877 +    END;
17878 +  END;
17879 +ELSE IF  NOT MISSING(nonstsal ) AND
17880 +                 51797 <= nonstsal  AND
17881 +  nonstsal  <                70457 THEN DO;
17882 +  IF  NOT MISSING(statesal ) AND
17883 +                   51837 <= statesal  THEN DO;
17884 +    _NODE_  =                   32;
17885 +    _LEAF_  =                   67;
17886 +    P_totalsal  =     153876.069767441;
17887 +    V_totalsal  =     170139.576923076;
17888 +    END;
17889 +  ELSE DO;
17890 +    IF  NOT MISSING(statesal ) AND
17891 +                     10205 <= statesal  THEN DO;
17892 +      _NODE_  =                   90;
17893 +      _LEAF_  =                   66;
17894 +      P_totalsal  =     89068.1951219512;
17895 +      V_totalsal  =            86172.875;
17896 +      END;
17897 +    ELSE DO;
17898 +      IF  NOT MISSING(nonstsal ) AND
17899 +        nonstsal  <                52996 THEN DO;
17900 +        _NODE_  =                   99;
17901 +        _LEAF_  =                   56;
17902 +        P_totalsal  =     52729.8918918919;
17903 +        V_totalsal  =             52482.75;
17904 +        END;
17905 +      ELSE IF  NOT MISSING(nonstsal ) AND
17906 +                       52996 <= nonstsal  AND
17907 +        nonstsal  <              54987.5 THEN DO;
17908 +        _NODE_  =                  100;
17909 +        _LEAF_  =                   57;
17910 +        P_totalsal  =                53967;
17911 +        V_totalsal  =     53882.1764705882;
17912 +        END;
17913 +      ELSE IF  NOT MISSING(nonstsal ) AND
17914 +                     54987.5 <= nonstsal  AND
17915 +        nonstsal  <                56486 THEN DO;
17916 +        _NODE_  =                  101;
17917 +        _LEAF_  =                   58;
17918 +        P_totalsal  =           55653.4375;
17919 +        V_totalsal  =     55692.4137931034;
17920 +        END;
17921 +      ELSE IF  NOT MISSING(nonstsal ) AND
17922 +                       56486 <= nonstsal  AND
17923 +        nonstsal  <              58607.5 THEN DO;
17924 +        _NODE_  =                  102;
17925 +        _LEAF_  =                   59;
17926 +        P_totalsal  =     57490.9615384615;
17927 +        V_totalsal  =     57694.6756756756;
17928 +        END;
17929 +      ELSE IF  NOT MISSING(nonstsal ) AND
17930 +                     58607.5 <= nonstsal  AND
17931 +        nonstsal  <                60581 THEN DO;
17932 +        _NODE_  =                  103;
17933 +        _LEAF_  =                   60;
17934 +        P_totalsal  =     59667.3974358974;
17935 +        V_totalsal  =     59686.6470588235;
17936 +        END;
17937 +      ELSE IF  NOT MISSING(nonstsal ) AND
17938 +                     63456.5 <= nonstsal  AND
17939 +        nonstsal  <                65655 THEN DO;
17940 +        _NODE_  =                  105;
17941 +        _LEAF_  =                   63;
17942 +        P_totalsal  =     64527.9358974359;
17943 +        V_totalsal  =           64930.9375;
17944 +        END;
17945 +      ELSE IF  NOT MISSING(nonstsal ) AND
17946 +                       65655 <= nonstsal  AND
17947 +        nonstsal  <                67531 THEN DO;
17948 +        _NODE_  =                  106;
17949 +        _LEAF_  =                   64;
17950 +        P_totalsal  =     66650.9873417721;
17951 +        V_totalsal  =     66545.3636363636;
17952 +        END;
17953 +      ELSE IF  NOT MISSING(nonstsal ) AND
17954 +                       67531 <= nonstsal  THEN DO;
17955 +        _NODE_  =                  107;
17956 +        _LEAF_  =                   65;
17957 +        P_totalsal  =     69505.2235294117;
17958 +        V_totalsal  =                69243;
17959 +        END;
17960 +      ELSE DO;
17961 +        IF  NOT MISSING(nonstsal ) AND
17962 +          nonstsal  <                61572 THEN DO;
17963 +          _NODE_  =                  116;
17964 +          _LEAF_  =                   61;
17965 +          P_totalsal  =     61170.1111111111;
17966 +          V_totalsal  =     61061.5333333333;
17967 +          END;
17968 +        ELSE DO;
17969 +          _NODE_  =                  117;
17970 +          _LEAF_  =                   62;
17971 +          P_totalsal  =     62624.6944444444;
17972 +          V_totalsal  =              62469.1;
17973 +          END;
17974 +        END;
17975 +      END;
17976 +    END;
17977 +  END;
17978 +ELSE IF  NOT MISSING(nonstsal ) AND
17979 +                 70457 <= nonstsal  AND
17980 +  nonstsal  <              95900.5 THEN DO;
17981 +  IF  NOT MISSING(statesal ) AND
17982 +                 54317.5 <= statesal  THEN DO;
17983 +    _NODE_  =                   34;
17984 +    _LEAF_  =                   77;
17985 +    P_totalsal  =     183768.173913043;
17986 +    V_totalsal  =     198501.166666666;
17987 +    END;
17988 +  ELSE DO;
17989 +    IF  NOT MISSING(statesal ) AND
17990 +                     10823 <= statesal  THEN DO;
17991 +      _NODE_  =                   92;
17992 +      _LEAF_  =                   76;
17993 +      P_totalsal  =             110741.7;
17994 +      V_totalsal  =            110485.15;
17995 +      END;
17996 +    ELSE DO;
17997 +      IF  NOT MISSING(nonstsal ) AND
17998 +        nonstsal  <                72600 THEN DO;
17999 +        _NODE_  =                  108;
18000 +        _LEAF_  =                   68;
18001 +        P_totalsal  =     72030.0754716981;
18002 +        V_totalsal  =     71317.3478260869;
18003 +        END;
18004 +      ELSE IF  NOT MISSING(nonstsal ) AND
18005 +                       75556 <= nonstsal  AND
18006 +        nonstsal  <                78992 THEN DO;
18007 +        _NODE_  =                  110;
18008 +        _LEAF_  =                   70;
18009 +        P_totalsal  =     77606.1282051282;
18010 +        V_totalsal  =           77376.5625;
18011 +        END;
18012 +      ELSE IF  NOT MISSING(nonstsal ) AND
18013 +                       78992 <= nonstsal  AND
18014 +        nonstsal  <                80506 THEN DO;
18015 +        _NODE_  =                  111;
18016 +        _LEAF_  =                   71;
18017 +        P_totalsal  =            80025.825;
18018 +        V_totalsal  =            79747.875;
18019 +        END;
18020 +      ELSE IF  NOT MISSING(nonstsal ) AND
18021 +                       80506 <= nonstsal  AND
18022 +        nonstsal  <              83768.5 THEN DO;
18023 +        _NODE_  =                  112;
18024 +        _LEAF_  =                   72;
18025 +        P_totalsal  =              82305.5;
18026 +        V_totalsal  =     82647.3333333333;
18027 +        END;
18028 +      ELSE IF  NOT MISSING(nonstsal ) AND
18029 +                     83768.5 <= nonstsal  AND
18030 +        nonstsal  <                88770 THEN DO;
18031 +        _NODE_  =                  113;
18032 +        _LEAF_  =                   73;
18033 +        P_totalsal  =     86396.2435897436;
18034 +        V_totalsal  =     86042.1470588235;
18035 +        END;
18036 +      ELSE IF  NOT MISSING(nonstsal ) AND
18037 +                       88770 <= nonstsal  AND
18038 +        nonstsal  <              92549.5 THEN DO;
18039 +        _NODE_  =                  114;
18040 +        _LEAF_  =                   74;
18041 +        P_totalsal  =     90686.9615384615;
18042 +        V_totalsal  =             90521.12;
18043 +        END;
18044 +      ELSE IF  NOT MISSING(nonstsal ) AND
18045 +                     92549.5 <= nonstsal  THEN DO;
18046 +        _NODE_  =                  115;
18047 +        _LEAF_  =                   75;
18048 +        P_totalsal  =     94544.3846153846;
18049 +        V_totalsal  =     95027.2142857143;
18050 +        END;
18051 +      ELSE DO;
18052 +        _NODE_  =                  109;
18053 +        _LEAF_  =                   69;
18054 +        P_totalsal  =     74443.3717948718;
18055 +        V_totalsal  =     74648.0666666666;
18056 +        END;
18057 +      END;
18058 +    END;
18059 +  END;
18060 +ELSE IF  NOT MISSING(nonstsal ) AND
18061 +               95900.5 <= nonstsal  AND
18062 +  nonstsal  <               115051 THEN DO;
18063 +  IF  NOT MISSING(nonstsal ) AND
18064 +    nonstsal  <               102849 THEN DO;
18065 +    _NODE_  =                   35;
18066 +    _LEAF_  =                   78;
18067 +    P_totalsal  =     108507.506172839;
18068 +    V_totalsal  =             110875.2;
18069 +    END;
18070 +  ELSE DO;
18071 +    _NODE_  =                   36;
18072 +    _LEAF_  =                   79;
18073 +    P_totalsal  =               127176;
18074 +    V_totalsal  =     128875.069767441;
18075 +    END;
18076 +  END;
18077 +ELSE IF  NOT MISSING(nonstsal ) AND
18078 +                115051 <= nonstsal  AND
18079 +  nonstsal  <               180090 THEN DO;
18080 +  IF  NOT MISSING(statesal ) AND
18081 +                   14944 <= statesal  THEN DO;
18082 +    _NODE_  =                   38;
18083 +    _LEAF_  =                   84;
18084 +    P_totalsal  =     201597.469135802;
18085 +    V_totalsal  =     194628.918918918;
18086 +    END;
18087 +  ELSE DO;
18088 +    IF  NOT MISSING(nonstsal ) AND
18089 +      nonstsal  <             127467.5 THEN DO;
18090 +      _NODE_  =                   93;
18091 +      _LEAF_  =                   80;
18092 +      P_totalsal  =     122518.037735849;
18093 +      V_totalsal  =     122570.428571428;
18094 +      END;
18095 +    ELSE IF  NOT MISSING(nonstsal ) AND
18096 +                  147144.5 <= nonstsal  AND
18097 +      nonstsal  <             168130.5 THEN DO;
18098 +      _NODE_  =                   95;
18099 +      _LEAF_  =                   82;
18100 +      P_totalsal  =      158757.91025641;
18101 +      V_totalsal  =     157981.185185185;
18102 +      END;
18103 +    ELSE IF  NOT MISSING(nonstsal ) AND
18104 +                  168130.5 <= nonstsal  THEN DO;
18105 +      _NODE_  =                   96;
18106 +      _LEAF_  =                   83;
18107 +      P_totalsal  =      175840.43902439;
18108 +      V_totalsal  =     175610.823529411;
18109 +      END;
18110 +    ELSE DO;
18111 +      _NODE_  =                   94;
18112 +      _LEAF_  =                   81;
18113 +      P_totalsal  =     138160.102564102;
18114 +      V_totalsal  =          137587.1875;
18115 +      END;
18116 +    END;
18117 +  END;
18118 +ELSE IF  NOT MISSING(nonstsal ) AND
18119 +                180090 <= nonstsal  AND
18120 +  nonstsal  <             254978.5 THEN DO;
18121 +  IF  NOT MISSING(nonstsal ) AND
18122 +    nonstsal  <             194816.5 THEN DO;
18123 +    _NODE_  =                   39;
18124 +    _LEAF_  =                   85;
18125 +    P_totalsal  =     201038.382978723;
18126 +    V_totalsal  =               199390;
18127 +    END;
18128 +  ELSE IF  NOT MISSING(nonstsal ) AND
18129 +                194816.5 <= nonstsal  AND
18130 +    nonstsal  <             209437.5 THEN DO;
18131 +    _NODE_  =                   40;
18132 +    _LEAF_  =                   86;
18133 +    P_totalsal  =             209783.2;
18134 +    V_totalsal  =     209436.277777777;
18135 +    END;
18136 +  ELSE IF  NOT MISSING(nonstsal ) AND
18137 +                209437.5 <= nonstsal  AND
18138 +    nonstsal  <             226186.5 THEN DO;
18139 +    _NODE_  =                   41;
18140 +    _LEAF_  =                   87;
18141 +    P_totalsal  =     233720.761904761;
18142 +    V_totalsal  =            240252.65;
18143 +    END;
18144 +  ELSE DO;
18145 +    _NODE_  =                   42;
18146 +    _LEAF_  =                   88;
18147 +    P_totalsal  =     248026.803030303;
18148 +    V_totalsal  =           249788.625;
18149 +    END;
18150 +  END;
18151 +ELSE IF  NOT MISSING(nonstsal ) AND
18152 +              254978.5 <= nonstsal  AND
18153 +  nonstsal  <             319837.5 THEN DO;
18154 +  _NODE_  =                   10;
18155 +  _LEAF_  =                   89;
18156 +  P_totalsal  =     295589.682926829;
18157 +  V_totalsal  =     290507.363636363;
18158 +  END;
18159 +ELSE IF  NOT MISSING(nonstsal ) AND
18160 +              319837.5 <= nonstsal  THEN DO;
18161 +  _NODE_  =                   11;
18162 +  _LEAF_  =                   90;
18163 +  P_totalsal  =             430459.4;
18164 +  V_totalsal  =     417005.789473684;
18165 +  END;
18166 +ELSE DO;
18167 +  IF  NOT MISSING(statesal ) AND
18168 +    statesal  <                23640 THEN DO;
18169 +    IF  NOT MISSING(statesal ) AND
18170 +      statesal  <                14517 THEN DO;
18171 +      _NODE_  =                   43;
18172 +      _LEAF_  =                    1;
18173 +      P_totalsal  =               9340.7;
18174 +      V_totalsal  =              9291.48;
18175 +      END;
18176 +    ELSE DO;
18177 +      _NODE_  =                   44;
18178 +      _LEAF_  =                    2;
18179 +      P_totalsal  =     18778.4081632653;
18180 +      V_totalsal  =     18900.3666666666;
18181 +      END;
18182 +    END;
18183 +  ELSE IF  NOT MISSING(statesal ) AND
18184 +                   23640 <= statesal  AND
18185 +    statesal  <                32259 THEN DO;
18186 +    IF  NOT MISSING(statesal ) AND
18187 +                     27576 <= statesal  AND
18188 +      statesal  <                29005 THEN DO;
18189 +      _NODE_  =                   46;
18190 +      _LEAF_  =                    4;
18191 +      P_totalsal  =     28793.0930232558;
18192 +      V_totalsal  =              28399.7;
18193 +      END;
18194 +    ELSE IF  NOT MISSING(statesal ) AND
18195 +                     29005 <= statesal  THEN DO;
18196 +      _NODE_  =                   47;
18197 +      _LEAF_  =                    5;
18198 +      P_totalsal  =     30887.5512820512;
18199 +      V_totalsal  =     30838.6857142857;
18200 +      END;
18201 +    ELSE DO;
18202 +      _NODE_  =                   45;
18203 +      _LEAF_  =                    3;
18204 +      P_totalsal  =     26586.1349693251;
18205 +      V_totalsal  =             26462.65;
18206 +      END;
18207 +    END;
18208 +  ELSE IF  NOT MISSING(statesal ) AND
18209 +                 45650.5 <= statesal  AND
18210 +    statesal  <              59016.5 THEN DO;
18211 +    IF  NOT MISSING(statesal ) AND
18212 +      statesal  <              47405.5 THEN DO;
18213 +      _NODE_  =                   56;
18214 +      _LEAF_  =                   14;
18215 +      P_totalsal  =      46716.914893617;
18216 +      V_totalsal  =      46991.303030303;
18217 +      END;
18218 +    ELSE IF  NOT MISSING(statesal ) AND
18219 +                     49470 <= statesal  AND
18220 +      statesal  <                52034 THEN DO;
18221 +      _NODE_  =                   58;
18222 +      _LEAF_  =                   16;
18223 +      P_totalsal  =     51208.1898734177;
18224 +      V_totalsal  =     50894.7333333333;
18225 +      END;
18226 +    ELSE IF  NOT MISSING(statesal ) AND
18227 +                     52034 <= statesal  AND
18228 +      statesal  <              53886.5 THEN DO;
18229 +      _NODE_  =                   59;
18230 +      _LEAF_  =                   17;
18231 +      P_totalsal  =            53774.325;
18232 +      V_totalsal  =     53131.4736842105;
18233 +      END;
18234 +    ELSE IF  NOT MISSING(statesal ) AND
18235 +                   53886.5 <= statesal  AND
18236 +      statesal  <                57451 THEN DO;
18237 +      _NODE_  =                   60;
18238 +      _LEAF_  =                   18;
18239 +      P_totalsal  =     56976.4487179487;
18240 +      V_totalsal  =      56346.641025641;
18241 +      END;
18242 +    ELSE IF  NOT MISSING(statesal ) AND
18243 +                     57451 <= statesal  THEN DO;
18244 +      _NODE_  =                   61;
18245 +      _LEAF_  =                   19;
18246 +      P_totalsal  =     59281.1136363636;
18247 +      V_totalsal  =     58615.7272727272;
18248 +      END;
18249 +    ELSE DO;
18250 +      _NODE_  =                   57;
18251 +      _LEAF_  =                   15;
18252 +      P_totalsal  =     48956.7037037037;
18253 +      V_totalsal  =              48801.5;
18254 +      END;
18255 +    END;
18256 +  ELSE IF  NOT MISSING(statesal ) AND
18257 +                 59016.5 <= statesal  AND
18258 +    statesal  <                72450 THEN DO;
18259 +    IF  NOT MISSING(statesal ) AND
18260 +      statesal  <              62381.5 THEN DO;
18261 +      _NODE_  =                   62;
18262 +      _LEAF_  =                   20;
18263 +      P_totalsal  =         60716.953125;
18264 +      V_totalsal  =     60668.3913043478;
18265 +      END;
18266 +    ELSE IF  NOT MISSING(statesal ) AND
18267 +                     66339 <= statesal  AND
18268 +      statesal  <              70382.5 THEN DO;
18269 +      _NODE_  =                   64;
18270 +      _LEAF_  =                   22;
18271 +      P_totalsal  =     68910.8717948718;
18272 +      V_totalsal  =     69456.3571428571;
18273 +      END;
18274 +    ELSE IF  NOT MISSING(statesal ) AND
18275 +                   70382.5 <= statesal  THEN DO;
18276 +      _NODE_  =                   65;
18277 +      _LEAF_  =                   23;
18278 +      P_totalsal  =              71726.2;
18279 +      V_totalsal  =                71677;
18280 +      END;
18281 +    ELSE DO;
18282 +      _NODE_  =                   63;
18283 +      _LEAF_  =                   21;
18284 +      P_totalsal  =      64567.782051282;
18285 +      V_totalsal  =      64690.744680851;
18286 +      END;
18287 +    END;
18288 +  ELSE IF  NOT MISSING(statesal ) AND
18289 +                   72450 <= statesal  AND
18290 +    statesal  <                85976 THEN DO;
18291 +    IF  NOT MISSING(statesal ) AND
18292 +      statesal  <                74875 THEN DO;
18293 +      _NODE_  =                   66;
18294 +      _LEAF_  =                   24;
18295 +      P_totalsal  =            73999.825;
18296 +      V_totalsal  =     73990.7142857143;
18297 +      END;
18298 +    ELSE IF  NOT MISSING(statesal ) AND
18299 +                     74875 <= statesal  AND
18300 +      statesal  <                76825 THEN DO;
18301 +      _NODE_  =                   67;
18302 +      _LEAF_  =                   25;
18303 +      P_totalsal  =     75918.0727272727;
18304 +      V_totalsal  =             76147.75;
18305 +      END;
18306 +    ELSE IF  NOT MISSING(statesal ) AND
18307 +                     81804 <= statesal  THEN DO;
18308 +      _NODE_  =                   69;
18309 +      _LEAF_  =                   27;
18310 +      P_totalsal  =     84299.5409836065;
18311 +      V_totalsal  =     84580.2758620689;
18312 +      END;
18313 +    ELSE DO;
18314 +      _NODE_  =                   68;
18315 +      _LEAF_  =                   26;
18316 +      P_totalsal  =     79944.8354430379;
18317 +      V_totalsal  =     79243.1842105263;
18318 +      END;
18319 +    END;
18320 +  ELSE IF  NOT MISSING(statesal ) AND
18321 +                   85976 <= statesal  AND
18322 +    statesal  <               106097 THEN DO;
18323 +    IF  NOT MISSING(statesal ) AND
18324 +      statesal  <                89871 THEN DO;
18325 +      _NODE_  =                   70;
18326 +      _LEAF_  =                   28;
18327 +      P_totalsal  =             88603.75;
18328 +      V_totalsal  =     88720.3846153846;
18329 +      END;
18330 +    ELSE IF  NOT MISSING(statesal ) AND
18331 +                   96287.5 <= statesal  THEN DO;
18332 +      _NODE_  =                   72;
18333 +      _LEAF_  =                   30;
18334 +      P_totalsal  =     101598.911764705;
18335 +      V_totalsal  =     100679.238095238;
18336 +      END;
18337 +    ELSE DO;
18338 +      _NODE_  =                   71;
18339 +      _LEAF_  =                   29;
18340 +      P_totalsal  =     93173.0384615384;
18341 +      V_totalsal  =          93346.90625;
18342 +      END;
18343 +    END;
18344 +  ELSE IF  NOT MISSING(statesal ) AND
18345 +                  106097 <= statesal  AND
18346 +    statesal  <             128426.5 THEN DO;
18347 +    IF  NOT MISSING(statesal ) AND
18348 +                  116079.5 <= statesal  THEN DO;
18349 +      _NODE_  =                   74;
18350 +      _LEAF_  =                   32;
18351 +      P_totalsal  =     123124.837209302;
18352 +      V_totalsal  =               122048;
18353 +      END;
18354 +    ELSE DO;
18355 +      _NODE_  =                   73;
18356 +      _LEAF_  =                   31;
18357 +      P_totalsal  =     111279.364864864;
18358 +      V_totalsal  =     110914.058823529;
18359 +      END;
18360 +    END;
18361 +  ELSE IF  NOT MISSING(statesal ) AND
18362 +                128426.5 <= statesal  AND
18363 +    statesal  <               160454 THEN DO;
18364 +    _NODE_  =                   20;
18365 +    _LEAF_  =                   33;
18366 +    P_totalsal  =     143790.692307692;
18367 +    V_totalsal  =     142375.538461538;
18368 +    END;
18369 +  ELSE IF  NOT MISSING(statesal ) AND
18370 +                  160454 <= statesal  THEN DO;
18371 +    _NODE_  =                   21;
18372 +    _LEAF_  =                   34;
18373 +    P_totalsal  =     201690.156862745;
18374 +    V_totalsal  =               215049;
18375 +    END;
18376 +  ELSE DO;
18377 +    IF  NOT MISSING(statesal ) AND
18378 +      statesal  <                35298 THEN DO;
18379 +      _NODE_  =                   48;
18380 +      _LEAF_  =                    6;
18381 +      P_totalsal  =     34575.2571428571;
18382 +      V_totalsal  =                34988;
18383 +      END;
18384 +    ELSE IF  NOT MISSING(statesal ) AND
18385 +                     35298 <= statesal  AND
18386 +      statesal  <              37119.5 THEN DO;
18387 +      _NODE_  =                   49;
18388 +      _LEAF_  =                    7;
18389 +      P_totalsal  =     36653.8536585365;
18390 +      V_totalsal  =     37409.6206896551;
18391 +      END;
18392 +    ELSE IF  NOT MISSING(statesal ) AND
18393 +                   37119.5 <= statesal  AND
18394 +      statesal  <                38254 THEN DO;
18395 +      _NODE_  =                   50;
18396 +      _LEAF_  =                    8;
18397 +      P_totalsal  =             37993.75;
18398 +      V_totalsal  =     38384.2272727272;
18399 +      END;
18400 +    ELSE IF  NOT MISSING(statesal ) AND
18401 +                     38254 <= statesal  AND
18402 +      statesal  <                39394 THEN DO;
18403 +      _NODE_  =                   51;
18404 +      _LEAF_  =                    9;
18405 +      P_totalsal  =             39163.85;
18406 +      V_totalsal  =      39154.409090909;
18407 +      END;
18408 +    ELSE IF  NOT MISSING(statesal ) AND
18409 +                     41017 <= statesal  AND
18410 +      statesal  <              42620.5 THEN DO;
18411 +      _NODE_  =                   53;
18412 +      _LEAF_  =                   11;
18413 +      P_totalsal  =     42441.3846153846;
18414 +      V_totalsal  =     42088.5517241379;
18415 +      END;
18416 +    ELSE IF  NOT MISSING(statesal ) AND
18417 +                   42620.5 <= statesal  AND
18418 +      statesal  <                44338 THEN DO;
18419 +      _NODE_  =                   54;
18420 +      _LEAF_  =                   12;
18421 +      P_totalsal  =     44047.7325581395;
18422 +      V_totalsal  =     44212.8333333333;
18423 +      END;
18424 +    ELSE IF  NOT MISSING(statesal ) AND
18425 +                     44338 <= statesal  THEN DO;
18426 +      _NODE_  =                   55;
18427 +      _LEAF_  =                   13;
18428 +      P_totalsal  =     45200.5405405405;
18429 +      V_totalsal  =             45332.76;
18430 +      END;
18431 +    ELSE DO;
18432 +      _NODE_  =                   52;
18433 +      _LEAF_  =                   10;
18434 +      P_totalsal  =     40950.3218390804;
18435 +      V_totalsal  =     40552.1081081081;
18436 +      END;
18437 +    END;
18438 +  END;
18439 +
18440 +*****  RESIDUALS R_ *************;
18441 +IF MISSING( totalsal ) THEN R_totalsal  = .;
18442 +ELSE R_totalsal  = totalsal  - P_totalsal ;
18443 +
18444 +****************************************************************;
18445 +******          END OF DECISION TREE SCORING CODE         ******;
18446 +****************************************************************;
18447 +
18448 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18449  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
18450  quit;
18451  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
18452  filename emflow "C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
18453  *------------------------------------------------------------*;
18454  * Tree3: Scoring TEST data;
18455  *------------------------------------------------------------*;
18456  data EMWS1.Tree3_TEST
18457  / view=EMWS1.Tree3_TEST
18458  ;
18459  set EMWS1.Part_TEST
18460  ;
18461  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Intern Three\Documents\Thi Duong\SPRING 16\BUS 458H\HW\458 FINAL PROJECT\UNC SALARY SYSTEM\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
18462 +****************************************************************;
18463 +******             DECISION TREE SCORING CODE             ******;
18464 +****************************************************************;
18465 +
18466 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
18467 +LENGTH _WARN_  $    4;
18468 +
18469 +******              LABELS FOR NEW VARIABLES              ******;
18470 +label _NODE_ = 'Node' ;
18471 +label _LEAF_ = 'Leaf' ;
18472 +label P_totalsal = 'Predicted: totalsal' ;
18473 +label V_totalsal = 'Validated: totalsal' ;
18474 +label R_totalsal = 'Residual: totalsal' ;
18475 +label _WARN_ = 'Warnings' ;
18476 +
18477 +
18478 +
18479 +******             ASSIGN OBSERVATION TO NODE             ******;
18480 +IF  NOT MISSING(nonstsal ) AND
18481 +                7959.5 <= nonstsal  AND
18482 +  nonstsal  <              26786.5 THEN DO;
18483 +  IF  NOT MISSING(statesal ) AND
18484 +    statesal  <                15906 THEN DO;
18485 +    IF  NOT MISSING(nonstsal ) AND
18486 +      nonstsal  <                25367 THEN DO;
18487 +      _NODE_  =                   75;
18488 +      _LEAF_  =                   35;
18489 +      P_totalsal  =     23068.4146341463;
18490 +      V_totalsal  =                22662;
18491 +      END;
18492 +    ELSE DO;
18493 +      _NODE_  =                   76;
18494 +      _LEAF_  =                   36;
18495 +      P_totalsal  =     27334.5348837209;
18496 +      V_totalsal  =     26263.3571428571;
18497 +      END;
18498 +    END;
18499 +  ELSE IF  NOT MISSING(statesal ) AND
18500 +                   49065 <= statesal  AND
18501 +    statesal  <                85460 THEN DO;
18502 +    _NODE_  =                   24;
18503 +    _LEAF_  =                   39;
18504 +    P_totalsal  =     82830.2948717948;
18505 +    V_totalsal  =          81943.09375;
18506 +    END;
18507 +  ELSE IF  NOT MISSING(statesal ) AND
18508 +                   85460 <= statesal  AND
18509 +    statesal  <             134216.5 THEN DO;
18510 +    _NODE_  =                   25;
18511 +    _LEAF_  =                   40;
18512 +    P_totalsal  =     125090.743589743;
18513 +    V_totalsal  =     124927.304347826;
18514 +    END;
18515 +  ELSE IF  NOT MISSING(statesal ) AND
18516 +                134216.5 <= statesal  THEN DO;
18517 +    _NODE_  =                   26;
18518 +    _LEAF_  =                   41;
18519 +    P_totalsal  =     200156.390243902;
18520 +    V_totalsal  =             200526.9;
18521 +    END;
18522 +  ELSE DO;
18523 +    IF  NOT MISSING(statesal ) AND
18524 +                     36361 <= statesal  THEN DO;
18525 +      _NODE_  =                   78;
18526 +      _LEAF_  =                   38;
18527 +      P_totalsal  =     58524.2857142857;
18528 +      V_totalsal  =     60014.2857142857;
18529 +      END;
18530 +    ELSE DO;
18531 +      _NODE_  =                   77;
18532 +      _LEAF_  =                   37;
18533 +      P_totalsal  =     44565.9066666666;
18534 +      V_totalsal  =     43145.8529411764;
18535 +      END;
18536 +    END;
18537 +  END;
18538 +ELSE IF  NOT MISSING(nonstsal ) AND
18539 +               26786.5 <= nonstsal  AND
18540 +  nonstsal  <                51797 THEN DO;
18541 +  IF  NOT MISSING(statesal ) AND
18542 +                 27607.5 <= statesal  AND
18543 +    statesal  <              60796.5 THEN DO;
18544 +    _NODE_  =                   28;
18545 +    _LEAF_  =                   53;
18546 +    P_totalsal  =     80460.7692307692;
18547 +    V_totalsal  =     85355.1538461538;
18548 +    END;
18549 +  ELSE IF  NOT MISSING(statesal ) AND
18550 +                 60796.5 <= statesal  AND
18551 +    statesal  <               117809 THEN DO;
18552 +    _NODE_  =                   29;
18553 +    _LEAF_  =                   54;
18554 +    P_totalsal  =     126801.807692307;
18555 +    V_totalsal  =             126895.4;
18556 +    END;
18557 +  ELSE IF  NOT MISSING(statesal ) AND
18558 +                  117809 <= statesal  THEN DO;
18559 +    _NODE_  =                   30;
18560 +    _LEAF_  =                   55;
18561 +    P_totalsal  =               199768;
18562 +    V_totalsal  =     223880.210526315;
18563 +    END;
18564 +  ELSE DO;
18565 +    IF  NOT MISSING(nonstsal ) AND
18566 +      nonstsal  <              30002.5 THEN DO;
18567 +      _NODE_  =                   79;
18568 +      _LEAF_  =                   42;
18569 +      P_totalsal  =     29660.3404255319;
18570 +      V_totalsal  =     29332.8157894736;
18571 +      END;
18572 +    ELSE IF  NOT MISSING(nonstsal ) AND
18573 +                   30002.5 <= nonstsal  AND
18574 +      nonstsal  <              32912.5 THEN DO;
18575 +      _NODE_  =                   80;
18576 +      _LEAF_  =                   43;
18577 +      P_totalsal  =     32646.8823529411;
18578 +      V_totalsal  =     32581.3269230769;
18579 +      END;
18580 +    ELSE IF  NOT MISSING(nonstsal ) AND
18581 +                   32912.5 <= nonstsal  AND
18582 +      nonstsal  <                35442 THEN DO;
18583 +      _NODE_  =                   81;
18584 +      _LEAF_  =                   44;
18585 +      P_totalsal  =      34749.993670886;
18586 +      V_totalsal  =     34296.7627118644;
18587 +      END;
18588 +    ELSE IF  NOT MISSING(nonstsal ) AND
18589 +                     35442 <= nonstsal  AND
18590 +      nonstsal  <              38155.5 THEN DO;
18591 +      _NODE_  =                   82;
18592 +      _LEAF_  =                   45;
18593 +      P_totalsal  =     37205.9365853658;
18594 +      V_totalsal  =      37600.884057971;
18595 +      END;
18596 +    ELSE IF  NOT MISSING(nonstsal ) AND
18597 +                   38155.5 <= nonstsal  AND
18598 +      nonstsal  <              39506.5 THEN DO;
18599 +      _NODE_  =                   83;
18600 +      _LEAF_  =                   46;
18601 +      P_totalsal  =     39013.6282051282;
18602 +      V_totalsal  =     38824.7727272727;
18603 +      END;
18604 +    ELSE IF  NOT MISSING(nonstsal ) AND
18605 +                     42793 <= nonstsal  AND
18606 +      nonstsal  <              45730.5 THEN DO;
18607 +      IF  NOT MISSING(nonstsal ) AND
18608 +        nonstsal  <              44018.5 THEN DO;
18609 +        _NODE_  =                   97;
18610 +        _LEAF_  =                   48;
18611 +        P_totalsal  =     43731.5058823529;
18612 +        V_totalsal  =     44168.4324324324;
18613 +        END;
18614 +      ELSE DO;
18615 +        _NODE_  =                   98;
18616 +        _LEAF_  =                   49;
18617 +        P_totalsal  =     45077.7786885245;
18618 +        V_totalsal  =     45933.7916666666;
18619 +        END;
18620 +      END;
18621 +    ELSE IF  NOT MISSING(nonstsal ) AND
18622 +                   45730.5 <= nonstsal  AND
18623 +      nonstsal  <                47558 THEN DO;
18624 +      _NODE_  =                   86;
18625 +      _LEAF_  =                   50;
18626 +      P_totalsal  =            46831.256;
18627 +      V_totalsal  =     47493.3191489361;
18628 +      END;
18629 +    ELSE IF  NOT MISSING(nonstsal ) AND
18630 +                     47558 <= nonstsal  AND
18631 +      nonstsal  <              50208.5 THEN DO;
18632 +      _NODE_  =                   87;
18633 +      _LEAF_  =                   51;
18634 +      P_totalsal  =     49519.0833333333;
18635 +      V_totalsal  =     49248.1666666666;
18636 +      END;
18637 +    ELSE IF  NOT MISSING(nonstsal ) AND
18638 +                   50208.5 <= nonstsal  THEN DO;
18639 +      _NODE_  =                   88;
18640 +      _LEAF_  =                   52;
18641 +      P_totalsal  =     51346.8932038835;
18642 +      V_totalsal  =     51338.8723404255;
18643 +      END;
18644 +    ELSE DO;
18645 +      _NODE_  =                   84;
18646 +      _LEAF_  =                   47;
18647 +      P_totalsal  =     41779.1944444444;
18648 +      V_totalsal  =     42223.2222222222;
18649 +      END;
18650 +    END;
18651 +  END;
18652 +ELSE IF  NOT MISSING(nonstsal ) AND
18653 +                 51797 <= nonstsal  AND
18654 +  nonstsal  <                70457 THEN DO;
18655 +  IF  NOT MISSING(statesal ) AND
18656 +                   51837 <= statesal  THEN DO;
18657 +    _NODE_  =                   32;
18658 +    _LEAF_  =                   67;
18659 +    P_totalsal  =     153876.069767441;
18660 +    V_totalsal  =     170139.576923076;
18661 +    END;
18662 +  ELSE DO;
18663 +    IF  NOT MISSING(statesal ) AND
18664 +                     10205 <= statesal  THEN DO;
18665 +      _NODE_  =                   90;
18666 +      _LEAF_  =                   66;
18667 +      P_totalsal  =     89068.1951219512;
18668 +      V_totalsal  =            86172.875;
18669 +      END;
18670 +    ELSE DO;
18671 +      IF  NOT MISSING(nonstsal ) AND
18672 +        nonstsal  <                52996 THEN DO;
18673 +        _NODE_  =                   99;
18674 +        _LEAF_  =                   56;
18675 +        P_totalsal  =     52729.8918918919;
18676 +        V_totalsal  =             52482.75;
18677 +        END;
18678 +      ELSE IF  NOT MISSING(nonstsal ) AND
18679 +                       52996 <= nonstsal  AND
18680 +        nonstsal  <              54987.5 THEN DO;
18681 +        _NODE_  =                  100;
18682 +        _LEAF_  =                   57;
18683 +        P_totalsal  =                53967;
18684 +        V_totalsal  =     53882.1764705882;
18685 +        END;
18686 +      ELSE IF  NOT MISSING(nonstsal ) AND
18687 +                     54987.5 <= nonstsal  AND
18688 +        nonstsal  <                56486 THEN DO;
18689 +        _NODE_  =                  101;
18690 +        _LEAF_  =                   58;
18691 +        P_totalsal  =           55653.4375;
18692 +        V_totalsal  =     55692.4137931034;
18693 +        END;
18694 +      ELSE IF  NOT MISSING(nonstsal ) AND
18695 +                       56486 <= nonstsal  AND
18696 +        nonstsal  <              58607.5 THEN DO;
18697 +        _NODE_  =                  102;
18698 +        _LEAF_  =                   59;
18699 +        P_totalsal  =     57490.9615384615;
18700 +        V_totalsal  =     57694.6756756756;
18701 +        END;
18702 +      ELSE IF  NOT MISSING(nonstsal ) AND
18703 +                     58607.5 <= nonstsal  AND
18704 +        nonstsal  <                60581 THEN DO;
18705 +        _NODE_  =                  103;
18706 +        _LEAF_  =                   60;
18707 +        P_totalsal  =     59667.3974358974;
18708 +        V_totalsal  =     59686.6470588235;
18709 +        END;
18710 +      ELSE IF  NOT MISSING(nonstsal ) AND
18711 +                     63456.5 <= nonstsal  AND
18712 +        nonstsal  <                65655 THEN DO;
18713 +        _NODE_  =                  105;
18714 +        _LEAF_  =                   63;
18715 +        P_totalsal  =     64527.9358974359;
18716 +        V_totalsal  =           64930.9375;
18717 +        END;
18718 +      ELSE IF  NOT MISSING(nonstsal ) AND
18719 +                       65655 <= nonstsal  AND
18720 +        nonstsal  <                67531 THEN DO;
18721 +        _NODE_  =                  106;
18722 +        _LEAF_  =                   64;
18723 +        P_totalsal  =     66650.9873417721;
18724 +        V_totalsal  =     66545.3636363636;
18725 +        END;
18726 +      ELSE IF  NOT MISSING(nonstsal ) AND
18727 +                       67531 <= nonstsal  THEN DO;
18728 +        _NODE_  =                  107;
18729 +        _LEAF_  =                   65;
18730 +        P_totalsal  =     69505.2235294117;
18731 +        V_totalsal  =                69243;
18732 +        END;
18733 +      ELSE DO;
18734 +        IF  NOT MISSING(nonstsal ) AND
18735 +          nonstsal  <                61572 THEN DO;
18736 +          _NODE_  =                  116;
18737 +          _LEAF_  =                   61;
18738 +          P_totalsal  =     61170.1111111111;
18739 +          V_totalsal  =     61061.5333333333;
18740 +          END;
18741 +        ELSE DO;
18742 +          _NODE_  =                  117;
18743 +          _LEAF_  =                   62;
18744 +          P_totalsal  =     62624.6944444444;
18745 +          V_totalsal  =              62469.1;
18746 +          END;
18747 +        END;
18748 +      END;
18749 +    END;
18750 +  END;
18751 +ELSE IF  NOT MISSING(nonstsal ) AND
18752 +                 70457 <= nonstsal  AND
18753 +  nonstsal  <              95900.5 THEN DO;
18754 +  IF  NOT MISSING(statesal ) AND
18755 +                 54317.5 <= statesal  THEN DO;
18756 +    _NODE_  =                   34;
18757 +    _LEAF_  =                   77;
18758 +    P_totalsal  =     183768.173913043;
18759 +    V_totalsal  =     198501.166666666;
18760 +    END;
18761 +  ELSE DO;
18762 +    IF  NOT MISSING(statesal ) AND
18763 +                     10823 <= statesal  THEN DO;
18764 +      _NODE_  =                   92;
18765 +      _LEAF_  =                   76;
18766 +      P_totalsal  =             110741.7;
18767 +      V_totalsal  =            110485.15;
18768 +      END;
18769 +    ELSE DO;
18770 +      IF  NOT MISSING(nonstsal ) AND
18771 +        nonstsal  <                72600 THEN DO;
18772 +        _NODE_  =                  108;
18773 +        _LEAF_  =                   68;
18774 +        P_totalsal  =     72030.0754716981;
18775 +        V_totalsal  =     71317.3478260869;
18776 +        END;
18777 +      ELSE IF  NOT MISSING(nonstsal ) AND
18778 +                       75556 <= nonstsal  AND
18779 +        nonstsal  <                78992 THEN DO;
18780 +        _NODE_  =                  110;
18781 +        _LEAF_  =                   70;
18782 +        P_totalsal  =     77606.1282051282;
18783 +        V_totalsal  =           77376.5625;
18784 +        END;
18785 +      ELSE IF  NOT MISSING(nonstsal ) AND
18786 +                       78992 <= nonstsal  AND
18787 +        nonstsal  <                80506 THEN DO;
18788 +        _NODE_  =                  111;
18789 +        _LEAF_  =                   71;
18790 +        P_totalsal  =            80025.825;
18791 +        V_totalsal  =            79747.875;
18792 +        END;
18793 +      ELSE IF  NOT MISSING(nonstsal ) AND
18794 +                       80506 <= nonstsal  AND
18795 +        nonstsal  <              83768.5 THEN DO;
18796 +        _NODE_  =                  112;
18797 +        _LEAF_  =                   72;
18798 +        P_totalsal  =              82305.5;
18799 +        V_totalsal  =     82647.3333333333;
18800 +        END;
18801 +      ELSE IF  NOT MISSING(nonstsal ) AND
18802 +                     83768.5 <= nonstsal  AND
18803 +        nonstsal  <                88770 THEN DO;
18804 +        _NODE_  =                  113;
18805 +        _LEAF_  =                   73;
18806 +        P_totalsal  =     86396.2435897436;
18807 +        V_totalsal  =     86042.1470588235;
18808 +        END;
18809 +      ELSE IF  NOT MISSING(nonstsal ) AND
18810 +                       88770 <= nonstsal  AND
18811 +        nonstsal  <              92549.5 THEN DO;
18812 +        _NODE_  =                  114;
18813 +        _LEAF_  =                   74;
18814 +        P_totalsal  =     90686.9615384615;
18815 +        V_totalsal  =             90521.12;
18816 +        END;
18817 +      ELSE IF  NOT MISSING(nonstsal ) AND
18818 +                     92549.5 <= nonstsal  THEN DO;
18819 +        _NODE_  =                  115;
18820 +        _LEAF_  =                   75;
18821 +        P_totalsal  =     94544.3846153846;
18822 +        V_totalsal  =     95027.2142857143;
18823 +        END;
18824 +      ELSE DO;
18825 +        _NODE_  =                  109;
18826 +        _LEAF_  =                   69;
18827 +        P_totalsal  =     74443.3717948718;
18828 +        V_totalsal  =     74648.0666666666;
18829 +        END;
18830 +      END;
18831 +    END;
18832 +  END;
18833 +ELSE IF  NOT MISSING(nonstsal ) AND
18834 +               95900.5 <= nonstsal  AND
18835 +  nonstsal  <               115051 THEN DO;
18836 +  IF  NOT MISSING(nonstsal ) AND
18837 +    nonstsal  <               102849 THEN DO;
18838 +    _NODE_  =                   35;
18839 +    _LEAF_  =                   78;
18840 +    P_totalsal  =     108507.506172839;
18841 +    V_totalsal  =             110875.2;
18842 +    END;
18843 +  ELSE DO;
18844 +    _NODE_  =                   36;
18845 +    _LEAF_  =                   79;
18846 +    P_totalsal  =               127176;
18847 +    V_totalsal  =     128875.069767441;
18848 +    END;
18849 +  END;
18850 +ELSE IF  NOT MISSING(nonstsal ) AND
18851 +                115051 <= nonstsal  AND
18852 +  nonstsal  <               180090 THEN DO;
18853 +  IF  NOT MISSING(statesal ) AND
18854 +                   14944 <= statesal  THEN DO;
18855 +    _NODE_  =                   38;
18856 +    _LEAF_  =                   84;
18857 +    P_totalsal  =     201597.469135802;
18858 +    V_totalsal  =     194628.918918918;
18859 +    END;
18860 +  ELSE DO;
18861 +    IF  NOT MISSING(nonstsal ) AND
18862 +      nonstsal  <             127467.5 THEN DO;
18863 +      _NODE_  =                   93;
18864 +      _LEAF_  =                   80;
18865 +      P_totalsal  =     122518.037735849;
18866 +      V_totalsal  =     122570.428571428;
18867 +      END;
18868 +    ELSE IF  NOT MISSING(nonstsal ) AND
18869 +                  147144.5 <= nonstsal  AND
18870 +      nonstsal  <             168130.5 THEN DO;
18871 +      _NODE_  =                   95;
18872 +      _LEAF_  =                   82;
18873 +      P_totalsal  =      158757.91025641;
18874 +      V_totalsal  =     157981.185185185;
18875 +      END;
18876 +    ELSE IF  NOT MISSING(nonstsal ) AND
18877 +                  168130.5 <= nonstsal  THEN DO;
18878 +      _NODE_  =                   96;
18879 +      _LEAF_  =                   83;
18880 +      P_totalsal  =      175840.43902439;
18881 +      V_totalsal  =     175610.823529411;
18882 +      END;
18883 +    ELSE DO;
18884 +      _NODE_  =                   94;
18885 +      _LEAF_  =                   81;
18886 +      P_totalsal  =     138160.102564102;
18887 +      V_totalsal  =          137587.1875;
18888 +      END;
18889 +    END;
18890 +  END;
18891 +ELSE IF  NOT MISSING(nonstsal ) AND
18892 +                180090 <= nonstsal  AND
18893 +  nonstsal  <             254978.5 THEN DO;
18894 +  IF  NOT MISSING(nonstsal ) AND
18895 +    nonstsal  <             194816.5 THEN DO;
18896 +    _NODE_  =                   39;
18897 +    _LEAF_  =                   85;
18898 +    P_totalsal  =     201038.382978723;
18899 +    V_totalsal  =               199390;
18900 +    END;
18901 +  ELSE IF  NOT MISSING(nonstsal ) AND
18902 +                194816.5 <= nonstsal  AND
18903 +    nonstsal  <             209437.5 THEN DO;
18904 +    _NODE_  =                   40;
18905 +    _LEAF_  =                   86;
18906 +    P_totalsal  =             209783.2;
18907 +    V_totalsal  =     209436.277777777;
18908 +    END;
18909 +  ELSE IF  NOT MISSING(nonstsal ) AND
18910 +                209437.5 <= nonstsal  AND
18911 +    nonstsal  <             226186.5 THEN DO;
18912 +    _NODE_  =                   41;
18913 +    _LEAF_  =                   87;
18914 +    P_totalsal  =     233720.761904761;
18915 +    V_totalsal  =            240252.65;
18916 +    END;
18917 +  ELSE DO;
18918 +    _NODE_  =                   42;
18919 +    _LEAF_  =                   88;
18920 +    P_totalsal  =     248026.803030303;
18921 +    V_totalsal  =           249788.625;
18922 +    END;
18923 +  END;
18924 +ELSE IF  NOT MISSING(nonstsal ) AND
18925 +              254978.5 <= nonstsal  AND
18926 +  nonstsal  <             319837.5 THEN DO;
18927 +  _NODE_  =                   10;
18928 +  _LEAF_  =                   89;
18929 +  P_totalsal  =     295589.682926829;
18930 +  V_totalsal  =     290507.363636363;
18931 +  END;
18932 +ELSE IF  NOT MISSING(nonstsal ) AND
18933 +              319837.5 <= nonstsal  THEN DO;
18934 +  _NODE_  =                   11;
18935 +  _LEAF_  =                   90;
18936 +  P_totalsal  =             430459.4;
18937 +  V_totalsal  =     417005.789473684;
18938 +  END;
18939 +ELSE DO;
18940 +  IF  NOT MISSING(statesal ) AND
18941 +    statesal  <                23640 THEN DO;
18942 +    IF  NOT MISSING(statesal ) AND
18943 +      statesal  <                14517 THEN DO;
18944 +      _NODE_  =                   43;
18945 +      _LEAF_  =                    1;
18946 +      P_totalsal  =               9340.7;
18947 +      V_totalsal  =              9291.48;
18948 +      END;
18949 +    ELSE DO;
18950 +      _NODE_  =                   44;
18951 +      _LEAF_  =                    2;
18952 +      P_totalsal  =     18778.4081632653;
18953 +      V_totalsal  =     18900.3666666666;
18954 +      END;
18955 +    END;
18956 +  ELSE IF  NOT MISSING(statesal ) AND
18957 +                   23640 <= statesal  AND
18958 +    statesal  <                32259 THEN DO;
18959 +    IF  NOT MISSING(statesal ) AND
18960 +                     27576 <= statesal  AND
18961 +      statesal  <                29005 THEN DO;
18962 +      _NODE_  =                   46;
18963 +      _LEAF_  =                    4;
18964 +      P_totalsal  =     28793.0930232558;
18965 +      V_totalsal  =              28399.7;
18966 +      END;
18967 +    ELSE IF  NOT MISSING(statesal ) AND
18968 +                     29005 <= statesal  THEN DO;
18969 +      _NODE_  =                   47;
18970 +      _LEAF_  =                    5;
18971 +      P_totalsal  =     30887.5512820512;
18972 +      V_totalsal  =     30838.6857142857;
18973 +      END;
18974 +    ELSE DO;
18975 +      _NODE_  =                   45;
18976 +      _LEAF_  =                    3;
18977 +      P_totalsal  =     26586.1349693251;
18978 +      V_totalsal  =             26462.65;
18979 +      END;
18980 +    END;
18981 +  ELSE IF  NOT MISSING(statesal ) AND
18982 +                 45650.5 <= statesal  AND
18983 +    statesal  <              59016.5 THEN DO;
18984 +    IF  NOT MISSING(statesal ) AND
18985 +      statesal  <              47405.5 THEN DO;
18986 +      _NODE_  =                   56;
18987 +      _LEAF_  =                   14;
18988 +      P_totalsal  =      46716.914893617;
18989 +      V_totalsal  =      46991.303030303;
18990 +      END;
18991 +    ELSE IF  NOT MISSING(statesal ) AND
18992 +                     49470 <= statesal  AND
18993 +      statesal  <                52034 THEN DO;
18994 +      _NODE_  =                   58;
18995 +      _LEAF_  =                   16;
18996 +      P_totalsal  =     51208.1898734177;
18997 +      V_totalsal  =     50894.7333333333;
18998 +      END;
18999 +    ELSE IF  NOT MISSING(statesal ) AND
19000 +                     52034 <= statesal  AND
19001 +      statesal  <              53886.5 THEN DO;
19002 +      _NODE_  =                   59;
19003 +      _LEAF_  =                   17;
19004 +      P_totalsal  =            53774.325;
19005 +      V_totalsal  =     53131.4736842105;
19006 +      END;
19007 +    ELSE IF  NOT MISSING(statesal ) AND
19008 +                   53886.5 <= statesal  AND
19009 +      statesal  <                57451 THEN DO;
19010 +      _NODE_  =                   60;
19011 +      _LEAF_  =                   18;
19012 +      P_totalsal  =     56976.4487179487;
19013 +      V_totalsal  =      56346.641025641;
19014 +      END;
19015 +    ELSE IF  NOT MISSING(statesal ) AND
19016 +                     57451 <= statesal  THEN DO;
19017 +      _NODE_  =                   61;
19018 +      _LEAF_  =                   19;
19019 +      P_totalsal  =     59281.1136363636;
19020 +      V_totalsal  =     58615.7272727272;
19021 +      END;
19022 +    ELSE DO;
19023 +      _NODE_  =                   57;
19024 +      _LEAF_  =                   15;
19025 +      P_totalsal  =     48956.7037037037;
19026 +      V_totalsal  =              48801.5;
19027 +      END;
19028 +    END;
19029 +  ELSE IF  NOT MISSING(statesal ) AND
19030 +                 59016.5 <= statesal  AND
19031 +    statesal  <                72450 THEN DO;
19032 +    IF  NOT MISSING(statesal ) AND
19033 +      statesal  <              62381.5 THEN DO;
19034 +      _NODE_  =                   62;
19035 +      _LEAF_  =                   20;
19036 +      P_totalsal  =         60716.953125;
19037 +      V_totalsal  =     60668.3913043478;
19038 +      END;
19039 +    ELSE IF  NOT MISSING(statesal ) AND
19040 +                     66339 <= statesal  AND
19041 +      statesal  <              70382.5 THEN DO;
19042 +      _NODE_  =                   64;
19043 +      _LEAF_  =                   22;
19044 +      P_totalsal  =     68910.8717948718;
19045 +      V_totalsal  =     69456.3571428571;
19046 +      END;
19047 +    ELSE IF  NOT MISSING(statesal ) AND
19048 +                   70382.5 <= statesal  THEN DO;
19049 +      _NODE_  =                   65;
19050 +      _LEAF_  =                   23;
19051 +      P_totalsal  =              71726.2;
19052 +      V_totalsal  =                71677;
19053 +      END;
19054 +    ELSE DO;
19055 +      _NODE_  =                   63;
19056 +      _LEAF_  =                   21;
19057 +      P_totalsal  =      64567.782051282;
19058 +      V_totalsal  =      64690.744680851;
19059 +      END;
19060 +    END;
19061 +  ELSE IF  NOT MISSING(statesal ) AND
19062 +                   72450 <= statesal  AND
19063 +    statesal  <                85976 THEN DO;
19064 +    IF  NOT MISSING(statesal ) AND
19065 +      statesal  <                74875 THEN DO;
19066 +      _NODE_  =                   66;
19067 +      _LEAF_  =                   24;
19068 +      P_totalsal  =            73999.825;
19069 +      V_totalsal  =     73990.7142857143;
19070 +      END;
19071 +    ELSE IF  NOT MISSING(statesal ) AND
19072 +                     74875 <= statesal  AND
19073 +      statesal  <                76825 THEN DO;
19074 +      _NODE_  =                   67;
19075 +      _LEAF_  =                   25;
19076 +      P_totalsal  =     75918.0727272727;
19077 +      V_totalsal  =             76147.75;
19078 +      END;
19079 +    ELSE IF  NOT MISSING(statesal ) AND
19080 +                     81804 <= statesal  THEN DO;
19081 +      _NODE_  =                   69;
19082 +      _LEAF_  =                   27;
19083 +      P_totalsal  =     84299.5409836065;
19084 +      V_totalsal  =     84580.2758620689;
19085 +      END;
19086 +    ELSE DO;
19087 +      _NODE_  =                   68;
19088 +      _LEAF_  =                   26;
19089 +      P_totalsal  =     79944.8354430379;
19090 +      V_totalsal  =     79243.1842105263;
19091 +      END;
19092 +    END;
19093 +  ELSE IF  NOT MISSING(statesal ) AND
19094 +                   85976 <= statesal  AND
19095 +    statesal  <               106097 THEN DO;
19096 +    IF  NOT MISSING(statesal ) AND
19097 +      statesal  <                89871 THEN DO;
19098 +      _NODE_  =                   70;
19099 +      _LEAF_  =                   28;
19100 +      P_totalsal  =             88603.75;
19101 +      V_totalsal  =     88720.3846153846;
19102 +      END;
19103 +    ELSE IF  NOT MISSING(statesal ) AND
19104 +                   96287.5 <= statesal  THEN DO;
19105 +      _NODE_  =                   72;
19106 +      _LEAF_  =                   30;
19107 +      P_totalsal  =     101598.911764705;
19108 +      V_totalsal  =     100679.238095238;
19109 +      END;
19110 +    ELSE DO;
19111 +      _NODE_  =                   71;
19112 +      _LEAF_  =                   29;
19113 +      P_totalsal  =     93173.0384615384;
19114 +      V_totalsal  =          93346.90625;
19115 +      END;
19116 +    END;
19117 +  ELSE IF  NOT MISSING(statesal ) AND
19118 +                  106097 <= statesal  AND
19119 +    statesal  <             128426.5 THEN DO;
19120 +    IF  NOT MISSING(statesal ) AND
19121 +                  116079.5 <= statesal  THEN DO;
19122 +      _NODE_  =                   74;
19123 +      _LEAF_  =                   32;
19124 +      P_totalsal  =     123124.837209302;
19125 +      V_totalsal  =               122048;
19126 +      END;
19127 +    ELSE DO;
19128 +      _NODE_  =                   73;
19129 +      _LEAF_  =                   31;
19130 +      P_totalsal  =     111279.364864864;
19131 +      V_totalsal  =     110914.058823529;
19132 +      END;
19133 +    END;
19134 +  ELSE IF  NOT MISSING(statesal ) AND
19135 +                128426.5 <= statesal  AND
19136 +    statesal  <               160454 THEN DO;
19137 +    _NODE_  =                   20;
19138 +    _LEAF_  =                   33;
19139 +    P_totalsal  =     143790.692307692;
19140 +    V_totalsal  =     142375.538461538;
19141 +    END;
19142 +  ELSE IF  NOT MISSING(statesal ) AND
19143 +                  160454 <= statesal  THEN DO;
19144 +    _NODE_  =                   21;
19145 +    _LEAF_  =                   34;
19146 +    P_totalsal  =     201690.156862745;
19147 +    V_totalsal  =               215049;
19148 +    END;
19149 +  ELSE DO;
19150 +    IF  NOT MISSING(statesal ) AND
19151 +      statesal  <                35298 THEN DO;
19152 +      _NODE_  =                   48;
19153 +      _LEAF_  =                    6;
19154 +      P_totalsal  =     34575.2571428571;
19155 +      V_totalsal  =                34988;
19156 +      END;
19157 +    ELSE IF  NOT MISSING(statesal ) AND
19158 +                     35298 <= statesal  AND
19159 +      statesal  <              37119.5 THEN DO;
19160 +      _NODE_  =                   49;
19161 +      _LEAF_  =                    7;
19162 +      P_totalsal  =     36653.8536585365;
19163 +      V_totalsal  =     37409.6206896551;
19164 +      END;
19165 +    ELSE IF  NOT MISSING(statesal ) AND
19166 +                   37119.5 <= statesal  AND
19167 +      statesal  <                38254 THEN DO;
19168 +      _NODE_  =                   50;
19169 +      _LEAF_  =                    8;
19170 +      P_totalsal  =             37993.75;
19171 +      V_totalsal  =     38384.2272727272;
19172 +      END;
19173 +    ELSE IF  NOT MISSING(statesal ) AND
19174 +                     38254 <= statesal  AND
19175 +      statesal  <                39394 THEN DO;
19176 +      _NODE_  =                   51;
19177 +      _LEAF_  =                    9;
19178 +      P_totalsal  =             39163.85;
19179 +      V_totalsal  =      39154.409090909;
19180 +      END;
19181 +    ELSE IF  NOT MISSING(statesal ) AND
19182 +                     41017 <= statesal  AND
19183 +      statesal  <              42620.5 THEN DO;
19184 +      _NODE_  =                   53;
19185 +      _LEAF_  =                   11;
19186 +      P_totalsal  =     42441.3846153846;
19187 +      V_totalsal  =     42088.5517241379;
19188 +      END;
19189 +    ELSE IF  NOT MISSING(statesal ) AND
19190 +                   42620.5 <= statesal  AND
19191 +      statesal  <                44338 THEN DO;
19192 +      _NODE_  =                   54;
19193 +      _LEAF_  =                   12;
19194 +      P_totalsal  =     44047.7325581395;
19195 +      V_totalsal  =     44212.8333333333;
19196 +      END;
19197 +    ELSE IF  NOT MISSING(statesal ) AND
19198 +                     44338 <= statesal  THEN DO;
19199 +      _NODE_  =                   55;
19200 +      _LEAF_  =                   13;
19201 +      P_totalsal  =     45200.5405405405;
19202 +      V_totalsal  =             45332.76;
19203 +      END;
19204 +    ELSE DO;
19205 +      _NODE_  =                   52;
19206 +      _LEAF_  =                   10;
19207 +      P_totalsal  =     40950.3218390804;
19208 +      V_totalsal  =     40552.1081081081;
19209 +      END;
19210 +    END;
19211 +  END;
19212 +
19213 +*****  RESIDUALS R_ *************;
19214 +IF MISSING( totalsal ) THEN R_totalsal  = .;
19215 +ELSE R_totalsal  = totalsal  - P_totalsal ;
19216 +
19217 +****************************************************************;
19218 +******          END OF DECISION TREE SCORING CODE         ******;
19219 +****************************************************************;
19220 +
19221 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
19222  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
19223  quit;
19224  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
19226  proc sort data=WORK.EM_USER_REPORT;
19227  by ID VIEW;
19228  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19229  *------------------------------------------------------------*;
19230  * Tree3: Computing metadata for TRAIN data;
19231  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
19626  data WORK.MODELTEMP_INFO;
19627  set EMWS1.Tree3_EMINFO;
19628  where DATA='Tree3' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
19629  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE3_EMINFO.
      WHERE (DATA='Tree3') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19630  data EMWS1.Tree3_EMINFO;
19631  length TARGET KEY $32 DATA $43;
19632  input TARGET KEY DATA $;
19633  cards;
 
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19637  run;
19638  data EMWS1.Tree3_EMINFO;
19639  set EMWS1.Tree3_EMINFO WORK.MODELTEMP_INFO;
19640  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19641  proc sort data = EMWS1.Tree3_EMINFO NOTHREADS;
19642  by TARGET KEY;
19643  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19644  proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
19645  by TARGET KEY;
19646  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19647  proc sort data = EMWS1.Tree3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
19648  by TARGET KEY;
19649  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19650  data EMWS1.Tree3_EMINFO;
19651  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
19652  by TARGET KEY;
19653  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19654  proc datasets lib=work nolist;
19655  delete TEMP_INFO SORTEDEMINFO;
19656  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
19657  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE3_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 21, 2016
Time:                05:42:06
*------------------------------------------------------------*
19681  data EMWS1.Tree3_EMOUTFIT;
19682  set EMWS1.Tree3_EMOUTFIT;
19683  length TargetLabel $200;
19684  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
19685  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19686  proc sort data=EMWS1.Tree3_EMREPORTFIT nothreads;
19687  by TARGET;
19688  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: The data set EMWS1.TREE3_EMREPORTFIT has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19689  %let _EMwarndup = 0;
19690  %let _EMtargetdup =;
19691  %let _EMASEtargetdup =;
19692  data _null_;
19693  set EMWS1.Tree3_EMOUTFIT;
19694  if .<_ASE_<0.000001 then do;
19695  call symput('_EMwarndup', '1');
19696  call symput('_EMtargetdup', target);
19697  call symput('_EMASEtargetdup', put(_ASE_, best.));
19698  end;
19699  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19700  %let EMEXCEPTIONSTRING=;
19701  *------------------------------------------------------------*;
19702  * REPORT: Tree3;
19703  *------------------------------------------------------------*;
19704  %let EM_ACTION = REPORT;
19705  %let syscc = 0;
19706  %macro main;
19707
19708    %if %upcase(&EM_ACTION) = CREATE %then %do;
19709      filename temp catalog 'sashelp.emmodl.tree_create.source';
19710      %include temp;
19711      filename temp;
19712
19713      %em_tree_create;
19714    %end;
19715
19716     %else
19717     %if %upcase(&EM_ACTION) = TRAIN %then %do;
19718
19719         filename temp catalog 'sashelp.emmodl.tree_train.source';
19720         %include temp;
19721         filename temp;
19722         %em_tree_train;
19723     %end;
19724
19725    %else
19726    %if %upcase(&EM_ACTION) = SCORE %then %do;
19727      filename temp catalog 'sashelp.emmodl.tree_score.source';
19728      %include temp;
19729      filename temp;
19730
19731      %em_tree_score;
19732
19733    %end;
19734
19735    %else
19736    %if %upcase(&EM_ACTION) = REPORT %then %do;
19737
19738         filename temp catalog 'sashelp.emmodl.tree_report.source';
19739         %include temp;
19740         filename temp;
19741
19742         %em_tree_report;
19743     %end;
19744
19745    %else
19746    %if %upcase(&EM_ACTION) = OPENINT %then %do;
19747
19748         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19749         %include temp;
19750         filename temp;
19751         %EM_TREE_OPENTREEVIEWER;
19752
19753     %end;
19754
19755    %else
19756    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19757
19758         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19759         %include temp;
19760         filename temp;
19761         %EM_TREE_CLOSETREEVIEWER;
19762
19763     %end;
19764
19765
19766     %doendm:
19767  %mend main;
19768
19769  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
19771 +%macro em_tree_makePlotDs( multipleTar= );
19773 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19774 +  %EM_GETNAME(key=OUTNODES, type=DATA);
19775 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19776 +  %EM_GETNAME(key=OUTRULES, type=DATA);
19778 +  /* determine if validation statistics will be displayed */
19779 +  %let validflag=N;
19780 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
19781 +    /* determine if validation data exists */
19782 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
19783 +      %let validflag=Y;
19784 +    %end;
19785 +  %end;
19787 +   /* retrieve name of decmeta even in presence of multiple targets */
19788 +   %let decmeta = ;
19789 +   %if &EM_DEC_DECMETA eq %then %do;
19790 +     data _Target;
19791 +       set &em_data_variableset;
19792 +       where ROLE='TARGET' and USE in('D', 'Y');
19793 +       keep NAME;
19794 +     run;
19795 +     proc sort data=_Target;
19796 +       by NAME;
19797 +     run;
19798 +     proc sort data=EM_TARGETDECINFO;
19799 +       by TARGET;
19800 +     run;
19801 +     data _Target;
19802 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
19803 +       by NAME;
19804 +       if _a then do;
19805 +         call symput('decmeta', trim(DECMETA));
19806 +       end;
19807 +     run;
19808 +     proc delete data=_Target;run;
19809 +   %end;
19810 +   %else %let decmeta = &EM_DEC_DECMETA;
19813 +  /* retrieve targetEvent from decmeta */
19814 +  %let targetEvent=;
19815 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19816 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19817 +      data _null_;
19818 +       set &DECMETA(where=(_TYPE_="TARGET"));
19819 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19820 +      run;
19821 +    %end;
19822 +  %end;
19824 +  /* retrieve predicted var for targetEvent from decmeta */
19825 +  %let predTarget=;
19826 +  %let predLvl=;
19827 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19828 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19829 +      data _null_;
19830 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
19831 +       call symput('predTarget', strip(VARIABLE));
19832 +       call symput('predLvl', strip(LEVEL));
19833 +      run;
19834 +    %end;
19835 +  %end;
19836 +  %else %do;
19837 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19838 +      data _null_;
19839 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
19840 +       call symput('predTarget', strip(VARIABLE));
19841 +      run;
19842 +    %end;
19843 +  %end;
19845 +  /* create BelowText value */
19846 +  data belowtext;
19847 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
19848 +    keep node belowtext;
19849 +  run;
19851 +  /* relace belowtext with variable label if it exists */
19852 +  data belowtext2;
19853 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
19854 +    keep node belowtextlbl;
19855 +  run;
19857 +  proc sort data=belowtext; by node; run;
19858 +  proc sort data=belowtext2; by node; run;
19860 +  data belowtext;
19861 +    merge belowtext belowtext2(in=_a);
19862 +    by node;
19863 +    if _a then belowtext=belowtextlbl;
19864 +    keep node belowtext;
19865 +  run;
19867 +  /* create AboveText value */
19868 +  data abovetext;
19869 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
19870 +  run;
19871 +  proc sort data=abovetext; by node numeric_value; run;
19873 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
19874 +  data abovetext;
19875 +    set abovetext(rename=(node=parent));
19876 +    by parent numeric_value;
19877 +    retain abovetext tempstring flag branch origval origchar ;
19878 +    length abovetext $256;
19879 +    length tempstring origchar $64;
19881 +    if STAT in ("INTERVAL", "ORDINAL") then do;
19882 +      if first.parent then do;
19883 +        if missing(character_value) then do;
19884 +          numeric_value = round(numeric_value, &sp_precision);
19885 +          abovetext = "< "||strip(NUMERIC_VALUE);
19886 +          branch = 1;
19887 +          origval = numeric_value;
19888 +          output;
19889 +        end;
19890 +        else do;
19891 +          abovetext = "< "||strip(CHARACTER_VALUE);
19892 +          branch = 1;
19893 +          origchar = character_value;
19894 +          output;
19895 +        end;
19897 +        if first.parent AND last.parent then do;
19898 +          if missing(character_value) then do;
19899 +            numeric_value = round(numeric_value, &sp_precision);
19900 +            branch = branch + 1;
19901 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19902 +            output;
19903 +          end;
19904 +          else do;
19905 +            branch = branch + 1;
19906 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19907 +            output;
19908 +          end;
19909 +        end;
19910 +      end;
19911 +      else if last.parent then do;
19912 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19913 +          if missing(character_value) then do;
19914 +            numeric_value = round(numeric_value, &sp_precision);
19915 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19916 +          end;
19917 +          else do;
19918 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19919 +          end;
19920 +          branch = branch + 1;
19921 +          output;
19923 +          if missing(character_value) then do;
19924 +            numeric_value = round(numeric_value, &sp_precision);
19925 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19926 +          end;
19927 +          else do;
19928 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19929 +          end;
19930 +          branch = branch + 1;
19931 +          output;
19932 +        end;
19933 +        else do;
19934 +          if missing(character_value) then do;
19935 +            numeric_value = round(numeric_value, &sp_precision);
19936 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19937 +          end;
19938 +          else do;
19939 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19940 +          end;
19941 +          branch = branch + 1;
19942 +          output;
19943 +        end;
19944 +      end;
19945 +      else do;
19946 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19947 +          if missing(character_value) then do;
19948 +            numeric_value = round(numeric_value,&sp_precision);
19949 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19950 +            origval = numeric_value;
19951 +          end;
19952 +          else do;
19953 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19954 +            origchar = character_value;
19955 +          end;
19956 +          branch = branch + 1;
19957 +          output;
19959 +        end;
19960 +        else do;
19961 +          if missing(character_value) then do;
19962 +            numeric_value = round(numeric_value, &sp_precision);
19963 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19964 +            origval = numeric_value;
19965 +          end;
19966 +          else do;
19967 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19968 +            origval = character_value;
19969 +          end;
19970 +          branch = branch + 1;
19971 +          output;
19972 +        end;
19973 +      end;
19974 +    end;
19975 +    else do;
19976 +       if first.numeric_value then do;
19977 +         flag = 0;
19978 +         abovetext = strip(CHARACTER_VALUE);
19979 +         branch = numeric_value;
19980 +         if first.numeric_value AND last.numeric_value then do;
19981 +           output;
19982 +         end;
19983 +       end;
19984 +       else if last.numeric_value then do;
19985 +         if flag=0 then do;
19986 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19987 +           length = length(strip(tempstring));
19988 +           if length < 32 then do;
19989 +             abovetext = strip(tempstring);
19990 +           end;
19991 +           else do;
19992 +             abovetext = strip(abovetext)||", ...";
19993 +             flag = 1;
19994 +           end;
19995 +         end;
19996 +         branch = numeric_value;
19997 +         output;
19998 +       end;
19999 +       else do;
20000 +         if flag=0 then do;
20001 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20002 +           length = length(strip(tempstring));
20003 +           if length < 32 then do;
20004 +             abovetext = strip(tempstring);
20005 +           end;
20006 +           else do;
20007 +             abovetext = strip(abovetext)||", ...";
20008 +             flag=1;
20009 +           end;
20010 +         end;
20011 +         branch = numeric_value;
20012 +       end;
20013 +    end;
20014 +    keep parent branch abovetext;
20015 +  run;
20017 +  /* MIssing value to abovetext */
20018 +  data tempmissing;
20019 +    set &EM_USER_OUTRULES;
20020 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
20021 +    rename node=parent numeric_value=branch character_value=misschar;
20022 +  run;
20025 +  proc sort data=abovetext; by parent branch; run;
20026 +  proc sort data=tempmissing; by parent branch; run;
20027 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
20029 +  data tempoutnodes;
20030 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
20031 +    by parent branch;
20032 +    length traintotal validtotal 8;
20033 +    retain traintotal validtotal;
20035 +    if _a then do;
20036 +      if ^MISSING(abovetext) then do;
20037 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
20038 +      end;
20039 +      else do;
20040 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
20041 +      end;
20042 +    end;
20043 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
20045 +    if node=1 then do;
20046 +      traintotal = N;
20047 +      validtotal=VN;
20048 +    end;
20050 +    drop role rank stat misschar belowtext;
20051 +  run;
20052 +  proc sort data=tempoutnodes; by node; run;
20053 +  proc sort data=belowtext; by node; run;
20055 +  data tempoutnodes;
20056 +    merge tempoutnodes belowtext;
20057 +    by node;
20059 +  run;
20061 +  /* determine if adjusted counts exists; if so, use these vs true counts */
20062 +  %let adjusted = N;
20063 +  %let npriors = 0;
20064 +  data _null_ ;
20065 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
20066 +    if eof then do ;
20067 +      call symput("npriors" , strip(put(_N_,best.))) ;
20068 +    end;
20069 +  run;
20070 +  %if &npriors gt 0 %then %let adjusted=Y;
20073 +  /* create a table with targetUsed and targetLevel columns for each node */
20074 +  data temptarmeta;
20075 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
20076 +    %if &multipleTar eq N %then %do;
20077 +      AND USE in ('D', 'Y')
20078 +    %end;
20079 +    ));
20080 +    length TARGET $32;
20081 +    Target=name;
20082 +    keep target level;
20083 +  run;
20085 +  %if &multipleTar eq Y %then %do;
20086 +    data temptargetused;
20087 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
20088 +      keep node target;
20089 +    run;
20090 +    proc sort data=temptargetused; by target; run;
20091 +    proc sort data=temptarmeta; by target; run;
20092 +    data temptargetused;
20093 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
20094 +      by target;
20095 +      if _a and _b;
20096 +    run;
20097 +  %end;
20098 +  %else %do;
20099 +    data temptargetused;
20100 +      set &EM_USER_OUTSTATS;
20101 +      length target $32 tarlevel $10;
20102 +      target="%EM_TARGET";
20103 +      tarlevel="%EM_TARGET_LEVEL";
20104 +      keep node target tarlevel;
20105 +    run;
20106 +    proc sort data=temptargetused nodupkey; by node; run;
20107 +  %end;
20109 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
20110 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
20111 +  proc sort data=temptargetused; by node; run;
20114 +  /* create tables for all interval targets as well as all class targets */
20115 +  data tempinterval tempclass;
20116 +    merge tempoutstats temptargetused( rename=(target=targetused));
20117 +    by node;
20118 +    %if "&multipleTar" eq "Y" %then %do;
20119 +      if ((missing(Target)) OR (target=targetused ));
20120 +    %end;
20122 +    if tarlevel="INTERVAL" then output tempinterval;
20123 +    else output tempclass;
20124 +  run;
20126 +  /* iniitalize intTarget and classTarget flags */
20127 +  %let em_intNobs =0;
20128 +  %let em_classNobs = 0;
20129 +  %let em_intTarget= N;
20130 +  %let em_classTarget= N;
20132 +  proc sql;
20133 +    reset noprint;
20134 +    select count(*) into :em_intNobs from tempinterval;
20135 +  quit;
20136 +  proc sql;
20137 +    reset noprint;
20138 +    select count(*) into :em_classNobs from tempclass;
20139 +  quit;
20141 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
20142 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
20144 +  /* retrieve all information for interval targets */
20145 +  %if &em_intTarget eq Y %then %do;
20147 +    /* determine if leaf variable exists */
20148 +    %let dsid=%sysfunc(open(tempinterval,i));
20149 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
20150 +    %let rc=%sysfunc(close(&dsid));
20152 +    proc transpose data=tempinterval
20153 +      %if &leafexists %then %do;
20154 +        (drop=leaf)
20155 +      %end;
20156 +      %if &validexist %then %do;
20157 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
20158 +      %end;
20159 +      %else %do;
20160 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
20161 +      %end;
20162 +      by node;
20163 +      id statname;
20164 +    run;
20165 +    data tempinterval;
20166 +      set tempinterval;
20167 +      if missing(N) then delete;
20168 +    run;
20169 +  %end;
20171 +  /* retrieve all information for class targets */
20172 +  %if &em_classTarget eq Y %then %do;
20173 +    proc sort data=tempclass; by node category; run;
20174 +    %if &validflag eq N %then %do;
20175 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
20176 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
20177 +    %end;
20178 +    %else %do;
20179 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
20180 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
20181 +    %end;
20182 +      set tempclass;
20184 +      %if &validflag eq N %then %do;
20185 +        %if "&adjusted" eq "N" %then %do;
20186 +          if statname="N" then output tempn;
20187 +        %end;
20188 +        %else %do;
20189 +          if statname="NPRIORS" then output tempn;
20190 +        %end;
20191 +        else if statname="PREDICTION" then output temppredict;
20192 +        else if statname="PROBABILITY" then output tempprob;
20193 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
20194 +        else if statname="ALTERNATIVE LOSS" then output temploss;
20195 +      %end;
20196 +      %else %do;
20197 +        %if "&adjusted" eq "N" %then %do;
20198 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
20199 +        %end;
20200 +        %else %do;
20201 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
20202 +        %end;
20203 +        else if statname="PREDICTION" then output temppredict;
20204 +        else if statname="PROBABILITY" then output tempprob;
20205 +        else if statname="VALID: PROBABILITY" then output tempvprob;
20206 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
20207 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
20208 +      %end;
20209 +    run;
20212 +    /* determine if profit/loss exists in tempprofit */
20213 +    %let em_profitflag=0;
20214 +    %let em_lossflag=0;
20215 +    proc sql;
20216 +      reset noprint;
20217 +      select count(*) into :em_profitflag from tempprofit;
20218 +    quit;
20219 +    proc sql;
20220 +      reset noprint;
20221 +      select count(*) into :em_lossflag from temploss;
20222 +    quit;
20224 +    %if &validFlag eq Y %then %do;
20225 +      proc transpose data=tempn
20226 +        %if "&adjusted" eq "N" %then %do;
20227 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
20228 +        %end;
20229 +        %else %do;
20230 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
20231 +        %end;
20232 +        by node;
20233 +        id statname;
20234 +      run;
20235 +      %if &em_profitflag ne 0 %then %do;
20236 +        proc transpose data=tempprofit out=tempprofit;
20237 +          by node category;
20238 +          id statname ;
20239 +        run;
20240 +      %end;
20241 +      %if &em_lossflag ne 0 %then %do;
20242 +        proc transpose data=temploss out=temploss;
20243 +          by node category;
20244 +          id statname ;
20245 +        run;
20246 +      %end;
20247 +      data tempprob;
20248 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
20249 +        by node
20250 +        %if &multipleTar eq Y %then %do;
20251 +          target
20252 +        %end;
20253 +        category;
20254 +      run;
20255 +    %end;
20257 +    /* store percentcorrect value */
20258 +    data temppredict;
20259 +      merge tempprob temppredict(in=_a);
20260 +      by node category;
20261 +      if _a then do;
20262 +        percentCorrect = statvalue;
20263 +        %if &validFlag eq Y %then %do;
20264 +          vpercentCorrect= vstatvalue;
20265 +        %end;
20266 +      end;
20267 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
20268 +      %if &validFlag eq Y %then %do;
20269 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
20270 +      %end;
20271 +      ;
20272 +      if missing(percentCorrect) then delete;
20273 +      drop target;
20274 +    run;
20276 +    /* build profittext */
20277 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20278 +      data tempprofittext(keep= node profittext profitloss);
20279 +        length profittext $800 profitloss 8.;
20280 +        retain profittext profitloss;
20282 +        merge tempprob
20283 +        %if &em_profitflag ne 0 %then %do;
20284 +          tempprofit
20285 +        %end;
20286 +        %else %if &em_lossflag ne 0 %then %do;
20287 +          temploss
20288 +        %end;
20289 +        ;
20290 +        by node category;
20292 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20293 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
20294 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
20295 +          %let profittype = ALL;
20296 +        %end;
20298 +        /* create the profitloss variable for nodecolor if selected */
20299 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
20301 +        %if "&profittype" eq "ALL" %then %do;
20302 +          if strip(CATEGORY)="&targetEvent" then do;
20303 +            profitloss=statvalue;
20304 +          end;
20305 +          if first.node then do;
20306 +            %if &validFlag eq N %then %do;
20307 +             %if &em_profitflag ne 0 %then %do;
20308 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20309 +             %end;
20310 +             %if &em_lossflag ne 0 %then %do;
20311 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20312 +             %end;
20313 +            %end;
20314 +            %else %do;
20315 +             %if &em_profitflag ne 0 %then %do;
20316 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20316!+;
20317 +             %end;
20318 +             %if &em_lossflag ne 0 %then %do;
20319 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20320 +             %end;
20321 +            %end;
20322 +          end;
20323 +          else if last.node then do;
20324 +            %if &validFlag eq N %then %do;
20325 +             %if &em_profitflag ne 0 %then %do;
20326 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20327 +             %end;
20328 +             %if &em_lossflag ne 0 %then %do;
20329 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20330 +             %end;
20331 +             /*if CATEGORY="&targetEvent" then do;
20332 +               profitloss=statvalue;
20333 +             end;*/
20334 +            %end;
20335 +            %else %do;
20336 +             %if &em_profitflag ne 0 %then %do;
20337 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20337!+14.&EM_PROPERTY_SPLITPRECISION);
20338 +                if CATEGORY="&targetEvent" then do;
20339 +                 profitloss=ALTERNATIVE_PROFIT;
20340 +                end;
20341 +             %end;
20342 +             %if &em_lossflag ne 0 %then %do;
20343 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20343!+14.&EM_PROPERTY_SPLITPRECISION);
20344 +                if CATEGORY="&targetEvent" then do;
20345 +                  profitloss=ALTERNATIVE_LOSS;
20346 +                end;
20347 +             %end;
20348 +            %end;
20349 +            output;
20350 +          end;
20351 +          else do;
20352 +            %if &validFlag eq N %then %do;
20353 +             %if &em_profitflag ne 0 %then %do;
20354 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20355 +             %end;
20356 +             %if &em_lossflag ne 0 %then %do;
20357 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20358 +             %end;
20359 +            %end;
20360 +            %else %do;
20361 +             %if &em_profitflag ne 0 %then %do;
20362 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20362!+14.&EM_PROPERTY_SPLITPRECISION);
20363 +             %end;
20364 +             %if &em_lossflag ne 0 %then %do;
20365 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20365!+14.&EM_PROPERTY_SPLITPRECISION);
20366 +             %end;
20367 +            %end;
20368 +          end;
20369 +        %end;
20370 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20371 +          if strip(CATEGORY) = "&targetevent" then do;
20372 +            %if &validFlag eq N %then %do;
20373 +             %if &em_profitflag ne 0 %then %do;
20374 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20375 +             %end;
20376 +             %if &em_lossflag ne 0 %then %do;
20377 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20378 +             %end;
20379 +             profitloss=statvalue;
20380 +            %end;
20381 +            %else %do;
20382 +             %if &em_profitflag ne 0 %then %do;
20383 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20383!+;
20384 +                profitloss=ALTERNATIVE_PROFIT;
20385 +             %end;
20386 +             %if &em_lossflag ne 0 %then %do;
20387 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20388 +                profitloss=ALTERNATIVE_LOSS;
20389 +             %end;
20390 +            %end;
20391 +            output;
20392 +          end;
20393 +        %end;
20394 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
20395 +          if strip(CATEGORY) = "&targetevent" then do;
20396 +            %if &validFlag eq N %then %do;
20397 +             profitloss=statvalue;
20398 +            %end;
20399 +            %else %do;
20400 +             %if &em_profitflag ne 0 %then %do;
20401 +                profitloss=ALTERNATIVE_PROFIT;
20402 +             %end;
20403 +             %if &em_lossflag ne 0 %then %do;
20404 +                profitloss=ALTERNATIVE_LOSS;
20405 +             %end;
20406 +            %end;
20407 +            output;
20408 +          end;
20409 +        %end;
20410 +      run;
20411 +    %end;
20413 +    data tempprob(keep= node probtext);
20414 +      length probtext $800;
20415 +      retain probtext;
20416 +      set tempprob ;
20417 +      by node;
20419 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20420 +      %let probtype = &EM_PROPERTY_TARGET;
20421 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
20422 +        %let probtype = ALL;
20423 +      %end;
20425 +      %if "&probtype" eq "ALL" %then %do;
20426 +        if first.node then do;
20427 +          %if &validFlag eq N %then %do;
20428 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20429 +          %end;
20430 +          %else %do;
20431 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20432 +          %end;
20433 +        end;
20434 +        else if last.node then do;
20435 +          %if &validFlag eq N %then %do;
20436 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20437 +          %end;
20438 +          %else %do;
20439 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20440 +          %end;
20441 +          output;
20442 +        end;
20443 +        else do;
20444 +          %if &validFlag eq N %then %do;
20445 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20446 +          %end;
20447 +          %else %do;
20448 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20449 +          %end;
20450 +        end;
20451 +      %end;
20452 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20453 +        if strip(CATEGORY) = "&targetevent" then do;
20454 +          %if &validFlag eq N %then %do;
20455 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20456 +          %end;
20457 +          %else %do;
20458 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20459 +          %end;
20460 +          output;
20461 +        end;
20462 +      %end;
20463 +      %else %if "&probtype" eq "NONE" %then %do;
20464 +        if last.node then do;
20465 +          output;
20466 +        end;
20467 +      %end;
20468 +    run;
20469 +  %end;
20471 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
20473 +  %let oldexists=0;
20474 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
20475 +     data old_tree_plot;
20476 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
20477 +        rename nodecolor=oldnodecolor;
20478 +     run;
20480 +     proc sort data=old_tree_plot;
20481 +        by node;
20482 +     run;
20484 +     %let oldexists=1;
20485 +  %end;
20487 +  data &EM_USER_TREE_PLOT;
20488 +    length textall $800;
20489 +    merge tempoutnodes temptargetused
20491 +    %if &em_intTarget eq Y %then %do;
20492 +      tempinterval
20493 +    %end;
20495 +    %if &em_classTarget eq Y %then %do;
20497 +      %if &validFlag eq N %then %do;
20498 +        tempn(rename=(statvalue=N))
20499 +      %end;
20500 +      %else %do;
20501 +        tempn
20502 +      %end;
20504 +      temppredict tempprob
20506 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20507 +        tempprofittext
20508 +      %end;
20509 +    %end;
20510 +    ;
20511 +    by node;
20513 +    /* build nodetext based on user selection */
20514 +    textall="";
20516 +    %if &em_intTarget eq Y %then %do;
20517 +    if tarlevel="INTERVAL" then do;
20518 +      /* Nodeid */
20519 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20520 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20521 +      %end;
20523 +      /* Target identifier if multiple targets are used */
20524 +      %if "&multipleTar" eq "Y" %then %do;
20525 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20526 +      %end;
20528 +      %if &validFlag eq Y %then %do;
20529 +         /* Column labels displayed in validflag eq Y only */
20530 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20531 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20531!+noquote ))";
20532 +         %end;
20534 +         /* Average values */
20535 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20536 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20537 +         %end;
20539 +         /* RASE */
20540 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20541 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
20542 +         %end;
20544 +         /* Count */
20545 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20546 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
20547 +         %end;
20548 +      %end;
20549 +      %else %do;
20550 +         /* Average values */
20551 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20552 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20553 +         %end;
20555 +         /* RASE */
20556 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20557 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
20558 +         %end;
20560 +         /* Count */
20561 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20562 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
20563 +         %end;
20564 +      %end;
20566 +      /* nodecolor */
20567 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
20568 +        nodecolor=PREDICTION;
20569 +      %end;
20570 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
20571 +        nodecolor=RASE;
20572 +      %end;
20573 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
20574 +        nodecolor=1;
20575 +      %end;
20577 +    end;
20578 +    %end;
20579 +    %if &em_classTarget eq Y %then %do;
20580 +    if tarlevel^="INTERVAL" then  do;
20582 +      /* Nodeid */
20583 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20584 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20585 +      %end;
20586 +      /* Target identifier if multiple targets are used */
20587 +      %if "&multipleTar" eq "Y" %then %do;
20588 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20589 +      %end;
20591 +      /* Predicted values */
20592 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
20593 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
20594 +      %end;
20596 +      /* Column labels displayed in validflag eq Y only */
20597 +      %if "&ValidFlag" eq "Y" %then %do;
20598 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20599 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20599!+noquote ))";
20600 +        %end;
20601 +      %end;
20603 +      /* Target Values */
20604 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
20605 +        textall=strip(textall)||"0A"x||strip(probtext);
20606 +      %end;
20608 +      /* include profit or loss for all target levels */
20609 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
20610 +        textall=strip(textall)||"0A"x||strip(profittext);
20611 +      %end;
20613 +      %if &validFlag eq N %then %do;
20614 +        /* Percent Correct */
20615 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20616 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
20617 +        %end;
20619 +         /* Count */
20620 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20621 +          %if "&adjusted" eq "N" %then %do;
20622 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
20623 +          %end;
20624 +          %else %do;
20625 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
20626 +          %end;
20627 +         %end;
20628 +      %end;
20629 +      %else %do;
20630 +        /* Percent Correct */
20631 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20632 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
20633 +        %end;
20635 +         /* Count */
20636 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20637 +          %if "&adjusted" eq "N" %then %do;
20638 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
20639 +          %end;
20640 +          %else %do;
20641 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
20642 +          %end;
20643 +         %end;
20644 +      %end;
20646 +      /* nodecolor */
20647 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
20648 +       %if &multipleTar ne Y %then %do;
20649 +        nodecolor=&predTarget;
20650 +       %end;
20651 +       %else %do;
20652 +         nodecolor=percentcorrect;
20653 +       %end;
20654 +      %end;
20655 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
20656 +        nodecolor=percentcorrect;
20657 +      %end;
20658 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
20659 +        nodecolor=1;
20660 +      %end;
20661 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
20662 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
20663 +          nodecolor=percentcorrect;
20664 +        %end;
20665 +        %else %do;
20666 +          nodecolor=profitloss;
20667 +        %end;
20668 +      %end;
20670 +    end;
20671 +    %end;
20672 +    %if &em_intTarget eq Y %then %do;
20673 +     drop  PREDICTION  TARGET TARLEVEL
20674 +     %if &ValidFlag eq Y %then %do;
20675 +         VPREDICTION
20676 +     %end;
20677 +     ;
20678 +    %end;
20679 +    %if &em_classTarget eq Y %then %do;
20680 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
20681 +     %if &ValidFlag eq Y %then %do;
20682 +         VSTATVALUE
20683 +     %end;
20684 +     ;
20685 +    %end;
20687 +  run;
20689 +  /* add leaf index information to plotds - based on primary target only*/
20690 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20691 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20692 +      set &EM_USER_OUTSTATS;
20693 +      if ((statname="PROBABILITY"
20694 +      %if &validexist %then %do;
20695 +       or statname="VALID: PROBABILITY"
20696 +      %end;
20697 +      ) AND (CATEGORY="&TARGETEVENT")
20698 +      %if "&multipleTar" eq "Y" %then %do;
20699 +        AND (Target="%EM_TARGET")
20700 +      %end;
20701 +      );
20702 +    run;
20704 +    %if &validexist %then %do;
20705 +      proc sort data=tempprob; by node; run;
20706 +      %let vpredTarget = V%substr(&predTarget, 2);
20707 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
20708 +         by node;
20709 +         id statname;
20710 +      run;
20711 +    %end;
20712 +  %end;
20713 +  %else %do;
20714 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20715 +      set &EM_USER_OUTSTATS;
20716 +      if ((statname="PREDICTION"
20717 +      %if &validexist %then %do;
20718 +       or statname="VALID: PREDICTION"
20719 +      %end;
20720 +      )
20721 +      %if "&multipleTar" eq "Y" %then %do;
20722 +        AND (Target="%EM_TARGET")
20723 +      %end;
20724 +      );
20725 +    run;
20726 +    %if &validexist %then %do;
20727 +      proc sort data=tempprob; by node; run;
20728 +      %let vpredTarget = V%substr(&predTarget, 2);
20729 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
20730 +         by node;
20731 +         id statname;
20732 +      run;
20733 +    %end;
20734 +  %end;
20736 +  proc sort data=tempprob; by node; run;
20737 +  data tempoutnodes;
20738 +    merge tempoutnodes tempprob;
20739 +    by node;
20740 +  run;
20742 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
20743 +  data tempnodes;
20744 +    retain traintotal validtotal;
20745 +    set tempnodes(where=(leaf ne . ));
20746 +    tprob=round(&predTarget, .01);
20747 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20748 +      percevent_train=round(tprob*100, .01);
20749 +    %end;
20750 +    %else %do;
20751 +      percevent_train=tprob;
20752 +    %end;
20754 +    perc_train=round((n/traintotal)*100, 0.01);
20755 +    /* leafwidth already has a *10 multiplier */
20756 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
20758 +    %if &validexist %then %do;
20759 +      %let vpredTarget = V%substr(&predTarget,2);
20760 +      vprob=round(&vpredTarget, .01);
20761 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20762 +        percevent_valid=round(vprob*100, .01);
20763 +      %end;
20764 +      %else %do;
20765 +        percevent_valid=vprob;
20766 +      %end;
20767 +      perc_valid=round((vn/validtotal)*100, .01);
20768 +    %end;
20770 +    index=_N_;
20771 +    keep node index tprob perc_train percevent_train
20772 +    %if &validexist %then %do;
20773 +        vprob percevent_valid perc_valid
20774 +    %end;
20775 +    ;
20776 +  run;
20777 +  proc sort data=tempnodes; by node; run;
20778 +  data &EM_USER_TREE_PLOT;
20779 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
20780 +    by node;
20781 +    if missing(node) then delete;
20782 +    %if &oldexists %then %do;
20783 +      if missing(nodecolor) then nodecolor=oldnodecolor;
20784 +      drop oldnodecolor;
20785 +    %end;
20786 +    abovetext = compbl(abovetext);
20788 +    /* add variable labels */
20789 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
20790 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
20791 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
20792 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
20793 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
20794 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
20796 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20797 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
20798 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
20799 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20800 +          %end;
20801 +          %else %do;
20802 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
20803 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
20804 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20805 +          %end;
20806 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
20808 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
20809 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
20810 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20811 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
20812 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20813 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
20814 +          %end;
20815 +          %else %do;
20816 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
20817 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20818 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
20819 +          %end;
20820 +    ;
20821 +  run;
20823 +  /* delete temporary tables */
20824 +  proc datasets lib=work nolist;
20825 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
20826 +  run;
20828 +%mend em_tree_makePlotDs;
20832 +%macro em_tree_report;
20834 +   /* report properties */
20835 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
20836 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
20837 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
20838 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
20839 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
20840 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
20841 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
20842 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
20843 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
20844 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
20845 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
20846 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
20847 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
20849 +   %let validexist=0;
20850 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
20851 +     %let validexist=1;
20852 +   %end;
20854 +   /* determine if multiple targets will be processed */
20855 +   %let em_tree_multipleTargets=N;
20856 +   %let em_tree_numTarget=1;
20857 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
20858 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
20859 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
20860 +         %let em_tree_multipleTargets=N;
20861 +      %end;
20862 +      %else %do;
20863 +        data _null_;
20864 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
20865 +          if eof then
20866 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
20867 +        run;
20869 +        %if &em_tree_numTarget gt 1 %then %do;
20870 +           %let em_tree_multipleTargets=Y;
20871 +        %end;
20872 +     %end;
20873 +   %end;
20875 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
20877 +   /* variable importance */
20878 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
20879 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
20881 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
20882 +     /* and the columns may not be generated                                                                                 */
20883 +     %let em_tree_cvexists=;
20884 +     %let em_tree_surrexists=.;
20885 +     data _null_;
20886 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
20887 +       if eof then do ;
20888 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
20889 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
20890 +       end;
20891 +     run;
20893 +     data &EM_USER_OUTIMPORT;
20894 +         set &EM_USER_OUTIMPORT;
20895 +         /* format columns based on Precison value specified */
20896 +         format importance 15.&EM_PROPERTY_PRECISION
20897 +              %if &validexist %then %do;
20898 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
20899 +              %end;
20900 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
20901 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
20902 +              %end;
20903 +         ;
20904 +     run;
20906 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
20907 +     proc print data=&EM_USER_OUTIMPORT
20908 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
20909 +          (where=((nrules>0) OR (nsurrogates>0)))
20910 +        %end;
20911 +        %else %do;
20912 +           (where=(nrules>0))
20913 +        %end;
20914 +        label noobs
20915 +        ;
20916 +     run;
20917 +     title10;
20919 +   %end;
20921 +   /* Sequence */
20922 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
20923 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
20924 +   data _null_ ;
20925 +      set &EM_USER_outseq (obs=2) end=eof ;
20926 +      if eof then do ;
20927 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
20928 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
20929 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
20930 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
20931 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
20932 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
20933 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
20934 +      end;
20935 +    run;
20937 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
20938 +      data &EM_USER_OUTSEQ;
20939 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
20940 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
20941 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20942 +           _XMISC_=_VMISC_
20943 +        %end;
20944 +        %if "&em_tree_aprof" ne "."  %then %do;
20945 +           _XAPROF_=_VAPROF_
20946 +           _XPROF_ = _VPROF_
20947 +        %end;
20948 +        %if "&em_tree_aloss" ne "."  %then %do;
20949 +           _XALOSS_=_VALOSS_
20950 +        %end;
20951 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
20952 +           _XPASE_ = _VPASE_
20953 +           _XPMISC_ = _VPMISC_
20954 +        %end;
20956 +        ));
20957 +     %end;
20958 +     %else %do;
20959 +        set &EM_USER_OUTSEQ;
20960 +     %end;
20962 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
20963 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20964 +            _MISC_   15.&EM_PROPERTY_PRECISION
20965 +         %end;
20966 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
20967 +            _PASE_  15.&EM_PROPERTY_PRECISION
20968 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
20969 +         %end;
20970 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
20971 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
20972 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20973 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20974 +            %end;
20975 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
20976 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20977 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20978 +            %end;
20979 +         %end;
20980 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20981 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20982 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20983 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20984 +            %end;
20985 +         %end;
20986 +         %if "&em_tree_seq" ne "." %then %do;
20987 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20988 +         %end;
20989 +         %if "&em_tree_vseq" ne "." %then %do;
20990 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20991 +         %end;
20992 +         %if "&em_tree_aprof" ne "." %then %do;
20993 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20994 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20995 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20996 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20997 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20998 +           %end;
20999 +         %end;
21000 +         %else %if "&em_tree_aloss" ne "." %then %do;
21001 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
21002 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21003 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
21004 +           %end;
21005 +         %end;
21006 +      ;
21007 +    run;
21008 +   %end;
21010 +   /* Observation Based Importance */
21011 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
21013 +      /* need to check for 0 obs */
21014 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
21015 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
21016 +      %let rc=%sysfunc(close(&dsid));
21018 +      %if &onobs %then %do;
21019 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
21020 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
21022 +         data &EM_USER_OUTOBSIMP;
21023 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
21024 +           if _a;
21025 +           by _INPUT1_;
21026 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
21027 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21028 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
21029 +                   %end;
21030 +                   ;
21031 +         run;
21032 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
21033 +      %end;
21034 +   %end;
21036 +  %end;
21038 +  /* create dataset to support tree diagram and icicle plot */
21039 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
21040 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
21042 +  /* display tree diagram */
21043 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
21044 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
21046 +  /* display icicle diagram */
21047 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
21048 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
21050 +  /* Leaf Statistics Plot */
21051 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
21053 +  /* print leaf information to output window */
21054 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
21056 +     proc sort data=&EM_USER_TREE_PLOT out=t;
21057 +       by descending N;
21058 +     run;
21060 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
21061 +     %local vn;
21062 +     data _null_;
21063 +       set t (obs=2) end=eof;
21064 +       if eof then do;
21065 +         call symput("vn", strip(put(vn, best.)));
21066 +       end;
21067 +     run;
21069 +     data t;
21070 +       set t;
21071 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
21072 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
21073 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21074 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
21075 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
21076 +       %end;
21077 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21078 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
21079 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21080 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
21081 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
21082 +          %end;
21083 +       %end;
21084 +       ;
21085 +     run;
21087 +     /* determine if rase is found in t */
21088 +    %let dsid=%sysfunc(open(t,i));
21089 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
21090 +    %let rc=%sysfunc(close(&dsid));
21092 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
21093 +     proc print data=t noobs label;
21094 +       where tprob ne .;
21095 +       var node depth N tprob
21096 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21097 +         %if "&vn" ne "." %then %do;
21098 +           VN
21099 +         %end;
21100 +         vprob
21101 +       %end;
21102 +       %if &raseexists %then %do;
21103 +            RASE
21104 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
21105 +              VRASE
21106 +            %end;
21107 +       %end;
21108 +       ;
21109 +     run;
21110 +     title10;
21111 +  %end;
21113 +  /* create plots that are done during training of node */
21114 +  /* display iterative plot, including reference line */
21115 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
21116 +   /* %if &nleaves eq  %then %do; */
21117 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
21118 +      data _null_;
21119 +        set &EM_USER_OUTTOPOLOGY end=eof;
21120 +        if eof then do;
21121 +          call symput('nleaves', LEAF);
21122 +        end;
21123 +      run;
21124 +   /* %end; */
21126 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
21127 +    /*%EM_REPORT(view=1, Y=_ASE_); */
21128 +  %end;
21130 +  /* display leaf statistics */
21131 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
21133 +  /* stats by node if multiple targets = Y */
21134 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
21135 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
21136 +    data &EM_USER_OUTSTATS;
21137 +      set &EM_USER_OUTSTATS;
21139 +     * if STATNAME="TARGET" then delete;
21140 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
21141 +      drop leaf;
21142 +    run;
21143 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
21145 +  %end;
21146 +  %else %do;
21147 +    /* add outstats and outdescribe to spk but not results */
21148 +    %EM_REPORT(viewtype=, key=OUTSTATS);
21149 +  %end;
21151 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 82 observations read from the data set EMWS1.TREE3_OUTSEQ.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 82 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TOTALSAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 89 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 89 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 89 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 89 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      155:103   204:136   247:102   247:125   279:104   313:104   355:103   355:126   398:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      414:99
NOTE: There were 89 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 116 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 771 observations read from the data set EMWS1.TREE3_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 27 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 116 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 116 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 27 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 117 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 117 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 116 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 117 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 117 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 117 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 117 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 117 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 117 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE3_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 702 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 702 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 702 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 585 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 117 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 702 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 702 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 702 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 117 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 702 observations and 6 variables.
NOTE: The data set WORK.TEMPCLASS has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 702 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 117 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 117 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 117 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 117 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 117 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      942:196   958:204   958:221
NOTE: There were 117 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 117 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 117 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set EMWS1.TREE3_TREE_PLOT has 117 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 702 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 234 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 234 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 234 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 234 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 117 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 117 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 117 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 117 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 117 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 117 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 117 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 117 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 90 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 90 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 117 observations read from the data set EMWS1.TREE3_TREE_PLOT.
NOTE: There were 90 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE3_TREE_PLOT has 117 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 117 observations read from the data set EMWS1.TREE3_TREE_PLOT.
NOTE: The data set WORK.T has 117 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 117 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 117 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      316:141
NOTE: There were 117 observations read from the data set EMWS1.TREE3_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
21152
21153  *------------------------------------------------------------*;
21154  * End REPORT: Tree3;
21155  *------------------------------------------------------------*;
 
21156  /* Reset EM Options */
21157  options formchar="|----|+|---+=|-/\<>*";
21158  options nocenter ls=256 ps=10000;
21159  goptions reset=all device=GIF NODISPLAY;
 
21160  proc sort data=WORK.EM_USER_REPORT;
21161  by ID VIEW;
21162  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21163  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
21164  by NAME;
21165  run;
 
NOTE: There were 16 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 16 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21166  proc sort data=EMWS1.Tree3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
21167  by NAME;
21168  run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 16 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21169  data WORK.ASSESS_META;
21170  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
21171  by NAME;
21172  run;
 
NOTE: There were 16 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 16 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 16 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21173  data EM_temp_assessMeta;
21174  set EMWS1.Tree3_CMeta_TRAIN;
21175  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
21176  run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
21177  data EM_temp_assessdata;
21178  set EMWS1.Tree3_TRAIN(keep=
21179  P_totalsal
21180  R_totalsal
21181  V_totalsal
21182  _WARN_
21183  totalsal
21184  );
21185  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 6616 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 6616 observations read from the data set EMWS1.TREE3_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 6616 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
25516   data EM_temp_assessMeta;
25517   set EMWS1.Tree3_CMeta_TRAIN;
25518   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
25519   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
25520   data EM_temp_assessdata;
25521   set EMWS1.Tree3_VALIDATE(keep=
25522   P_totalsal
25523   R_totalsal
25524   V_totalsal
25525   _WARN_
25526   totalsal
25527   );
25528   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2835 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 2835 observations read from the data set EMWS1.TREE3_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2835 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
29869   %let _cn = %sysfunc(getoption(CENTER));
29870   options nocenter;
29871   proc print data=EMWS1.Tree3_EMREPORTFIT noobs label;
29872   var STAT LABEL TRAIN
29873   VALIDATE
29874   TEST
29875   ;
29876   by TARGET TARGETLABEL;
29877   title9 ' ';
29878   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
29879   run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: At least one W.D format was too small for the number to be printed. The decimal may be shifted by the "BEST" format.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
29880   title10;
29881   options &_cn;
 
29882   proc datasets library=EMWS1 nolist;
29883   modify Tree3_EMRANK;
29884   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
29885   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29886   run;
 
NOTE: MODIFY was successful for EMWS1.TREE3_EMRANK.DATA.
29887   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29888   %let _cn = %sysfunc(getoption(CENTER));
29889   options nocenter;
29890   proc print data=EMWS1.Tree3_EMRANK label noobs;
29891   var
29892   decile N _targetMean_ _meanP_;
29893   by
29894   notsorted DATAROLE
29895   notsorted TARGET
29896   notsorted TARGETLABEL
29897   ;
29898   title9 ' ';
29899   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
29900   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE3_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
29901   title10;
29902   options &_cn;
 
29903   proc datasets library=EMWS1 nolist;
29904   modify Tree3_EMSCOREDIST;
29905   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
29906   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29907   run;
 
NOTE: MODIFY was successful for EMWS1.TREE3_EMSCOREDIST.DATA.
29908   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
